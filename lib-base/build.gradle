apply from: '../build/javaproject.gradle'

dependencies {
    api 'apache:commons-io:2.6',
            'apache:commons-lang3:3.14',
            'testng:testng:6.8-CISD',
            'rinn:restrictions:1.0.2'
} 

tasks.withType(Test) {
    systemProperty "java.library.path", "libs/native/unix/amd64-Linux:libs/native/nativedata/amd64-Linux:libs/native/unix/x86_64-Mac OS X:libs/native/nativedata/x86_64-Mac OS X"
}


sourceSets {
  test {
    resources {
      srcDir "libs"
      include "**"
    }
  }
}

jar {
    duplicatesStrategy 'include'
    archiveName "${project.group}-base-${version}.jar"
    manifest {
        attributes 'Main-Class': 'ch.systemsx.cisd.base.BuildAndEnvironmentInfo'
    }

    from('targets/dist') {
        include 'BUILD*INFO'
    }    

    from fileTree("libs/")
}

sourcesJar {
    archiveName "${project.group}-base-${version}-sources.jar"
}

task distributionZip(type: Zip, dependsOn: [jar, sourcesJar, javadoc, testJar]) {
    def ver = project.ext.versionNumber.startsWith('SNAPSHOT') ? "${version}" : ""
    def myVersion = project.ext.versionNumber.startsWith('SNAPSHOT') ? "${project.ext.versionNumber}-${project.ext.revisionNumber}" : project.ext.versionNumber
    archiveName "${project.group}-base-${myVersion}.zip"
    from ('dist') {
        into "${project.group}-base"
    }

    from ('doc') {
        into "${project.group}-base/doc"
    }

    from (jar) {
        into "${project.group}-base/lib"
    }
    
    from (sourcesJar) {
        into "${project.group}-base/src"
    }
    
    from (testJar) {
        into "${project.group}-base/lib"
    }
    
    from (javadoc) {
        into "${project.group}-base/doc"
    }
}

build.dependsOn distributionZip

publishing {
    publications {
        ivy(IvyPublication) {
            module "${project.group}-base"
            revision project.revisionForPublication
            from components.java
            artifact(sourcesJar) {
                type = 'source'
            }
            descriptor {
                withXml {
                    for (org in ['testng', 'rinn']) {
                      asNode().dependencies.dependency.find { it.@org == org }.replaceNode {}
                    }
                }
            }
        }
  }
}
