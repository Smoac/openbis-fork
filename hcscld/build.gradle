apply from: '../gradle/javaproject.gradle'

group="cisd"
buildInfo=project.name

dependencies {
    compile project(':jhdf5'),
            'cisd:cisd-base:+',
            'rinn:restrictions:+'
    
    testCompile 'testng:testng:+'
} 

sourceSets { 
    test {
        java {
            srcDirs = ['sourceTest']
        }
        resources {
            srcDirs = ['sourceTest']
        }
    }
}

test {
    useTestNG()
    options.suites('sourceTest/tests.xml')    

    jvmArgs '-Xmx2048m', '-XX:MaxPermSize=256m', '-Duser.timezone=Europe/Zurich'
    
    testLogging.showStandardStreams = true
    ignoreFailures = true
}
test.dependsOn checkRestrictions

tasks.withType(Test) {
    systemProperty "java.library.path", "../jhdf5/libs/native/jhdf5/amd64-Linux:../jhdf5/libs/native/jhdf5/amd64-Linux:../jhdf5/libs/native/jhdf5/x86_64-Mac OS X:../jhdf5/libs/native/jhdf5/x86_64-Mac OS X"
}


new ByteArrayOutputStream().withStream { os ->
    def result = exec {
        executable = 'svn'
        args = ['info']
        standardOutput = os
    }
    def outputAsString = os.toString()
    def matchLastChangedRevMatcher = outputAsString =~ /Last Changed Rev: (\d+)/
    def urlMatcher = outputAsString =~ /URL: .*\/(.+)/

    def revision = "r${matchLastChangedRevMatcher[0][1]}"
    def branch = urlMatcher[0][1]

    if (branch.equals('trunk')) {
        project.version = revision
    } else {
        project.version = branch
    }
}

task isClean(type: Exec) {
    workingDir = '.'
    commandLine = ['svn', 'status']
    standardOutput = new ByteArrayOutputStream()

    ext.output = { 
        return standardOutput.toString().length() == 0
    }    
}

task createBuildInfo(dependsOn: [isClean]){
    
    ext.output = "${buildDir}/BUILD-${buildInfo}.INFO"
    
    doLast {
        def writer = new FileWriter(ext.output)
        try {
            writer.println("SNAPSHOT:"+project.version.substring(1)+":"+(isClean.output()?"clean":"dirty"))
        } finally {
            writer.close()
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'ch.ethz.sis.hcscld.BuildAndEnvironmentInfo'
        attributes 'Class-Path': configurations.runtime.collect { it.getName() }.join(' ')
    }

    from (createBuildInfo.output)
}
jar.dependsOn createBuildInfo

task javadocZip(type: Zip, dependsOn: javadoc) {
    archiveName 'sis-hcscld-javadoc.zip'
    from javadoc.destinationDir
}

task exampleSourcesJar(type: Jar) {
    classifier = 'exampleSources'
    from sourceSets.examples.allSource
}

task distributionZip(type: Zip, dependsOn: [jar, sourcesJar, exampleSourcesJar, javadocZip, project(':jhdf5').distributionZip]) {
    baseName = 'sis-hcscld'

    from ('dist') {
        into 'sis-hcscld'
    }

    from (javadocZip.archivePath) {
        into 'sis-hcscld/doc'
    }

    from (jar.archivePath) {
        into 'sis-hcscld/lib'
        rename '(.*)', 'sis-hcscld.jar'
    }
    
    from (configurations.runtime) {
        exclude '*restriction*'
        exclude '*bcel*'
        into 'sis-hcscld/lib'
    }
    
    from (sourcesJar.archivePath) {
        into 'sis-hcscld/src'
        rename '(.*)', 'sis-hcscld-src.zip'
    }

    from (exampleSourcesJar.archivePath) {
        into 'sis-hcscld/doc'
        rename '(.*)', 'sis-hcscld-examples-src.zip'
    }

    from (project(':jhdf5').nativeJarLinuxIntel.archivePath) {
        into 'sis-hcscld/lib'
    }

    from (project(':jhdf5').nativeJarMacIntel.archivePath) {
        into 'sis-hcscld/lib'
    }

    from (project(':jhdf5').nativeJarWindowsIntel.archivePath) {
        into 'sis-hcscld/lib'
    }
}

build.dependsOn distributionZip