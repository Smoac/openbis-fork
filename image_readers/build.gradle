evaluationDependsOn(':commonbase')
evaluationDependsOn(':lib-common')

apply from: '../build/javaproject.gradle'

dependencies {
    api project(':lib-common'),
            'imagej:ij:1.43u',
            'bioformats:bioformats:6.5.1',
            'slf4j:slf4j:1.6.2',
            'slf4j:slf4j-log4j12:1.6.2'

    testImplementation project(path: ':commonbase', configuration: 'tests'),
            project(path: ':lib-common', configuration: 'tests'),
            'fjelmer:classycle:1.4.2',
            'testng:testng:6.8-CISD'
}

def jarConfiguration(parameters) {
    return {
        destinationDir = project.distsDirectory.getAsFile().get()
        baseName = parameters.get('baseName')
        def libraryName = parameters.get('libraryName')

        from('targets/dist') {
            include 'BUILD*INFO'
        }
        from(project.compileJava.outputs.getFiles().getAsFileTree().matching {
            include '**/imagereaders/*.class'
            include "**/imagereaders/${libraryName}/*.class"
        })
        from(project.compileTestJava.outputs.getFiles().getAsFileTree().matching {
            include '**/imagereaders/*.class'
            include "**/imagereaders/${libraryName}/*.class"
        })
        from("resource/manifest/${libraryName}")
        manifest {
            attributes("Version": project.versionNumber,
                    "Build-Number": "${project.versionNumber} (r${project.revisionNumber},${project.cleanFlag})")
        }
    }
}

task jarImageIO(type: Jar) {
    configure jarConfiguration([
            'baseName'   : 'cisd-image_readers',
            'libraryName': 'imageio'
    ])
}

task jarBioformats(type: Jar) {
    configure jarConfiguration([
            'baseName'   : 'cisd-image_readers-bioformats',
            'libraryName': 'bioformats'
    ])
}

task jarImageJ(type: Jar) {
    configure jarConfiguration([
            baseName   : 'cisd-image_readers-imagej',
            libraryName: 'ij'
    ])
}

jar {
    destinationDir = project.distsDirectory.getAsFile().get()
}
jar.dependsOn([jarImageIO, jarBioformats, jarImageJ])

sourcesJar {
    destinationDir = project.distsDirectory.getAsFile().get()
}

