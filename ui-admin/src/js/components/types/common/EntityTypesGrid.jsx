import React from 'react'
import GridWithOpenbis from '@src/js/components/common/grid/GridWithOpenbis.jsx'
import GridExportField from '@src/js/components/common/grid/GridExportField.js'
import EntityTypeLink from '@src/js/components/common/link/EntityTypeLink.jsx'
import PluginLink from '@src/js/components/common/link/PluginLink.jsx'
import openbis from '@src/js/services/openbis.js'
import messages from '@src/js/common/messages.js'
import logger from '@src/js/common/logger.js'

class EntityTypesGrid extends React.PureComponent {
  render() {
    logger.log(logger.DEBUG, 'EntityTypesGrid.render')

    const {
      id,
      rows,
      exportable,
      selectedRowId,
      onSelectedRowChange,
      controllerRef
    } = this.props

    return (
      <GridWithOpenbis
        id={id}
        settingsId={id}
        controllerRef={controllerRef}
        header={this.getHeader()}
        columns={this.getColumns()}
        rows={rows}
        sort='code'
        exportable={exportable}
        selectable={true}
        selectedRowId={selectedRowId}
        onSelectedRowChange={onSelectedRowChange}
      />
    )
  }

  getHeader() {
    const { kind } = this.props

    if (kind === openbis.EntityKind.EXPERIMENT) {
      return messages.get(messages.COLLECTION_TYPES)
    } else if (kind === openbis.EntityKind.SAMPLE) {
      return messages.get(messages.OBJECT_TYPES)
    } else if (kind === openbis.EntityKind.DATA_SET) {
      return messages.get(messages.DATA_SET_TYPES)
    } else if (kind === openbis.EntityKind.MATERIAL) {
      return messages.get(messages.MATERIAL_TYPES)
    }
  }

  getColumns() {
    const { kind } = this.props
    const columns = []

    columns.push({
      name: 'code',
      label: messages.get(messages.CODE),
      exportableField: GridExportField.code(),
      getValue: ({ row }) => row.code,
      renderValue: ({ row }) => {
        return <EntityTypeLink typeCode={row.code} typeKind={kind} />
      }
    })

    columns.push({
      name: 'description',
      label: messages.get(messages.DESCRIPTION),
      exportableField: GridExportField.description(),
      getValue: ({ row }) => row.description
    })

    columns.push({
      name: 'validationPlugin',
      label: messages.get(messages.VALIDATION_PLUGIN),
      exportableField: GridExportField.validationPlugin(),
      getValue: ({ row }) => row.validationPlugin,
      renderValue: ({ value }) => {
        return (
          <PluginLink
            pluginName={value}
            pluginType={openbis.PluginType.ENTITY_VALIDATION}
          />
        )
      }
    })

    if (kind === openbis.EntityKind.SAMPLE) {
      columns.push({
        name: 'generatedCodePrefix',
        label: messages.get(messages.GENERATED_CODE_PREFIX),
        exportableField: GridExportField.generatedCodePrefix(),
        getValue: ({ row }) => row.generatedCodePrefix
      })

      columns.push({
        name: 'autoGeneratedCode',
        label: messages.get(messages.GENERATE_CODES),
        exportableField: GridExportField.generateCodes(),
        getValue: ({ row }) => row.autoGeneratedCode
      })

      columns.push({
        name: 'subcodeUnique',
        label: messages.get(messages.SUBCODES_UNIQUE),
        exportableField: GridExportField.uniqueSubcodes(),
        getValue: ({ row }) => row.subcodeUnique
      })
    }

    if (kind === openbis.EntityKind.DATA_SET) {
      columns.push({
        name: 'mainDataSetPattern',
        label: messages.get(messages.MAIN_DATA_SET_PATTERN),
        exportableField: GridExportField.mainDataSetPattern(),
        getValue: ({ row }) => row.mainDataSetPattern
      })

      columns.push({
        name: 'mainDataSetPath',
        label: messages.get(messages.MAIN_DATA_SET_PATH),
        exportableField: GridExportField.mainDataSetPath(),
        getValue: ({ row }) => row.mainDataSetPath
      })

      columns.push({
        name: 'disallowDeletion',
        label: messages.get(messages.DISALLOW_DELETION),
        exportableField: GridExportField.disallowDeletion(),
        getValue: ({ row }) => row.disallowDeletion
      })
    }

    return columns
  }
}

export default EntityTypesGrid
