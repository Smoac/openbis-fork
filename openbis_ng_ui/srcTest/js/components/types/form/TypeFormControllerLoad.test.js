import ComponentContext from '@srcTest/js/components/common/ComponentContext.js'
import TypeFormControler from '@src/js/components/types/form/TypeFormController.js'
import TypeFormFacade from '@src/js/components/types/form/TypeFormFacade'
import objectTypes from '@src/js/common/consts/objectType.js'
import openbis from '@srcTest/js/services/openbis.js'

jest.mock('@src/js/components/types/form/TypeFormFacade')

let context = null
let facade = null
let controller = null

beforeEach(() => {
  jest.resetAllMocks()

  context = new ComponentContext()
  facade = new TypeFormFacade()
  controller = new TypeFormControler(facade)
})

describe('TypeFormController.load', () => {
  test('successful existing', async () => {
    const TEST_PLUGIN_1 = new openbis.Plugin()
    TEST_PLUGIN_1.setName('TEST_PLUGIN_1')

    const TEST_PLUGIN_2 = new openbis.Plugin()
    TEST_PLUGIN_2.setName('TEST_PLUGIN_2')

    const TEST_VOCABULARY = new openbis.Vocabulary()
    TEST_VOCABULARY.setCode('TEST_VOCABULARY')

    const TEST_MATERIAL_TYPE = new openbis.MaterialType()
    TEST_MATERIAL_TYPE.setCode('TEST_MATERIAL_TYPE')

    const TEST_PROPERTY_TYPE_1_DTO = new openbis.PropertyType()
    TEST_PROPERTY_TYPE_1_DTO.setCode('TEST_PROPERTY_TYPE_1')
    TEST_PROPERTY_TYPE_1_DTO.setLabel('TEST_LABEL_1')
    TEST_PROPERTY_TYPE_1_DTO.setDescription('TEST_DESCRIPTION_1')
    TEST_PROPERTY_TYPE_1_DTO.setDataType(openbis.DataType.INTEGER)

    const TEST_PROPERTY_TYPE_2_DTO = new openbis.PropertyType()
    TEST_PROPERTY_TYPE_2_DTO.setCode('TEST_PROPERTY_TYPE_2')
    TEST_PROPERTY_TYPE_2_DTO.setLabel('TEST_LABEL_2')
    TEST_PROPERTY_TYPE_2_DTO.setDescription('TEST_DESCRIPTION_2')
    TEST_PROPERTY_TYPE_2_DTO.setDataType(openbis.DataType.CONTROLLEDVOCABULARY)
    TEST_PROPERTY_TYPE_2_DTO.setVocabulary(TEST_VOCABULARY)

    const TEST_PROPERTY_TYPE_3_DTO = new openbis.PropertyType()
    TEST_PROPERTY_TYPE_3_DTO.setCode('TEST_PROPERTY_TYPE_3')
    TEST_PROPERTY_TYPE_3_DTO.setLabel('TEST_LABEL_3')
    TEST_PROPERTY_TYPE_3_DTO.setDescription('TEST_DESCRIPTION_3')
    TEST_PROPERTY_TYPE_3_DTO.setDataType(openbis.DataType.MATERIAL)
    TEST_PROPERTY_TYPE_3_DTO.setMaterialType(TEST_MATERIAL_TYPE)

    const TEST_PROPERTY_ASSIGNMENT_1 = new openbis.PropertyAssignment()
    TEST_PROPERTY_ASSIGNMENT_1.setPropertyType(TEST_PROPERTY_TYPE_1_DTO)
    TEST_PROPERTY_ASSIGNMENT_1.setSection('TEST_SECTION_1')
    TEST_PROPERTY_ASSIGNMENT_1.setMandatory(true)
    TEST_PROPERTY_ASSIGNMENT_1.setShowInEditView(true)
    TEST_PROPERTY_ASSIGNMENT_1.setShowRawValueInForms(true)
    TEST_PROPERTY_ASSIGNMENT_1.setPlugin(TEST_PLUGIN_1)

    const TEST_PROPERTY_ASSIGNMENT_2 = new openbis.PropertyAssignment()
    TEST_PROPERTY_ASSIGNMENT_2.setPropertyType(TEST_PROPERTY_TYPE_2_DTO)
    TEST_PROPERTY_ASSIGNMENT_2.setSection('TEST_SECTION_2')
    TEST_PROPERTY_ASSIGNMENT_2.setMandatory(true)
    TEST_PROPERTY_ASSIGNMENT_2.setShowInEditView(false)
    TEST_PROPERTY_ASSIGNMENT_2.setShowRawValueInForms(true)

    const TEST_PROPERTY_ASSIGNMENT_3 = new openbis.PropertyAssignment()
    TEST_PROPERTY_ASSIGNMENT_3.setPropertyType(TEST_PROPERTY_TYPE_3_DTO)
    TEST_PROPERTY_ASSIGNMENT_3.setSection('TEST_SECTION_2')
    TEST_PROPERTY_ASSIGNMENT_3.setMandatory(false)
    TEST_PROPERTY_ASSIGNMENT_3.setShowInEditView(true)
    TEST_PROPERTY_ASSIGNMENT_3.setShowRawValueInForms(false)

    const TEST_SAMPLE_TYPE_DTO = new openbis.SampleType()
    TEST_SAMPLE_TYPE_DTO.setCode('TEST_TYPE')
    TEST_SAMPLE_TYPE_DTO.setDescription('TEST_DESCRIPTION')
    TEST_SAMPLE_TYPE_DTO.setListable(true)
    TEST_SAMPLE_TYPE_DTO.setSubcodeUnique(true)
    TEST_SAMPLE_TYPE_DTO.setAutoGeneratedCode(true)
    TEST_SAMPLE_TYPE_DTO.setShowContainer(true)
    TEST_SAMPLE_TYPE_DTO.setShowParents(true)
    TEST_SAMPLE_TYPE_DTO.setShowParentMetadata(true)
    TEST_SAMPLE_TYPE_DTO.setGeneratedCodePrefix('TEST_PREFIX')
    TEST_SAMPLE_TYPE_DTO.setValidationPlugin(TEST_PLUGIN_2)
    TEST_SAMPLE_TYPE_DTO.setPropertyAssignments([
      TEST_PROPERTY_ASSIGNMENT_1,
      TEST_PROPERTY_ASSIGNMENT_2,
      TEST_PROPERTY_ASSIGNMENT_3
    ])

    facade.loadType.mockReturnValue(Promise.resolve(TEST_SAMPLE_TYPE_DTO))
    facade.loadUsages.mockReturnValue(
      Promise.resolve({
        type: 10,
        property: {
          [TEST_PROPERTY_TYPE_1_DTO.getCode()]: 1,
          [TEST_PROPERTY_TYPE_2_DTO.getCode()]: 2
        }
      })
    )

    context.setProps({
      object: {
        id: 'TEST_OBJECT_ID',
        type: objectTypes.OBJECT_TYPE
      }
    })

    controller.init(context)
    await controller.load()

    expect(context.getState()).toMatchObject({
      loading: false,
      selection: null,
      type: {
        code: 'TEST_TYPE',
        description: 'TEST_DESCRIPTION',
        listable: true,
        showContainer: true,
        showParents: true,
        showParentMetadata: true,
        autoGeneratedCode: true,
        generatedCodePrefix: 'TEST_PREFIX',
        subcodeUnique: true,
        validationPlugin: 'TEST_PLUGIN_2',
        usages: 10
      },
      properties: [
        {
          id: 'property-0',
          code: 'TEST_PROPERTY_TYPE_1',
          label: 'TEST_LABEL_1',
          description: 'TEST_DESCRIPTION_1',
          dataType: 'INTEGER',
          plugin: 'TEST_PLUGIN_1',
          mandatory: true,
          showInEditView: true,
          showRawValueInForms: true,
          usages: 1,
          section: 'section-0'
        },
        {
          id: 'property-1',
          code: 'TEST_PROPERTY_TYPE_2',
          label: 'TEST_LABEL_2',
          description: 'TEST_DESCRIPTION_2',
          dataType: 'CONTROLLEDVOCABULARY',
          vocabulary: 'TEST_VOCABULARY',
          mandatory: true,
          showInEditView: false,
          showRawValueInForms: true,
          usages: 2,
          section: 'section-1'
        },
        {
          id: 'property-2',
          code: 'TEST_PROPERTY_TYPE_3',
          label: 'TEST_LABEL_3',
          description: 'TEST_DESCRIPTION_3',
          dataType: 'MATERIAL',
          materialType: 'TEST_MATERIAL_TYPE',
          mandatory: false,
          showInEditView: true,
          showRawValueInForms: false,
          usages: 0,
          section: 'section-1'
        }
      ],
      sections: [
        {
          id: 'section-0',
          name: 'TEST_SECTION_1',
          properties: ['property-0']
        },
        {
          id: 'section-1',
          name: 'TEST_SECTION_2',
          properties: ['property-1', 'property-2']
        }
      ]
    })

    expect(facade.loadType).toHaveBeenCalledWith(context.getProps().object)
    expect(facade.loadUsages).toHaveBeenCalledWith(context.getProps().object)
  })

  test('successful new', async () => {
    context.setProps({
      object: {
        id: 'TEST_OBJECT_ID',
        type: objectTypes.NEW_OBJECT_TYPE
      }
    })
    controller.init(context)
    await controller.load()

    expect(context.getState()).toMatchObject({
      loading: false,
      selection: null,
      type: {
        code: null,
        description: null,
        listable: false,
        showContainer: false,
        showParents: false,
        showParentMetadata: false,
        autoGeneratedCode: false,
        generatedCodePrefix: null,
        subcodeUnique: false,
        validationPlugin: null,
        usages: 0
      },
      properties: [],
      sections: []
    })
  })
})
