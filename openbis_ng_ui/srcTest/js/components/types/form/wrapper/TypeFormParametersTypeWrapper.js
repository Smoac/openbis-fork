import CheckboxFieldWrapper from '@srcTest/js/common/wrapper/CheckboxFieldWrapper.js'
import TextFieldWrapper from '@srcTest/js/common/wrapper/TextFieldWrapper.js'
import SelectFieldWrapper from '@srcTest/js/common/wrapper/SelectFieldWrapper.js'
import TypeFormParametersCommonWrapper from './TypeFormParametersCommonWrapper.js'

export default class TypeFormParametersTypeWrapper extends TypeFormParametersCommonWrapper {
  constructor(wrapper) {
    super(wrapper)
  }

  getCode() {
    return new TextFieldWrapper(this.wrapper.find('TextFormField[name="code"]'))
  }

  getDescription() {
    return new TextFieldWrapper(
      this.wrapper.find('TextFormField[name="description"]')
    )
  }

  getValidationPlugin() {
    return new SelectFieldWrapper(
      this.wrapper.find('SelectFormField[name="validationPlugin"]')
    )
  }

  getAutoGeneratedCode() {
    return new CheckboxFieldWrapper(
      this.wrapper.find('CheckboxFormField[name="autoGeneratedCode"]')
    )
  }

  getGeneratedCodePrefix() {
    return new TextFieldWrapper(
      this.wrapper.find('TextFormField[name="generatedCodePrefix"]')
    )
  }

  change(fieldName, fieldValue) {
    this.wrapper.instance().handleChange({
      target: {
        name: fieldName,
        value: fieldValue
      }
    })
    this.wrapper.update()
  }

  toJSON() {
    return {
      ...super.toJSON(),
      code: this.getCode().toJSON(),
      description: this.getDescription().toJSON(),
      validationPlugin: this.getValidationPlugin().toJSON(),
      autoGeneratedCode: this.getAutoGeneratedCode().toJSON(),
      generatedCodePrefix: this.getGeneratedCodePrefix().toJSON()
    }
  }
}
