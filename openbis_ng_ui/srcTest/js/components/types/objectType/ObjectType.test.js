import React from 'react'
import { mount } from 'enzyme'
import ThemeProvider from '../../../../../src/js/components/common/theme/ThemeProvider.jsx'
import ObjectType from '../../../../../src/js/components/types/objectType/ObjectType.jsx'
import { dto } from '../../../../../src/js/services/openbis.js'

jest.mock('../../../../../src/js/services/openbis.js')

beforeEach(() => {
  jest.resetAllMocks()
  dto.DataType.VARCHAR = 'VARCHAR'
  dto.DataType.CONTROLLEDVOCABULARY = 'CONTROLLEDVOCABULARY'
  dto.DataType.MATERIAL = 'MATERIAL'
  dto.DataType.values = [
    dto.DataType.VARCHAR,
    dto.DataType.CONTROLLEDVOCABULARY,
    dto.DataType.MATERIAL
  ]
})

describe('ObjectType', () => {
  test('test', done => {
    const facade = {
      loadType: jest.fn(),
      loadUsages: jest.fn(),
      loadDynamicPlugins: jest.fn(),
      loadValidationPlugins: jest.fn(),
      loadMaterials: jest.fn(),
      loadVocabularyTerms: jest.fn()
    }

    facade.loadType.mockReturnValueOnce(
      Promise.resolve({
        code: 'TYPE_CODE',
        description: 'TYPE_DESCRIPTION',
        listable: true,
        showContainer: true,
        showParents: true,
        showParentMetadata: true,
        autoGeneratedCode: true,
        generatedCodePrefix: 'TYPE_CODE_PREFIX',
        subcodeUnique: true,
        validationPlugin: { name: 'TYPE_VALIDATION_PLUGIN' },
        propertyAssignments: [
          {
            propertyType: {
              code: 'PROPERTY_0_CODE',
              label: 'PROPERTY_0_LABEL',
              description: 'PROPERTY_0_DESCRIPTION',
              dataType: 'VARCHAR',
              schema: null,
              transformation: null
            },
            plugin: { name: 'PROPERTY_0_PLUGIN' },
            mandatory: true,
            section: 'SECTION_0',
            showInEditView: true,
            showRawValueInForms: true
          },
          {
            propertyType: {
              code: 'PROPERTY_1_CODE',
              label: 'PROPERTY_1_LABEL',
              description: 'PROPERTY_1_DESCRIPTION',
              dataType: 'CONTROLLEDVOCABULARY',
              vocabulary: {
                code: 'PROPERTY_1_VOCABULARY_CODE'
              },
              schema: null,
              transformation: null
            },
            plugin: null,
            mandatory: false,
            section: 'SECTION_0',
            showInEditView: false,
            showRawValueInForms: false
          },
          {
            propertyType: {
              code: 'PROPERTY_2_CODE',
              label: 'PROPERTY_2_LABEL',
              description: 'PROPERTY_2_DESCRIPTION',
              dataType: 'MATERIAL',
              materialType: {
                code: 'PROPERTY_2_MATERIAL_TYPE_CODE'
              },
              schema: null,
              transformation: null
            },
            plugin: null,
            mandatory: false,
            section: null,
            showInEditView: false,
            showRawValueInForms: false
          }
        ]
      })
    )
    facade.loadUsages.mockReturnValueOnce(
      Promise.resolve({
        type: 3,
        property: {
          PROPERTY_0_CODE: 2,
          PROPERTY_1_CODE: 1
        }
      })
    )
    facade.loadDynamicPlugins.mockReturnValueOnce(Promise.resolve([]))
    facade.loadValidationPlugins.mockReturnValueOnce(Promise.resolve([]))
    facade.loadMaterials.mockReturnValueOnce(Promise.resolve([]))
    facade.loadVocabularyTerms.mockReturnValueOnce(Promise.resolve([]))

    const wrapper = mount(
      <ThemeProvider>
        <ObjectType objectId='TYPE_CODE' facade={facade} />
      </ThemeProvider>
    )

    setTimeout(() => {
      wrapper.update()

      const objectType = new ObjectTypeWrapper(wrapper)

      expect(objectType.toJSON()).toEqual({
        preview: {
          header: {
            title: 'Form Preview',
            code: {
              label: 'Code',
              value: 'TYPE_CODE_PREFIX'
            },
            container: {
              label: 'Container',
              value: undefined
            },
            parents: {
              label: 'Parents',
              value: undefined
            }
          },
          sections: [
            {
              name: 'SECTION_0',
              properties: [
                {
                  code: 'PROPERTY_0_CODE',
                  label: 'PROPERTY_0_LABEL'
                },
                {
                  code: 'PROPERTY_1_CODE',
                  label: 'PROPERTY_1_LABEL'
                }
              ]
            },
            {
              name: '',
              properties: [
                {
                  code: 'PROPERTY_2_CODE',
                  label: 'PROPERTY_2_LABEL'
                }
              ]
            }
          ]
        },
        parameters: {
          type: {
            title: 'Type',
            code: {
              label: 'Code',
              value: 'TYPE_CODE'
            },
            description: {
              label: 'Description',
              value: 'TYPE_DESCRIPTION'
            }
          },
          property: {
            title: null,
            code: {},
            description: {}
          }
        }
      })

      objectType
        .getPreview()
        .getSections()[0]
        .getProperties()[0]
        .wrapper.simulate('click')

      expect(objectType.toJSON()).toEqual({
        preview: {
          header: {
            title: 'Form Preview',
            code: {
              label: 'Code',
              value: 'TYPE_CODE_PREFIX'
            },
            container: {
              label: 'Container',
              value: undefined
            },
            parents: {
              label: 'Parents',
              value: undefined
            }
          },
          sections: [
            {
              name: 'SECTION_0',
              properties: [
                {
                  code: 'PROPERTY_0_CODE',
                  label: 'PROPERTY_0_LABEL'
                },
                {
                  code: 'PROPERTY_1_CODE',
                  label: 'PROPERTY_1_LABEL'
                }
              ]
            },
            {
              name: '',
              properties: [
                {
                  code: 'PROPERTY_2_CODE',
                  label: 'PROPERTY_2_LABEL'
                }
              ]
            }
          ]
        },
        parameters: {
          type: {
            title: null,
            code: {},
            description: {}
          },
          property: {
            title: 'Property',
            code: {
              label: 'Code',
              value: 'PROPERTY_0_CODE'
            },
            description: {
              label: 'Description',
              value: 'PROPERTY_0_DESCRIPTION'
            }
          }
        }
      })

      done()
    }, 0)
  })
})

class ObjectTypeWrapper {
  constructor(wrapper) {
    this.wrapper = wrapper
  }

  getPreview() {
    return new ObjectTypePreview(this.wrapper.find('ObjectTypePreview'))
  }

  getParameters() {
    return new ObjectTypeParameters(this.wrapper.find('ObjectTypeParameters'))
  }

  toJSON() {
    return {
      preview: this.getPreview().toJSON(),
      parameters: this.getParameters().toJSON()
    }
  }
}

class ObjectTypePreview {
  constructor(wrapper) {
    this.wrapper = wrapper
  }

  getHeader() {
    return new ObjectTypePreviewHeader(
      this.wrapper.find('ObjectTypePreviewHeader')
    )
  }

  getSections() {
    const sections = []
    this.wrapper.find('ObjectTypePreviewSection').forEach(sectionWrapper => {
      sections.push(new ObjectTypePreviewSection(sectionWrapper))
    })
    return sections
  }

  toJSON() {
    return {
      header: this.getHeader().toJSON(),
      sections: this.getSections().map(section => section.toJSON())
    }
  }
}

class ObjectTypeParameters {
  constructor(wrapper) {
    this.wrapper = wrapper
  }

  getType() {
    return new ObjectTypeParametersForm(
      this.wrapper.find('ObjectTypeParametersType')
    )
  }

  getProperty() {
    return new ObjectTypeParametersForm(
      this.wrapper.find('ObjectTypeParametersProperty')
    )
  }

  toJSON() {
    return {
      type: this.getType().toJSON(),
      property: this.getProperty().toJSON()
    }
  }
}

class ObjectTypeParametersForm {
  constructor(wrapper) {
    this.wrapper = wrapper
  }

  getTitle() {
    return this.wrapper.find('ObjectTypeHeader')
  }

  getCode() {
    return new TextFormField(this.wrapper.find('TextFormField[name="code"]'))
  }

  getDescription() {
    return new TextFormField(
      this.wrapper.find('TextFormField[name="description"]')
    )
  }

  toJSON() {
    return {
      title: this.getTitle().exists() ? this.getTitle().text() : null,
      code: this.getCode().toJSON(),
      description: this.getDescription().toJSON()
    }
  }
}

class ObjectTypePreviewHeader {
  constructor(wrapper) {
    this.wrapper = wrapper
  }

  getTitle() {
    return this.wrapper.find('ObjectTypeHeader')
  }

  getCode() {
    return new TextFormField(this.wrapper.find('TextFormField[name="code"]'))
  }

  getParents() {
    return new TextFormField(this.wrapper.find('TextFormField[name="parents"]'))
  }

  getContainer() {
    return new TextFormField(
      this.wrapper.find('TextFormField[name="container"]')
    )
  }

  toJSON() {
    return {
      title: this.getTitle().text(),
      code: this.getCode().toJSON(),
      parents: this.getParents().toJSON(),
      container: this.getContainer().toJSON()
    }
  }
}

class ObjectTypePreviewSection {
  constructor(wrapper) {
    this.wrapper = wrapper
  }

  getName() {
    return this.wrapper.find('ObjectTypeHeader')
  }

  getProperties() {
    const properties = []
    this.wrapper.find('ObjectTypePreviewProperty').forEach(propertyWrapper => {
      properties.push(new ObjectTypePreviewProperty(propertyWrapper))
    })
    return properties
  }

  toJSON() {
    return {
      name: this.getName().text(),
      properties: this.getProperties().map(property => property.toJSON())
    }
  }
}

class ObjectTypePreviewProperty {
  constructor(wrapper) {
    this.wrapper = wrapper
  }

  getCode() {
    return this.wrapper.find('span[data-part="code"]')
  }

  getLabel() {
    return this.wrapper.find('span[data-part="label"]')
  }

  toJSON() {
    return {
      code: this.getCode().text(),
      label: this.getLabel().text()
    }
  }
}

class TextFormField {
  constructor(wrapper) {
    this.wrapper = wrapper
  }

  getLabel() {
    return this.wrapper.prop('label')
  }

  getValue() {
    return this.wrapper.prop('value')
  }

  toJSON() {
    if (this.wrapper.exists()) {
      return {
        label: this.getLabel(),
        value: this.getValue()
      }
    } else {
      return {}
    }
  }
}
