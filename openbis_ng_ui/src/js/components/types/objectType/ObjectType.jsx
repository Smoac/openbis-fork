import _ from 'lodash'
import React from 'react'
import { withStyles } from '@material-ui/core/styles'
import ObjectTypePreview from './ObjectTypePreview.jsx'
import ObjectTypeParameters from './ObjectTypeParameters.jsx'
import ObjectTypeButtons from './ObjectTypeButtons.jsx'
import logger from '../../../common/logger.js'
import { facade, dto } from '../../../services/openbis.js'

const styles = theme => ({
  container: {
    height: '100%',
    display: 'flex',
    flexDirection: 'row'
  },
  content: {
    display: 'flex',
    flexDirection: 'column',
    height: '100%',
    flex: '1 1 auto'
  },
  preview: {
    height: '100%',
    flex: '1 1 auto',
    overflow: 'auto'
  },
  buttons: {
    flex: '0 0 auto'
  },
  parameters: {
    backgroundColor: theme.palette.action.selected,
    height: '100%',
    overflow: 'auto',
    flex: '0 0 auto'
  }
})

class ObjectType extends React.PureComponent {
  constructor(props) {
    super(props)
    this.state = {
      loaded: false
    }
    this.handleOrderChange = this.handleOrderChange.bind(this)
    this.handleSelectionChange = this.handleSelectionChange.bind(this)
    this.handleChange = this.handleChange.bind(this)
  }

  componentDidMount() {
    this.load()
  }

  load() {
    this.setState({
      loaded: false
    })

    this.loadType(this.props.objectId).then(loadedType => {
      const type = {
        code: loadedType.code,
        autoGeneratedCode: loadedType.autoGeneratedCode,
        generatedCodePrefix: loadedType.generatedCodePrefix,
        subcodeUnique: loadedType.subcodeUnique
      }

      const sections = []
      const properties = []
      let currentSection = null
      let currentProperty = null

      loadedType.propertyAssignments.forEach((assignment, index) => {
        currentProperty = {
          id: 'property-' + index,
          code: assignment.propertyType.code,
          label: assignment.propertyType.label,
          description: assignment.propertyType.description,
          dataType: assignment.propertyType.dataType,
          vocabulary: assignment.propertyType.vocabulary
            ? assignment.propertyType.vocabulary.code
            : null,
          materialType: assignment.propertyType.materialType
            ? assignment.propertyType.materialType.code
            : null,
          visible: assignment.showInEditView,
          mandatory: assignment.mandatory
        }

        if (assignment.section) {
          if (currentSection && currentSection.name === assignment.section) {
            currentSection.properties.push(currentProperty.id)
          } else {
            currentSection = {
              id: 'section-' + sections.length,
              name: assignment.section,
              properties: [currentProperty.id]
            }
            sections.push(currentSection)
          }
          currentProperty.section = currentSection.id
        } else {
          currentSection = null
        }

        properties.push(currentProperty)
      })

      this.setState(() => ({
        loaded: true,
        type,
        properties,
        sections,
        selection: null
      }))
    })
  }

  loadType(typeId) {
    let id = new dto.EntityTypePermId(typeId)
    let fo = new dto.SampleTypeFetchOptions()
    fo.withPropertyAssignments()
      .withPropertyType()
      .withMaterialType()
    fo.withPropertyAssignments()
      .withPropertyType()
      .withVocabulary()
    fo.withPropertyAssignments()
      .sortBy()
      .ordinal()

    return facade.getSampleTypes([id], fo).then(map => {
      return map[typeId]
    })
  }

  handleOrderChange(type, params) {
    if (type === 'section') {
      let { fromIndex, toIndex } = params
      this.handleOrderChangeSection(fromIndex, toIndex)
    } else if (type === 'property') {
      let { fromSectionId, toSectionId, fromIndex, toIndex } = params
      this.handleOrderChangeProperty(
        fromSectionId,
        fromIndex,
        toSectionId,
        toIndex
      )
    }
  }

  handleOrderChangeSection(fromIndex, toIndex) {
    let newSections = Array.from(this.state.sections)
    let [section] = newSections.splice(fromIndex, 1)
    newSections.splice(toIndex, 0, section)
    this.setState(state => ({
      ...state,
      sections: newSections
    }))
  }

  handleOrderChangeProperty(fromSectionId, fromIndex, toSectionId, toIndex) {
    if (fromSectionId === toSectionId) {
      let sections = this.state.sections
      let sectionIndex = _.findIndex(sections, ['id', fromSectionId])
      let section = sections[sectionIndex]
      let newProperties = Array.from(section.properties)
      let [property] = newProperties.splice(fromIndex, 1)
      newProperties.splice(toIndex, 0, property)
      let newSection = {
        ...section,
        properties: newProperties
      }
      let newSections = Array.from(sections)
      newSections[sectionIndex] = newSection
      this.setState(state => ({
        ...state,
        sections: newSections
      }))
    } else {
      let sections = this.state.sections
      let newSections = Array.from(sections)

      let fromSectionIndex = _.findIndex(sections, ['id', fromSectionId])
      let toSectionIndex = _.findIndex(sections, ['id', toSectionId])
      let fromSection = sections[fromSectionIndex]
      let toSection = sections[toSectionIndex]

      let newFromSection = {
        ...fromSection,
        properties: Array.from(fromSection.properties)
      }
      let newToSection = {
        ...toSection,
        properties: Array.from(toSection.properties)
      }

      let [property] = newFromSection.properties.splice(fromIndex, 1)
      newToSection.properties.splice(toIndex, 0, property)

      newSections[fromSectionIndex] = newFromSection
      newSections[toSectionIndex] = newToSection

      let properties = this.state.properties
      let newProperties = Array.from(properties)

      let propertyIndex = _.findIndex(properties, ['id', property])
      let propertyObj = properties[propertyIndex]
      let newPropertyObj = {
        ...propertyObj,
        section: newToSection.id
      }
      newProperties[propertyIndex] = newPropertyObj

      this.setState(state => ({
        ...state,
        sections: newSections,
        properties: newProperties
      }))
    }
  }

  handleSelectionChange(type, params) {
    let selection = null

    if (type && params) {
      selection = {
        type,
        params
      }
    }

    this.setState(state => ({
      ...state,
      selection
    }))
  }

  handleChange(type, params) {
    if (type === 'type') {
      const { field, value } = params
      this.handleChangeType(field, value)
    } else if (type === 'section') {
      const { id, field, value } = params
      this.handleChangeSection(id, field, value)
    } else if (type === 'property') {
      const { id, field, value } = params
      this.handleChangeProperty(id, field, value)
    }
  }

  handleChangeType(field, value) {
    this.setState(state => ({
      ...state,
      type: {
        ...state.type,
        [field]: value
      }
    }))
  }

  handleChangeSection(id, field, value) {
    let sections = this.state.sections
    let newSections = Array.from(sections)

    let index = sections.findIndex(section => section.id === id)
    let section = sections[index]
    let newSection = {
      ...section,
      [field]: value
    }
    newSections[index] = newSection

    this.setState(state => ({
      ...state,
      sections: newSections
    }))
  }

  handleChangeProperty(id, field, value) {
    let properties = this.state.properties
    let newProperties = Array.from(properties)

    let index = properties.findIndex(property => property.id === id)
    let property = properties[index]
    let newProperty = {
      ...property,
      [field]: value
    }
    newProperties[index] = newProperty

    this.setState(state => ({
      ...state,
      properties: newProperties
    }))
  }

  render() {
    logger.log(logger.DEBUG, 'ObjectType.render')

    if (!this.state.loaded) {
      return <div></div>
    }

    let { type, properties, sections, selection } = this.state
    let { classes } = this.props

    return (
      <div className={classes.container}>
        <div className={classes.content}>
          <div className={classes.preview}>
            <ObjectTypePreview
              type={type}
              properties={properties}
              sections={sections}
              selection={selection}
              onOrderChange={this.handleOrderChange}
              onSelectionChange={this.handleSelectionChange}
            />
          </div>
          <div className={classes.buttons}>
            <ObjectTypeButtons />
          </div>
        </div>
        <div className={classes.parameters}>
          <ObjectTypeParameters
            type={type}
            properties={properties}
            sections={sections}
            selection={selection}
            onChange={this.handleChange}
          />
        </div>
      </div>
    )
  }
}

export default _.flow(withStyles(styles))(ObjectType)
