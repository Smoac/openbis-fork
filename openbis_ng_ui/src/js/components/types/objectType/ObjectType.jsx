import _ from 'lodash'
import React from 'react'
import { withStyles } from '@material-ui/core/styles'
import { Resizable } from 're-resizable'

import ObjectTypeFacade from './ObjectTypeFacade.js'
import ObjectTypeHandlerSave from './ObjectTypeHandlerSave.js'
import ObjectTypeHandlerRemove from './ObjectTypeHandlerRemove.js'
import ObjectTypeHandlerAddSection from './ObjectTypeHandlerAddSection.js'
import ObjectTypeHandlerAddProperty from './ObjectTypeHandlerAddProperty.js'
import ObjectTypeHandlerChange from './ObjectTypeHandlerChange.js'
import ObjectTypeHandlerOrderChange from './ObjectTypeHandlerOrderChange.js'
import ObjectTypeHandlerSelectionChange from './ObjectTypeHandlerSelectionChange.js'

import ObjectTypeButtons from './ObjectTypeButtons.jsx'
import ObjectTypeParameters from './ObjectTypeParameters.jsx'
import ObjectTypePreview from './ObjectTypePreview.jsx'

import logger from '../../../common/logger.js'

const styles = theme => ({
  container: {
    height: '100%',
    display: 'flex',
    flexDirection: 'row'
  },
  content: {
    display: 'flex',
    flexDirection: 'column',
    height: '100%',
    flex: '1 1 auto'
  },
  preview: {
    height: '100%',
    flex: '1 1 auto',
    display: 'flex',
    flexDirection: 'column',
    overflow: 'auto'
  },
  buttons: {
    flex: '0 0 auto'
  },
  parameters: {
    backgroundColor: theme.palette.action.selected,
    height: '100%',
    overflow: 'auto',
    flex: '0 0 auto'
  }
})

class ObjectType extends React.PureComponent {
  constructor(props) {
    super(props)
    this.facade = new ObjectTypeFacade()
    this.state = {
      loaded: false
    }
    this.handleOrderChange = this.handleOrderChange.bind(this)
    this.handleSelectionChange = this.handleSelectionChange.bind(this)
    this.handleChange = this.handleChange.bind(this)
    this.handleAddSection = this.handleAddSection.bind(this)
    this.handleAddProperty = this.handleAddProperty.bind(this)
    this.handleRemove = this.handleRemove.bind(this)
    this.handleSave = this.handleSave.bind(this)
  }

  componentDidMount() {
    this.load()
  }

  load() {
    this.setState({
      loaded: false
    })

    Promise.all([
      this.facade.loadType(this.props.objectId),
      this.facade.loadTypeLatestEntity(this.props.objectId)
    ]).then(([loadedType, latestEntity]) => {
      const type = {
        code: loadedType.code,
        description: loadedType.description,
        autoGeneratedCode: loadedType.autoGeneratedCode,
        generatedCodePrefix: loadedType.generatedCodePrefix,
        subcodeUnique: loadedType.subcodeUnique,
        exists: true,
        entitiesExist: latestEntity !== null
      }

      const sections = []
      const properties = []
      let currentSection = null
      let currentProperty = null
      let sectionsCounter = 0
      let propertiesCounter = 0

      loadedType.propertyAssignments.forEach(assignment => {
        currentProperty = {
          id: 'property-' + propertiesCounter++,
          code: assignment.propertyType.code,
          label: assignment.propertyType.label,
          description: assignment.propertyType.description,
          dataType: assignment.propertyType.dataType,
          pluginId: assignment.plugin ? assignment.plugin.name : null,
          vocabulary: assignment.propertyType.vocabulary
            ? assignment.propertyType.vocabulary.code
            : null,
          materialType: assignment.propertyType.materialType
            ? assignment.propertyType.materialType.code
            : null,
          mandatory: assignment.mandatory,
          showInEditView: assignment.showInEditView,
          showRawValueInForms: assignment.showRawValueInForms,
          initialValueForExistingEntities:
            assignment.initialValueForExistingEntities,
          exists: true
        }

        if (currentSection && currentSection.name === assignment.section) {
          currentSection.properties.push(currentProperty.id)
        } else {
          currentSection = {
            id: 'section-' + sectionsCounter++,
            name: assignment.section,
            properties: [currentProperty.id]
          }
          sections.push(currentSection)
        }
        currentProperty.section = currentSection.id

        properties.push(currentProperty)
      })

      this.setState(() => ({
        loaded: true,
        type,
        properties,
        propertiesCounter,
        sections,
        sectionsCounter,
        selection: null
      }))
    })
  }

  handleOrderChange(type, params) {
    new ObjectTypeHandlerOrderChange(
      this.state,
      this.setState.bind(this)
    ).execute(type, params)
  }

  handleSelectionChange(type, params) {
    new ObjectTypeHandlerSelectionChange(
      this.state,
      this.setState.bind(this)
    ).execute(type, params)
  }

  handleChange(type, params) {
    new ObjectTypeHandlerChange(this.state, this.setState.bind(this)).execute(
      type,
      params
    )
  }

  handleAddSection() {
    new ObjectTypeHandlerAddSection(
      this.state,
      this.setState.bind(this)
    ).execute()
  }

  handleAddProperty() {
    new ObjectTypeHandlerAddProperty(
      this.state,
      this.setState.bind(this)
    ).execute()
  }

  handleRemove() {
    new ObjectTypeHandlerRemove(this.state, this.setState.bind(this)).execute()
  }

  handleSave() {
    new ObjectTypeHandlerSave(this.state).execute().then(
      () => {
        this.load()
      },
      error => {
        alert(JSON.stringify(error))
      }
    )
  }

  render() {
    logger.log(logger.DEBUG, 'ObjectType.render')

    if (!this.state.loaded) {
      return <div></div>
    }

    let { type, properties, sections, selection } = this.state
    let { classes } = this.props

    return (
      <div className={classes.container}>
        <div className={classes.content}>
          <div className={classes.preview}>
            <ObjectTypePreview
              type={type}
              properties={properties}
              sections={sections}
              selection={selection}
              onOrderChange={this.handleOrderChange}
              onSelectionChange={this.handleSelectionChange}
            />
          </div>
          <div className={classes.buttons}>
            <ObjectTypeButtons
              onAddSection={this.handleAddSection}
              onAddProperty={this.handleAddProperty}
              onRemove={this.handleRemove}
              onSave={this.handleSave}
              addSectionEnabled={true}
              addPropertyEnabled={selection !== null}
              removeEnabled={selection !== null}
              saveEnabled={true}
            />
          </div>
        </div>
        <Resizable
          defaultSize={{
            width: 400,
            height: 'auto'
          }}
          enable={{
            left: true,
            top: false,
            right: false,
            bottom: false,
            topRight: false,
            bottomRight: false,
            bottomLeft: false,
            topLeft: false
          }}
        >
          <div className={classes.parameters}>
            <ObjectTypeParameters
              type={type}
              properties={properties}
              sections={sections}
              selection={selection}
              onChange={this.handleChange}
              onSelectionChange={this.handleSelectionChange}
            />
          </div>
        </Resizable>
      </div>
    )
  }
}

export default _.flow(withStyles(styles))(ObjectType)
