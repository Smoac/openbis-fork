import _ from 'lodash'
import React from 'react'
import { withStyles } from '@material-ui/core/styles'
import Typography from '@material-ui/core/Typography'
import FormControlLabel from '@material-ui/core/FormControlLabel'
import TextField from '@material-ui/core/TextField'
import Checkbox from '@material-ui/core/Checkbox'
import logger from '../../../common/logger.js'

const styles = theme => ({
  container: {
    padding: theme.spacing(2)
  }
})

class ObjectTypeParametersType extends React.PureComponent {
  constructor(props) {
    super(props)
    this.handleChange = this.handleChange.bind(this)
  }

  handleChange(event) {
    let params = null

    if (_.has(event.target, 'checked')) {
      params = {
        field: event.target.value,
        value: event.target.checked
      }
    } else {
      params = {
        field: event.target.name,
        value: event.target.value
      }
    }

    this.props.onChange('type', params)
  }

  render() {
    logger.log(logger.DEBUG, 'ObjectTypeParametersType.render')

    let { classes, type, selection } = this.props

    if (
      selection &&
      (selection.type === 'section' || selection.type === 'property')
    ) {
      return null
    }

    return (
      <div className={classes.container}>
        <Typography variant='h6'>Type</Typography>
        <form>
          <div>
            <TextField
              label='Code'
              name='code'
              value={type.code}
              fullWidth={true}
              margin='normal'
              variant='filled'
              InputLabelProps={{
                shrink: true
              }}
              onChange={this.handleChange}
            />
          </div>
          <div>
            <TextField
              label='Description'
              name='description'
              value={type.description}
              fullWidth={true}
              margin='normal'
              variant='filled'
              multiline={true}
              InputLabelProps={{
                shrink: true
              }}
              onChange={this.handleChange}
            />
          </div>
          <div>
            <FormControlLabel
              control={
                <Checkbox
                  value='autoGeneratedCode'
                  checked={type.autoGeneratedCode}
                  onChange={this.handleChange}
                />
              }
              label='Generate codes automatically'
            />
          </div>
          {type.autoGeneratedCode && (
            <div>
              <TextField
                label='Generated code prefix'
                name='generatedCodePrefix'
                value={type.generatedCodePrefix}
                fullWidth={true}
                margin='normal'
                variant='filled'
                InputLabelProps={{
                  shrink: true
                }}
                onChange={this.handleChange}
              />
            </div>
          )}
          <div>
            <FormControlLabel
              control={
                <Checkbox
                  value='subcodeUnique'
                  checked={type.subcodeUnique}
                  onChange={this.handleChange}
                />
              }
              label='Unique subcodes'
            />
          </div>
        </form>
      </div>
    )
  }
}

export default withStyles(styles)(ObjectTypeParametersType)
