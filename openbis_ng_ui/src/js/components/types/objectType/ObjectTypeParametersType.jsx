import React from 'react'
import { withStyles } from '@material-ui/core/styles'
import Typography from '@material-ui/core/Typography'
import CheckboxField from '../../common/form/CheckboxField.jsx'
import TextField from '../../common/form/TextField.jsx'
import logger from '../../../common/logger.js'

const styles = theme => ({
  container: {
    padding: theme.spacing(2)
  },
  header: {
    paddingBottom: theme.spacing(2)
  },
  field: {
    paddingBottom: theme.spacing(2)
  }
})

class ObjectTypeParametersType extends React.PureComponent {
  constructor(props) {
    super(props)
    this.references = {
      code: React.createRef(),
      description: React.createRef(),
      generatedCodePrefix: React.createRef(),
      autoGeneratedCode: React.createRef(),
      subcodeUnique: React.createRef()
    }
    this.handleChange = this.handleChange.bind(this)
    this.handleFocus = this.handleFocus.bind(this)
  }

  componentDidMount() {
    this.focus()
  }

  componentDidUpdate(prevProps) {
    const prevSelection = prevProps.selection
    const selection = this.props.selection

    if (prevSelection !== selection) {
      this.focus()
    }
  }

  focus() {
    const type = this.getType(this.props)
    if (type && this.props.selection) {
      const { part } = this.props.selection.params
      if (part) {
        const reference = this.references[part]
        if (reference) {
          reference.current.focus()
        }
      }
    }
  }

  handleChange(event) {
    let params = {
      field: event.target.name,
      value: event.target.value
    }
    this.props.onChange('type', params)
  }

  handleFocus(event) {
    const params = {
      part: event.target.name
    }

    this.props.onSelectionChange('type', params)
  }

  render() {
    logger.log(logger.DEBUG, 'ObjectTypeParametersType.render')

    const type = this.getType(this.props)
    if (!type) {
      return null
    }

    let { classes } = this.props

    return (
      <div className={classes.container}>
        <Typography variant='h6' className={classes.header}>
          Type
        </Typography>
        <div className={classes.field}>
          <TextField
            reference={this.references.code}
            label='Code'
            name='code'
            mandatory={true}
            error={type.errors.code}
            disabled={type.used}
            value={type.code || ''}
            onChange={this.handleChange}
            onFocus={this.handleFocus}
          />
        </div>
        <div className={classes.field}>
          <TextField
            reference={this.references.description}
            label='Description'
            name='description'
            value={type.description || ''}
            onChange={this.handleChange}
            onFocus={this.handleFocus}
          />
        </div>
        <div className={classes.field}>
          <TextField
            reference={this.references.generatedCodePrefix}
            label='Generated code prefix'
            name='generatedCodePrefix'
            mandatory={true}
            error={type.errors.generatedCodePrefix}
            value={type.generatedCodePrefix || ''}
            onChange={this.handleChange}
            onFocus={this.handleFocus}
          />
        </div>
        <div className={classes.field}>
          <CheckboxField
            reference={this.references.autoGeneratedCode}
            label='Generate codes automatically'
            name='autoGeneratedCode'
            value={type.autoGeneratedCode}
            onChange={this.handleChange}
            onFocus={this.handleFocus}
          />
        </div>
        <div className={classes.field}>
          <CheckboxField
            reference={this.references.subcodeUnique}
            label='Unique subcodes'
            name='subcodeUnique'
            value={type.subcodeUnique}
            onChange={this.handleChange}
            onFocus={this.handleFocus}
          />
        </div>
      </div>
    )
  }

  getType(props) {
    let { type, selection } = props

    if (!selection || selection.type === 'type') {
      return type
    } else {
      return null
    }
  }
}

export default withStyles(styles)(ObjectTypeParametersType)
