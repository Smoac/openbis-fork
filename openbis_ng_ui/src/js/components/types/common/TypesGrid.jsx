import React from 'react'
import Grid from '@src/js/components/common/grid/Grid.jsx'
import TypeLink from '@src/js/components/common/link/TypeLink.jsx'
import PluginLink from '@src/js/components/common/link/PluginLink.jsx'
import openbis from '@src/js/services/openbis.js'
import logger from '@src/js/common/logger.js'

class TypesGrid extends React.PureComponent {
  render() {
    logger.log(logger.DEBUG, 'TypesGrid.render')

    const {
      id,
      rows,
      selectedRowId,
      onSelectedRowChange,
      controllerRef
    } = this.props

    return (
      <Grid
        id={id}
        controllerRef={controllerRef}
        header={this.getHeader()}
        columns={this.getColumns()}
        rows={rows}
        selectedRowId={selectedRowId}
        onSelectedRowChange={onSelectedRowChange}
      />
    )
  }

  getHeader() {
    const { kind } = this.props

    if (kind === openbis.EntityKind.EXPERIMENT) {
      return 'Collection Types'
    } else if (kind === openbis.EntityKind.SAMPLE) {
      return 'Object Types'
    } else if (kind === openbis.EntityKind.DATA_SET) {
      return 'Data Set Types'
    } else if (kind === openbis.EntityKind.MATERIAL) {
      return 'Material Types'
    }
  }

  getColumns() {
    const { kind } = this.props
    const columns = []

    columns.push({
      name: 'code',
      label: 'Code',
      sort: 'asc',
      getValue: ({ row }) => row.code,
      renderValue: ({ row }) => {
        return <TypeLink typeCode={row.code} typeKind={kind} />
      }
    })

    columns.push({
      name: 'description',
      label: 'Description',
      getValue: ({ row }) => row.description
    })

    columns.push({
      name: 'validationPlugin',
      label: 'Validation Plugin',
      getValue: ({ row }) => row.validationPlugin,
      renderValue: ({ value }) => {
        return (
          <PluginLink
            pluginName={value}
            pluginType={openbis.PluginType.ENTITY_VALIDATION}
          />
        )
      }
    })

    if (kind === openbis.EntityKind.SAMPLE) {
      columns.push({
        name: 'generatedCodePrefix',
        label: 'Generated code prefix',
        getValue: ({ row }) => row.generatedCodePrefix
      })

      columns.push({
        name: 'autoGeneratedCode',
        label: 'Generate Codes',
        getValue: ({ row }) => row.autoGeneratedCode
      })

      columns.push({
        name: 'subcodeUnique',
        label: 'Unique Subcodes',
        getValue: ({ row }) => row.subcodeUnique
      })

      columns.push({
        name: 'showParents',
        label: 'Show Parents',
        getValue: ({ row }) => row.showParents
      })

      columns.push({
        name: 'showContainer',
        label: 'Show Container',
        getValue: ({ row }) => row.showContainer
      })

      columns.push({
        name: 'showParentMetadata',
        label: 'Show Parent Metadata',
        getValue: ({ row }) => row.showParentMetadata
      })

      columns.push({
        name: 'listable',
        label: 'Listable',
        getValue: ({ row }) => row.listable
      })
    }

    if (kind === openbis.EntityKind.DATA_SET) {
      columns.push({
        name: 'mainDataSetPattern',
        label: 'Main Data Set Pattern',
        getValue: ({ row }) => row.mainDataSetPattern
      })

      columns.push({
        name: 'mainDataSetPath',
        label: 'Main Data Set Path',
        getValue: ({ row }) => row.mainDataSetPath
      })

      columns.push({
        name: 'disallowDeletion',
        label: 'Disallow Deletion',
        getValue: ({ row }) => row.disallowDeletion
      })
    }

    return columns
  }
}

export default TypesGrid
