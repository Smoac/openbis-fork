import React from 'react'
import { withStyles } from '@material-ui/core/styles'
import CheckboxField from '@src/js/components/common/form/CheckboxField.jsx'
import TextField from '@src/js/components/common/form/TextField.jsx'
import SelectField from '@src/js/components/common/form/SelectField.jsx'
import logger from '@src/js/common/logger.js'

import TypeFormWarningUsage from './TypeFormWarningUsage.jsx'
import TypeFormHeader from './TypeFormHeader.jsx'

const styles = theme => ({
  container: {
    padding: theme.spacing(2)
  },
  header: {
    paddingBottom: theme.spacing(2)
  },
  field: {
    paddingBottom: theme.spacing(2)
  }
})

class TypeFormParametersType extends React.PureComponent {
  constructor(props) {
    super(props)
    this.state = {}
    this.references = {
      code: React.createRef(),
      description: React.createRef(),
      validationPlugin: React.createRef(),
      listable: React.createRef(),
      showContainer: React.createRef(),
      showParents: React.createRef(),
      showParentMetadata: React.createRef(),
      generatedCodePrefix: React.createRef(),
      autoGeneratedCode: React.createRef(),
      subcodeUnique: React.createRef()
    }
    this.handleChange = this.handleChange.bind(this)
    this.handleFocus = this.handleFocus.bind(this)
    this.handleBlur = this.handleBlur.bind(this)
  }

  componentDidMount() {
    this.load()
    this.focus()
  }

  componentDidUpdate(prevProps) {
    const prevSelection = prevProps.selection
    const selection = this.props.selection

    if (prevSelection !== selection) {
      this.focus()
    }
  }

  load() {
    const type = this.getType(this.props)

    if (type) {
      this.loadValidationPlugins()
    }
  }

  loadValidationPlugins() {
    const { controller } = this.props
    return controller
      .getFacade()
      .loadValidationPlugins()
      .then(result => {
        this.setState(() => ({
          validationPlugins: result.objects
        }))
      })
      .catch(error => {
        controller.getFacade().catch(error)
      })
  }

  focus() {
    const type = this.getType(this.props)
    if (type && this.props.selection) {
      const { part } = this.props.selection.params
      if (part) {
        const reference = this.references[part]
        if (reference) {
          reference.current.focus()
        }
      }
    }
  }

  params(event) {
    return {
      field: event.target.name,
      part: event.target.name,
      value: event.target.value
    }
  }

  handleChange(event) {
    this.props.onChange('type', this.params(event))
  }

  handleFocus(event) {
    this.props.onSelectionChange('type', this.params(event))
  }

  handleBlur(event) {
    this.props.onBlur('type', this.params(event))
  }

  render() {
    logger.log(logger.DEBUG, 'TypeFormParametersType.render')

    const type = this.getType(this.props)
    if (!type) {
      return null
    }

    const { classes } = this.props

    return (
      <div className={classes.container}>
        <TypeFormHeader className={classes.header}>Type</TypeFormHeader>
        {this.renderWarning(type)}
        {this.renderCode(type)}
        {this.renderDescription(type)}
        {this.renderValidationPlugin(type)}
        {this.renderGeneratedCodePrefix(type)}
        {this.renderAutoGeneratedCode(type)}
        {this.renderSubcodeUnique(type)}
        {this.renderShowParents(type)}
        {this.renderShowContainer(type)}
        {this.renderShowParentMetadata(type)}
        {this.renderListable(type)}
      </div>
    )
  }

  renderWarning(type) {
    if (type.usages > 0) {
      const { classes } = this.props
      return (
        <div className={classes.field}>
          <TypeFormWarningUsage subject='type' usages={type.usages} />
        </div>
      )
    } else {
      return null
    }
  }

  renderCode(type) {
    const { classes } = this.props
    return (
      <div className={classes.field}>
        <TextField
          reference={this.references.code}
          label='Code'
          name='code'
          mandatory={true}
          error={type.errors.code}
          disabled={!!type.original}
          value={type.code}
          onChange={this.handleChange}
          onFocus={this.handleFocus}
          onBlur={this.handleBlur}
        />
      </div>
    )
  }

  renderDescription(type) {
    const { classes } = this.props
    return (
      <div className={classes.field}>
        <TextField
          reference={this.references.description}
          label='Description'
          name='description'
          error={type.errors.description}
          value={type.description}
          onChange={this.handleChange}
          onFocus={this.handleFocus}
          onBlur={this.handleBlur}
        />
      </div>
    )
  }

  renderValidationPlugin(type) {
    const { classes } = this.props
    const { validationPlugins = [] } = this.state

    let options = []

    if (validationPlugins.length > 0) {
      options = validationPlugins.map(validationPlugin => {
        return {
          label: validationPlugin.name,
          value: validationPlugin.name
        }
      })
      options.unshift({})
    }

    return (
      <div className={classes.field}>
        <SelectField
          reference={this.references.validationPlugin}
          label='Validation Plugin'
          name='validationPlugin'
          error={type.errors.validationPlugin}
          value={type.validationPlugin}
          options={options}
          onChange={this.handleChange}
          onFocus={this.handleFocus}
          onBlur={this.handleBlur}
        />
      </div>
    )
  }

  renderListable(type) {
    const { classes } = this.props
    return (
      <div className={classes.field}>
        <CheckboxField
          reference={this.references.listable}
          label='Listable'
          name='listable'
          error={type.errors.listable}
          value={type.listable}
          onChange={this.handleChange}
          onFocus={this.handleFocus}
          onBlur={this.handleBlur}
        />
      </div>
    )
  }

  renderShowContainer(type) {
    const { classes } = this.props
    return (
      <div className={classes.field}>
        <CheckboxField
          reference={this.references.showContainer}
          label='Show Container'
          name='showContainer'
          error={type.errors.showContainer}
          value={type.showContainer}
          onChange={this.handleChange}
          onFocus={this.handleFocus}
          onBlur={this.handleBlur}
        />
      </div>
    )
  }

  renderShowParents(type) {
    const { classes } = this.props
    return (
      <div className={classes.field}>
        <CheckboxField
          reference={this.references.showParents}
          label='Show Parents'
          name='showParents'
          error={type.errors.showParents}
          value={type.showParents}
          onChange={this.handleChange}
          onFocus={this.handleFocus}
          onBlur={this.handleBlur}
        />
      </div>
    )
  }

  renderShowParentMetadata(type) {
    const { classes } = this.props
    return (
      <div className={classes.field}>
        <CheckboxField
          reference={this.references.showParentMetadata}
          label='Show Parent Metadata'
          name='showParentMetadata'
          error={type.errors.showParentMetadata}
          value={type.showParentMetadata}
          onChange={this.handleChange}
          onFocus={this.handleFocus}
          onBlur={this.handleBlur}
        />
      </div>
    )
  }

  renderGeneratedCodePrefix(type) {
    const { classes } = this.props
    return (
      <div className={classes.field}>
        <TextField
          reference={this.references.generatedCodePrefix}
          label='Generated code prefix'
          name='generatedCodePrefix'
          mandatory={true}
          error={type.errors.generatedCodePrefix}
          value={type.generatedCodePrefix}
          onChange={this.handleChange}
          onFocus={this.handleFocus}
          onBlur={this.handleBlur}
        />
      </div>
    )
  }

  renderAutoGeneratedCode(type) {
    const { classes } = this.props
    return (
      <div className={classes.field}>
        <CheckboxField
          reference={this.references.autoGeneratedCode}
          label='Generate codes'
          name='autoGeneratedCode'
          error={type.errors.autoGeneratedCode}
          value={type.autoGeneratedCode}
          onChange={this.handleChange}
          onFocus={this.handleFocus}
          onBlur={this.handleBlur}
        />
      </div>
    )
  }

  renderSubcodeUnique(type) {
    const { classes } = this.props
    return (
      <div className={classes.field}>
        <CheckboxField
          reference={this.references.subcodeUnique}
          label='Unique subcodes'
          name='subcodeUnique'
          error={type.errors.subcodeUnique}
          value={type.subcodeUnique}
          onChange={this.handleChange}
          onFocus={this.handleFocus}
          onBlur={this.handleBlur}
        />
      </div>
    )
  }

  getType(props) {
    let { type, selection } = props

    if (!selection || selection.type === 'type') {
      return type
    } else {
      return null
    }
  }
}

export default withStyles(styles)(TypeFormParametersType)
