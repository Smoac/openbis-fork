apply plugin: 'java'
apply plugin: 'project-report'

evaluationDependsOnChildren()

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
    distributionUrl = "http://svncisd.ethz.ch/repos/cisd/ivy-repository/trunk/gradle/distribution/1.8/gradle-1.8-all.zip"
}

sourceCompatibility='1.6'
targetCompatibility='1.6'

sourceSets { 
    main {
        java {
            srcDirs = ['source/java']
        }
    }
    test {
        java {
            srcDirs = ['sourceTest/java']
        }
        resources {
            srcDirs = ['sourceTest/java']
        }
    }
}

buildDir = 'targets/gradle'

buildscript {
    apply from: '../gradle/repository.gradle'
    
    repositories repositoryConfig
    
    dependencies {
        classpath 'cisd:cisd-ant-tasks:+'
    }
}

repositories repositoryConfig

// Gathering version and revision
def gatheringTask = new ch.systemsx.cisd.ant.task.subversion.GatherRevisionAndVersionTask()
gatheringTask.setProjectNames(project.getAllprojects().collect { it.getName() })
println "project:"+project.name+", all projects:"+gatheringTask.projectNames
def antProject = new org.apache.tools.ant.Project()
antProject.setBaseDir(new File("${project.projectDir}"))
gatheringTask.setProject(antProject)
gatheringTask.setVersion("version")
gatheringTask.setRevision("revision")
gatheringTask.setClean("clean")
gatheringTask.execute()
versionNumber = antProject.getProperty("version")
revisionNumber = antProject.getProperty("revision")
cleanFlag = antProject.getProperty("clean")

// set version
version=versionNumber+"-r"+revisionNumber
println "${project.name}: ${version}"

// create BUILD INFO file
def targetsDist = 'targets/dist'
def distFolder = new File("${project.projectDir}/${targetsDist}")
distFolder.deleteDir()
distFolder.mkdirs()

def writer = new FileWriter("${project.projectDir}/${targetsDist}/BUILD-${project.name}.INFO")
try {
    writer.println("${versionNumber}:${revisionNumber}:${cleanFlag}")
} finally {
    writer.close()
}


group="cisd"

task checkRestrictions(type: Exec, dependsOn: [classes, testClasses]) {
    doFirst {
        cp = configurations.testCompile.filter({ f -> f.name.startsWith('restrictionchecker') || f.name.startsWith('bcel')}).asPath
        cmd = ['java', '-cp', cp, 'ch.rinn.restrictions.RestrictionChecker', '-r', sourceSets.main.output.classesDir]
        if (sourceSets.test.output.classesDir.exists()) {
            cmd.add(sourceSets.test.output.classesDir)
        }
        cmd.add('-cp')
        cmd.add(sourceSets.main.output.classesDir)
        if (sourceSets.test.output.classesDir.exists()) {
            cmd.add(sourceSets.test.output.classesDir)
        }
        cmd.add(configurations.testCompile.asPath)
        commandLine cmd
    }
}

test {
    useTestNG()
    options.suites('sourceTest/java/tests.xml')    

    jvmArgs '-Xmx2048m', '-XX:MaxPermSize=256m', '-Duser.timezone=Europe/Zurich'
    
    testLogging.showStandardStreams = true
    ignoreFailures = true
}
test.dependsOn checkRestrictions

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

configurations {
    ecj 
}

dependencies {
    ecj "eclipse:ecj:3.8.1"
}

compileJava {
    options.encoding = 'utf-8'
    options.fork = true
    doFirst {
        options.forkOptions.with {
            executable = 'java'
            jvmArgs = ['-cp', configurations.ecj.asPath, 'org.eclipse.jdt.internal.compiler.batch.Main', 
                       '-nowarn', '-source', '1.6' ]
        }
    }
}

compileTestJava {
    options.encoding = 'utf-8'
    options.fork = true
    doFirst {
        options.forkOptions.with {
            executable = 'java'
            jvmArgs = ['-cp', configurations.ecj.asPath, 'org.eclipse.jdt.internal.compiler.batch.Main', 
                       '-nowarn', '-source', '1.6' ]
        }
    }
}

processTestResources {
    fileMode=0666
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'hours'
}

apply plugin: 'eclipse'

eclipse {
    classpath {
        downloadSources=true
        defaultOutputDir = file('targets')
    }
}

eclipse.classpath.file {
    whenMerged{ classpath ->
        def projectRefs = classpath.entries.findAll{entry -> entry.kind =='src' && entry.path.startsWith('/')}
        classpath.entries.removeAll(projectRefs)
        classpath.entries.addAll(projectRefs)   
    }   
}

task testJar(type: Jar, dependsOn: testClasses) {
    baseName = "test-${project.archivesBaseName}"
    from sourceSets.test.output
}

configurations {
    tests  { 
         extendsFrom testRuntime 
     } 
}

artifacts {
    tests testJar
}

task compileDependencies(type: Copy) {
    into "$buildDir/output/compile-dependencies"
    from configurations.compile
}

task runtimeDependencies(type: Copy) {
    into "$buildDir/output/runtime-dependencies"
    from configurations.runtime
}

task testCompileDependencies(type: Copy) {
    into "$buildDir/output/testCompile-dependencies"
    from configurations.testCompile
}

task testRuntimeDependencies(type: Copy) {
    into "$buildDir/output/testRuntime-dependencies"
    from configurations.testRuntime
}