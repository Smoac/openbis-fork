apply plugin: 'java'
apply plugin: 'project-report'

task wrapper(type: Wrapper) {
    gradleVersion = '1.5'
    distributionUrl = "http://svncisd.ethz.ch/repos/cisd/ivy-repository/trunk/gradle/distribution/1.5/gradle-1.5-bin.zip"
}

sourceCompatibility='1.6'
targetCompatibility='1.6'

sourceSets { 
	main {
		java {
			srcDirs = ['source/java']
		}
	}
	test {
		java {
			srcDirs = ['sourceTest/java']
		}
		resources {
			srcDirs = ['sourceTest/java']
		}
	}
}

buildDir = 'targets/gradle'
	
repositories {
    add(new org.apache.ivy.plugins.resolver.FileSystemResolver()) {
        name = 'ivy-repository-local'
        addIvyPattern "${project.projectDir}/../ivy-repository/[organisation]/[module]/[revision]/ivy.xml"
        addArtifactPattern "${project.projectDir}/../ivy-repository/[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]"
        descriptor = 'required'
        checksums = "sha1"
    }    
    add(new org.apache.ivy.plugins.resolver.URLResolver()) {
        name = 'ivy-repository-svn'
        addIvyPattern "http://svncisd.ethz.ch/repos/cisd/ivy-repository/trunk/[organisation]/[module]/[revision]/ivy.xml"
        addArtifactPattern "http://svncisd.ethz.ch/repos/cisd/ivy-repository/trunk/[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]"
        descriptor = 'required'
        checksums = "sha1"
    }
}

test {
	useTestNG()
	options.suites('sourceTest/java/tests.xml')	

	jvmArgs '-Xmx2048m', '-XX:MaxPermSize=256m'
	
	testLogging.showStandardStreams = true
}

task sourceJar(type: Jar) {
	from sourceSets.main.allJava
	classifier "sources"
}

configurations {
	ecj 
}

dependencies {
   	ecj "eclipse:ecj:3.8.1"
}

compileJava {
	options.encoding = 'utf-8'
	options.fork = true
	doFirst {
		options.forkOptions.with {
			executable = 'java'
			jvmArgs = [ '-cp', configurations.ecj.asPath, 'org.eclipse.jdt.internal.compiler.batch.Main', '-source', '1.6' ]
		}
	}
}

compileTestJava {
	options.encoding = 'utf-8'
	options.fork = true
	doFirst {
		options.forkOptions.with {
			executable = 'java'
			jvmArgs = [ '-cp', configurations.ecj.asPath, 'org.eclipse.jdt.internal.compiler.batch.Main', '-source', '1.6' ]
		}
	}
}

processTestResources {
	fileMode=0666
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'hours'
}

apply plugin: 'eclipse'

eclipse {
	classpath {
		downloadSources=true
		defaultOutputDir = file('targets')
	}
}

eclipse.classpath.file {
	whenMerged{ classpath ->
		def projectRefs = classpath.entries.findAll{entry -> entry.kind =='src' && entry.path.startsWith('/')}
		classpath.entries.removeAll(projectRefs)
		classpath.entries.addAll(projectRefs)   
	}   
}

task testJar(type: Jar, dependsOn: testClasses) {
    baseName = "test-${project.archivesBaseName}"
    from sourceSets.test.output
}

configurations {
    tests  { 
         extendsFrom testRuntime 
     } 
}

artifacts {
    tests testJar
}