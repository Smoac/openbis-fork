evaluationDependsOn(':common')
evaluationDependsOn(':openbis_api')
evaluationDependsOn(':openbis-common')
evaluationDependsOn(':authentication')
evaluationDependsOn(':dbmigration')
evaluationDependsOn(':openbis')
evaluationDependsOn(':datastore_server')

apply from: '../gradle/javaproject.gradle'

archivesBaseName = 'datastore_server_plugin-dsu'

configurations.create('trackingClient')

dependencies {
	compile project(':common'),
            project(':openbis-common'),
            project(':openbis_api'),
            project(':openbis'),
            project(':datastore_server')

    testCompile project(path: ':datastore_server', configuration: 'tests')
    
    trackingClient 'cisd:cisd-base:+',
                   'javax:activation:+',
                   'javax:mail:+',
                   'apache:log4j:+',
                   'springframework:spring:+',
                   'marathon:marathon-spring-util:+',
                   'apache:httpclient:+'
}

task trackingJar(type: Jar) {
    archiveName "openbis-tracking-qgf-client.jar"

    from zipTree(project(':common').jar.archivePath).plus(
         zipTree(project(':openbis-common').jar.archivePath).plus( 
         zipTree(project(':openbis_api').jar.archivePath).plus( 
         zipTree(project(':datastore_server').jar.archivePath).plus( 
         zipTree(project(':openbis').jar.archivePath))))).matching {
            include '**/*.class'
    }

    manifest {
        attributes 'Main-Class': 'ch.ethz.bsse.cisd.dsu.tracking.main.TrackingClient',
                   "Class-Path": configurations.trackingClient.files.collect { it.getName() }.join(' ')
    }
}

task trackingZip(type: Zip, dependsOn: [trackingJar]) {
    baseName = "openbis-tracking-qgf-client"

    from (trackingJar.archivePath) {
        into "tracking/lib"
    }

    from (configurations.trackingClient.files) {
        into "tracking/lib"
    }
    
    from ('tracking/dist/etc') {
        into "tracking/etc"
    }

    from ('tracking/dist/tracking.sh') {
        into "tracking/"
    }
}

task zip(type: Zip) {
	includeEmptyDirs false
    from (jar.archivePath) {
	    into 'datastore_server/lib/'
	    rename 'datastore_server_plugin-dsu(.*)\\.jar', 'datastore_server_plugin-dsu.jar'
	}
    
    from (fileTree(dir: 'source/core-plugins', includes:['illumina-ngs/**'], excludes:['**/as/**', '**/package-to-dist'])) {
		into 'core-plugins'    
	}
}

zip.dependsOn jar
build.dependsOn zip
build.dependsOn trackingZip