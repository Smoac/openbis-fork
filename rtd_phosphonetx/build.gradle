evaluationDependsOn(':common')
evaluationDependsOn(':openbis_api')
evaluationDependsOn(':openbis-common')
evaluationDependsOn(':authentication')
evaluationDependsOn(':dbmigration')
evaluationDependsOn(':openbis')
evaluationDependsOn(':datastore_server')

apply from: 'http://svncisd.ethz.ch/repos/cisd/gradle/trunk/javaproject.gradle'

archivesBaseName = 'datastore_server_plugin-proteomics'

dependencies {
	compile project(':common'),
			project(':datastore_server')
			
	testCompile project(path: ':datastore_server', configuration: 'tests')	
	
}

sourceSets { 
	test {
		resources {
			srcDirs = ['source/java']
		}
	}
}

jar {
    from('../rtd_phosphonetx/source/sql'){ 
        into("/sql") 
        include "proteomics/**/*.sql" 
    }
}

task zip(type: Zip) {
	includeEmptyDirs false
    from (jar.archivePath) {
	    into 'datastore_server/lib/'
	    rename 'datastore_server_plugin-proteomics(.*)\\.jar', 'datastore_server_plugin-proteomics.jar'
	}
    
    from (fileTree(dir: 'source/core-plugins', includes:['proteomics/**', 'proteomics-optional/**'], excludes:['**/as/**', '**/package-to-dist'])) {
		into 'core-plugins'    
	}
}
zip.dependsOn jar
build.dependsOn zip


task apiJar(type: Jar) {
	baseName 'openBIS-proteomics-API'
	includeEmptyDirs false
	from zipTree(project(':common').jar.archivePath).plus(
         zipTree(project(':openbis-common').jar.archivePath).plus( 
         zipTree(project(':openbis').jar.archivePath).plus(
         zipTree(project(':openbis_api').jar.archivePath).plus(
         zipTree(jar.archivePath))))).matching {
         	include "ch/systemsx/cisd/common/exceptions/**/*.class"
        	include "ch/systemsx/cisd/common/spring/HttpInvokerUtils.class"
        	include "ch/systemsx/cisd/common/api/**/*.class"
        	exclude "ch/systemsx/cisd/common/api/server/**/*.class"
        	include "ch/systemsx/cisd/openbis/common/api/**/*.class"
        	exclude "ch/systemsx/cisd/openbis/common/api/server/**/*.class"
        	include "ch/systemsx/cisd/openbis/plugin/proteomics/**/api/**/*.class"
        	exclude "ch/systemsx/cisd/openbis/**/server/api/**/*.class"
        	include "ch/systemsx/cisd/openbis/generic/shared/api/**/*.class" 
        	include "ch/systemsx/cisd/openbis/plugin/proteomics/*BuildAndEnvironmentInfo.class"
        	include "*.INFO"
		}
}

proteomicsApiSources = fileTree('.').matching {
    include "source/java/ch/systemsx/cisd/openbis/plugin/proteomics/client/api/v1/**"
    include "source/java/ch/systemsx/cisd/openbis/plugin/proteomics/shared/api/v1/**"
}

allApiSources = project(':openbis').commonApiSources.plus(
				project(':openbis').openBisApiApiSources.plus(
				project(':openbis').openbisCommonApiSources.plus(
				proteomicsApiSources)))

task apiSources(type: Zip) {
	archiveName 'src.zip'
	from allApiSources
}

configurations.create('javadoc')
dependencies {
	javadoc 'springframework:spring-tx:+'
}

task apiJavaDoc(type: Javadoc) {
	source allApiSources.matching{
		include "**/*.java"
	}
	
	classpath = sourceSets.main.output + sourceSets.main.compileClasspath + configurations.javadoc
}

task apiJavaDocZip(type: Zip) {
	archiveName 'doc.zip'
	from apiJavaDoc.destinationDir
}
apiJavaDocZip.dependsOn apiJavaDoc


configurations.create('apiDependencies')
dependencies {
	apiDependencies 'cisd:cisd-base:+',
					'apache:commons-httpclient:+',
					'apache:log4j:+',
					'springframework:spring-aop:+',
					'springframework:spring-web:+',
					'springframework:spring-tx:+',					
					'marathon:marathon-spring-util:+'
}

task apiZip(type: Zip) {
	baseName 'openBIS-proteomics-API'
	from apiJar.archivePath
	from apiSources.archivePath
	from apiJavaDocZip.archivePath
	from configurations.apiDependencies
	into 'openBIS-proteomics-API'
}
apiZip.dependsOn apiJar
apiZip.dependsOn apiSources
apiZip.dependsOn apiJavaDocZip

build.dependsOn apiZip
