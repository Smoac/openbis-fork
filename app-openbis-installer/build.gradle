evaluationDependsOn(':lib-commonbase')
evaluationDependsOn(':lib-common')
evaluationDependsOn(':openbis_api')
evaluationDependsOn(':lib-openbis-common')
evaluationDependsOn(':lib-authentication')
evaluationDependsOn(':lib-dbmigration')
evaluationDependsOn(':server-application-server')
evaluationDependsOn(':server-original-data-store')
evaluationDependsOn(':server-screening')
evaluationDependsOn(':openbis_standard_technologies')

apply from: '../build/javaproject.gradle'

// Replace BUILD INFO files for AS and DSS because their revision number is usually to low.
def buildInfo = file("${project.projectDir}/targets/dist/BUILD-${project.name}.INFO").text
file("../server-original-data-store/targets/dist/BUILD-datastore_server.INFO").write(buildInfo)
file("../openbis_standard_technologies/targets/dist/BUILD-openbis_standard_technologies.INFO").write(buildInfo)

buildscript {
    apply from: '../build/repository.gradle'

    repositories repositoryConfig

    dependencies {
        classpath 'izpack:izpack:5.0-beta9-SNAPSHOT-2022-03-22',
                'apache:commons-io:2.6',
                'apache:commons-lang:2.4'
    }
}

dependencies {
    api project(':lib-common')

    api 'izpack:izpack:5.0-beta9-SNAPSHOT-2022-03-22'

    testImplementation project(path: ':lib-commonbase', configuration: 'tests'),
            project(path: ':lib-common', configuration: 'tests'),
            'fjelmer:classycle:1.4.2',
            'testng:testng:6.8-CISD'

    archives 'apache:commons-io:2.6',
            'apache:log4j:1.2.15',
            'sis:sis-base:18.09.0',
            'postgresql:postgresql:42.5.0',
            'gradle:core:7.4'

}

archivesBaseName = 'openBIS-installation-standard-technologies'
ext.installerDistDir = 'targets/dist/installer'
ext.izPackJar = "${buildDir}/izPack.jar"
println "installerDir:${installerDistDir}"
println "buildDir:${buildDir}"
println "installer:${project.projectDir}/resource/installer"

task copyResources(type: Copy, dependsOn: [compileJava, ':openbis_standard_technologies:zip', ':openbis_standard_technologies:zipDss', 'openbis_standard_technologies:zipBdlServer']) {
    duplicatesStrategy 'include'
    from "${project.projectDir}/resource/installer"
    from "${project.projectDir}/../openbis_standard_technologies/dist/tarball/installer"
    from zipTree(project(':openbis_standard_technologies').zipDss.archivePath)
    into installerDistDir
    from zipTree(project(':openbis_standard_technologies').zipBdlServer.archivePath)
    into installerDistDir
    from("${installerDistDir}/../BUILD-installation.INFO") {
        into 'bin'
    }
    from("${buildDir}/classes/java/main/InstallerVariableAccess.class") {
        into 'bin'
    }
    from(zipTree(project(':openbis_standard_technologies').zip.archivePath)) {
        into "openBIS-server"
    }
}

// The JAR file created by the IzPack compiler contains folders stored as empty files.
// This is only a problem in gradle environment. The following function fixes this problem by
// removing all empty entries which do not end with '/'.
def fixJarFile = { String jarFilePath ->
    def inputZipFile = new java.util.zip.ZipFile(jarFilePath)
    def zin = null
    def zout = null
    try {
        def entries = inputZipFile.entries()
        def entriesToDelete = new HashSet<String>()
        while (entries.hasMoreElements()) {
            def entry = entries.nextElement()
            if (entry.name.endsWith("/") == false && entry.size == 0) {
                entriesToDelete.add(entry.name)
            }
        }
        zin = new java.util.zip.ZipInputStream(new java.io.FileInputStream(jarFilePath))
        def tmpJarFilePath = jarFilePath + '.tmp'
        zout = new java.util.zip.ZipOutputStream(new java.io.FileOutputStream(tmpJarFilePath))
        byte[] buf = new byte[1024]
        def entry = zin.getNextEntry()
        while (entry != null) {
            if (entriesToDelete.contains(entry.name) == false) {
                zout.putNextEntry(new java.util.zip.ZipEntry(entry.name))
                int len
                while ((len = zin.read(buf)) > 0) {
                    zout.write(buf, 0, len)
                }
            }
            entry = zin.getNextEntry()
        }
        inputZipFile.close()
        zin.close();
        zout.close();
        def jarFile = new File(jarFilePath)
        if (jarFile.delete() == false) {
            throw new IllegalStateException("Couldn't delete ${jarFile}")
        }
        if (new File(tmpJarFilePath).renameTo(jarFile) == false) {
            throw new IllegalStateException("Couldn't rename ${tmpJarFilePath} to ${jarFile}")
        }
    } finally {
        if (inputZipFile != null) {
            inputZipFile.close()
        }
        if (zin != null) {
            zin.close();
        }
        if (zout != null) {
            zout.close();
        }
    }


}

task(listVersions) {
    doLast {
        println "project: ${project.name} [${version}]"
        for (p in project.subprojects) {
            println "subproject: ${p.name} [${p.version}]"
        }
    }
}
task(compileInstaller) {
    doLast {
        def compression = 'default'
        def kind = 'standard'
        def basedir = project.projectDir.path
        def input = basedir + '/resource/installer/install.xml'
        def compressionLevel = -1
        def compilerData = new com.izforge.izpack.compiler.data.CompilerData(compression, kind, input,
                null, basedir, izPackJar, compressionLevel)
        def compilerContainer = new com.izforge.izpack.compiler.container.CompilerContainer()
        compilerContainer.initBindings()
        compilerContainer.addConfig('installFile', input)
        compilerContainer.addComponent(compilerData.class, compilerData)
        def compilerConfig = compilerContainer.getComponent(com.izforge.izpack.compiler.CompilerConfig.class)
        def propertyManager = compilerContainer.getComponent(com.izforge.izpack.compiler.data.PropertyManager.class)
        propertyManager.addProperty('installer.dist.dir', '../app-openbis-installer/' + installerDistDir)
        propertyManager.addProperty('version.number', versionNumber)
        propertyManager.addProperty('revision.number', Integer.toString(revisionNumber))
        compilerConfig.executeCompiler()
        fixJarFile(izPackJar)
    }
}
compileInstaller.dependsOn copyResources

task createInstallerJar(type: Jar, dependsOn: [compileInstaller, jar]) {
    duplicatesStrategy 'include'
    archiveName 'openBIS-installer.jar'
    from zipTree(new File(izPackJar))
    from zipTree(jar.archivePath)
    from zipTree(project(':lib-common').jar.archivePath)
    from zipTree(project(':lib-commonbase').jar.archivePath)
    for (f in configurations.archives.files) {
        from zipTree(f)
    }
}

task createInstallerZip(type: Tar, dependsOn: createInstallerJar) {
    compression = Compression.GZIP
    extension = 'tar.gz'
    baseName 'openBIS-installation-standard-technologies'
    from createInstallerJar.archivePath
    from('resource/tarball') {
        include 'console.properties'
        include 'extract.sh'
        include 'jul.config'
        include 'run-console.sh'
        include 'run-ui.sh'
    }
    into "openBIS-installation-standard-technologies-${version}"
}

build.dependsOn createInstallerZip
