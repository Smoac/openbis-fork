incoming-dir = ${incoming-root-dir}/incoming-images-merged-channels
incoming-data-completeness-condition = auto-detection

# The extractor class to use for code extraction
data-set-info-extractor = ch.systemsx.cisd.etlserver.DefaultDataSetInfoExtractor
data-set-info-extractor.entity-separator = .
data-set-info-extractor.index-of-sample-code = 0
data-set-info-extractor.index-of-data-producer-code = 
data-set-info-extractor.space-code = DEMO
data-set-info-extractor.project-code = DEMO_PROJECT

# The extractor class to use for type extraction
type-extractor = ch.systemsx.cisd.etlserver.SimpleTypeExtractor
type-extractor.file-format-type = JPG
type-extractor.locator-type = RELATIVE_LOCATION
type-extractor.data-set-type = HCS_IMAGE_OVERVIEW
type-extractor.is-measured = true

# Note: this storage processor is able to process folders compressed with zip as well
storage-processor = ch.systemsx.cisd.openbis.dss.etl.PlateStorageProcessor
# How should the original data be stored? Possible values:
#   unchanged       - nothing is changed, the default
#   hdf5            - all the data will be packaged into one hdf5 file
#   hdf5_compressed - like hdf5, but each file is stored in a compressed form
storage-processor.original-data-storage-format = unchanged
# Should the thumbnails be generated? 
# It slows down the dataset registration, but increases the performance when the user wants to see the image. 
# Can be 'true' or 'false', 'false' is the default value
storage-processor.generate-thumbnails = false
# Thumbnails size in pixels
# storage-processor.thumbnail-max-width = 300
# storage-processor.thumbnail-max-height = 200
# Codes of the channels in which images have been acquired. Allowed characters: [A-Z0-9_-]. 
# Number and order of entries must be consistent with 'channel-labels'.
storage-processor.channel-codes = GFP, DAPI
# Labels of the channels in which images have been acquired. 
# Number and order of entries must be consistent with 'channel-codes'.
storage-processor.channel-labels = Gfp, Dapi

# Optional boolean property, true by default. 
# Set to false to allow datasets in one experiment to use different channels.
# In this case 'channel-codes' and 'channel-labels' become optional and are used only to determine the label for each channel code.
# It should be set to 'false' for overlay image datasets. 
#storage-processor.define-channels-per-experiment = false

# Optional boolean property, true by default. 
# If true an email is sent if some images for the uploaded plate are missing. 
#storage-processor.notify-if-incomplete = false

# Optional boolean property, true by default. 
# If set to false then the dataset whcih cannot be registered will be left in the incoming folder 
# and will be mentioned in the .faulty_paths file
#storage-processor.move-unregistered-datasets-to-error-dir = false
    
# This is an optional boolean property which defines if all image datasets in one experiment have the same
# channels or if each imported dataset can have different channels. By default true if not specified.
#storage-processor.define-channels-per-experiment = false
# Format: [width]>x[height], e.g. 3x4. Specifies the grid into which a microscope divided the well to acquire images.
storage-processor.well_geometry = 3x3
# implementation of the IHCSImageFileExtractor interface which maps images to the location on the plate and particular channel
# Here: the extractor requireds that each image name should adhere to the schema:
#     <any-text>_<plate-code>_<well-code>_<tile-code>_<channel-name>.<allowed-image-extension>
storage-processor.file-extractor = ch.systemsx.cisd.openbis.dss.etl.HCSImageFileExtractor
# specification of the imaging db
storage-processor.data-source = imaging-db
# Optional comma separated list of color components. 
# Available values: RED, GREEN or BLUE. 
# If specified then the channels are extracted from the color components and override 'file-extractor' results.
storage-processor.extract-single-image-channels = GREEN, BLUE
