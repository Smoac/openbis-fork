#
# Copyright 2014 ETH Zuerich, Scientific IT Services
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##
## Configuration
##
import sys

PATH_TO_MANAGE_PROPERTIES_SCRIPTS = "%s/../compatibility/" % [p for p in sys.path if p.find('core-plugins') >= 0][0];
#PATH_TO_MANAGE_PROPERTIES_SCRIPTS = "/Users/juanf/Documents/installations/S195/servers/core-plugins/newbrowser/1/compatibility/";

# MasterDataRegistrationTransaction Class
import os
import ch.systemsx.cisd.openbis.generic.server.jython.api.v1.DataType as DataType

##
## Globals
##
vocabulariesCache = {};
propertiesCache = {};
samplesCache = {};
tr = service.transaction()

##
## API Facade
##
def createVocabularyWithTerms(vocabularyCode, vocabularyDescription, terms):
	vocabulary = tr.createNewVocabulary(vocabularyCode);
	vocabulary.setChosenFromList(True);
	vocabulary.setDescription(vocabularyDescription);
	addTerms(vocabulary, terms);
	vocabulariesCache[vocabularyCode] = vocabulary;
	
def addTerms(vocabulary, terms):
	for term in terms:
		addTermWithLabelAndDescription(vocabulary, term[0], term[1], term[2])
	
def addTermWithLabelAndDescription(vocabulary, termCode, termLabel, termDescription):
	newTerm = tr.createNewVocabularyTerm(termCode);
	newTerm.setLabel(termLabel);
	newTerm.setDescription(termDescription);
	vocabulary.addTerm(newTerm);
	
def createSampleTypeWithProperties(sampleTypeCode, description, properties):
	newSampleType = tr.getOrCreateNewSampleType(sampleTypeCode);
	newSampleType.setDescription(description);
	newSampleType.setShowParents(True);
	newSampleType.setAutoGeneratedCode(True);
	newSampleType.setGeneratedCodePrefix(sampleTypeCode[:3]);
	addProperties(newSampleType, properties);
	samplesCache[sampleTypeCode] = newSampleType;
	
def createDataSetTypeWithProperties(dataSetCode, kind, description, properties):
	newDataSet = tr.getOrCreateNewDataSetType(dataSetCode);
	newDataSet.setDataSetKind(kind);
	newDataSet.setDescription(description);
	addProperties(newDataSet, properties);
	
def createExperimentTypeWithProperties(experimentTypeCode, description, properties):
	newExperiment = tr.getOrCreateNewExperimentType(experimentTypeCode);
	newExperiment.setDescription(description);
	addProperties(newExperiment, properties);

def addPropertiesToSamples(sampleTypeCodes, properties):
	for sampleTypeCode in sampleTypeCodes:
		sampleType = samplesCache[sampleTypeCode];
		addProperties(sampleType, properties);
	
def addProperties(entity, properties):
	for property in properties:
		addProperty(entity, property[0], property[1], property[2], property[3], property[4], property[5], property[6], property[7]);
	
def addProperty(entity, propertyCode, section, propertyLabel, dataType, vocabularyCode, propertyDescription, managedScript, dynamicScript):
	property = None;
	
	if propertyCode in propertiesCache:
		property = propertiesCache[propertyCode];
	else:
		property = createProperty(propertyCode, dataType, propertyLabel, propertyDescription, vocabularyCode);
	
	propertyAssignment = tr.assignPropertyType(entity, property);
	propertyAssignment.setSection(section);
	if managedScript != None:
		propertyAssignment.setManaged(True);
		propertyAssignment.setShownEdit(True);
		propertyAssignment.setScriptName(managedScript);
	if dynamicScript != None:
		propertyAssignment.setDynamic(True);
		propertyAssignment.setShownEdit(False);
		propertyAssignment.setScriptName(dynamicScript);

def createProperty(propertyCode, dataType, propertyLabel, propertyDescription, vocabularyCode):
	property = tr.getOrCreateNewPropertyType(propertyCode, dataType);
	property.setDescription(propertyDescription);
	property.setLabel(propertyLabel);
	propertiesCache[propertyCode] = property;
	if dataType == DataType.CONTROLLEDVOCABULARY:
		property.setVocabulary(vocabulariesCache[vocabularyCode]);
	return property;

def createAnnotationsScriptForType(sampleTypeCode):
	annotationsScriptName = None;
	if PATH_TO_MANAGE_PROPERTIES_SCRIPTS != None:
		annotationsScriptName = "ANNOTATIONS_" + sampleTypeCode;
		annotationsScriptAsString = open(PATH_TO_MANAGE_PROPERTIES_SCRIPTS + "managed.py", 'r').read();
		annotationsScriptAsString = annotationsScriptAsString.replace("<REPLACE_WITH_ANNOTABLE_TYPE>", sampleTypeCode);
		annotationsScript = tr.getOrCreateNewScript(annotationsScriptName);
		annotationsScript.setName(annotationsScriptName);
		annotationsScript.setDescription("Annotations Handler for " + sampleTypeCode);
		annotationsScript.setScript(annotationsScriptAsString);
		annotationsScript.setScriptType("MANAGED_PROPERTY");
		annotationsScript.setEntityForScript("SAMPLE");
	return annotationsScriptName;

##
## Manage properties scripts
##
commentsSampleScriptName = None;
commentsExperimentScriptName = None;
commentsDatasetScriptName = None;
genotypeSampleScriptName = None;

if PATH_TO_MANAGE_PROPERTIES_SCRIPTS != None:
	
	commentsScriptAsString = open(PATH_TO_MANAGE_PROPERTIES_SCRIPTS + "comments.py", 'r').read();
	
	commentsSampleScriptName = "COMMENTS_SAMPLE";
	commentsSampleScript = tr.getOrCreateNewScript(commentsSampleScriptName);
	commentsSampleScript.setName(commentsSampleScriptName);
	commentsSampleScript.setDescription("Comments Handler");
	commentsSampleScript.setScript(commentsScriptAsString);
	commentsSampleScript.setScriptType("MANAGED_PROPERTY");
	commentsSampleScript.setEntityForScript("SAMPLE");
	
	commentsExperimentScriptName = "COMMENTS_EXPERIMENT";
	commentsExperimentScript = tr.getOrCreateNewScript(commentsExperimentScriptName);
	commentsExperimentScript.setName(commentsExperimentScriptName);
	commentsExperimentScript.setDescription("Comments Handler");
	commentsExperimentScript.setScript(commentsScriptAsString);
	commentsExperimentScript.setScriptType("MANAGED_PROPERTY");
	commentsExperimentScript.setEntityForScript("EXPERIMENT");
	
	commentsDatasetScriptName = "COMMENTS_DATASET";
	commentsDatasetScript = tr.getOrCreateNewScript(commentsDatasetScriptName);
	commentsDatasetScript.setName(commentsDatasetScriptName);
	commentsDatasetScript.setDescription("Comments Handler");
	commentsDatasetScript.setScript(commentsScriptAsString);
	commentsDatasetScript.setScriptType("MANAGED_PROPERTY");
	commentsDatasetScript.setEntityForScript("DATA_SET");
	
	genotypeScriptAsString = open(PATH_TO_MANAGE_PROPERTIES_SCRIPTS + "genetic_modifications.py", 'r').read();
	
	genotypeSampleScriptName = "GENETIC_MODIFICATIONS_SAMPLE";
	genotypeSampleScript = tr.getOrCreateNewScript(genotypeSampleScriptName);
	genotypeSampleScript.setName(genotypeSampleScriptName);
	genotypeSampleScript.setDescription("Genetic Modifications Handler");
	genotypeSampleScript.setScript(genotypeScriptAsString);
	genotypeSampleScript.setScriptType("DYNAMIC_PROPERTY");
	genotypeSampleScript.setEntityForScript("SAMPLE");
	
##
## Vocabulary Types
##
createVocabularyWithTerms("HOST", "Host organism",
									[
										["MOUSE", "mouse", None],
										["RAT", "rat", None],
										["GUINEA_PIG", "guinea pig", None],
										["RABBIT", "rabbit", None],
										["DONKEY", "donkey", None]
									]);

createVocabularyWithTerms("DETECTION", "Protein detection system",
									[
										["HRP", "horseradish peroxydase", "The antibody is conjugated with the horseradish peroxydase"],
										["FLUORESCENCE", "fluorescent probe", "The antibody is conjugated with a fluorescent probe"]
									]);

createVocabularyWithTerms("STORAGE", "Different storage conditions",
									[
										["RT", "room temperature", None],
										["4", "+4 degrees", None],
										["-20", "-20 degrees", None],
										["-80", "-80 degrees", None],
									]);

createVocabularyWithTerms("CLONALITY", "Clonality of the antibody",
									[
										["MONOCLONAL", "monoclonal", None],
										["POLYCLONAL", "polyclonal", None],
										["UNKNOWN", "unknown", None],
									]);

createVocabularyWithTerms("BACKBONE", "Backbone of the plasmid",
									[
										["PBLUESCRIPT_II_KS_PLUS", "pBluescript II KS +", "Commercial vector for cloning in bacteria (Stratagene)"],
										["PSPPOLY_A", "pSPpoly(A)", "Standard cloning vector. It can be used for in vitro trascription from SP6 promoter. It contains a poly(A) to generate poly(A)+ transcripts in vitro (Promega)"],
										["PRS30Y", "pRS30y", "Integrative yeast shuttle vector from Sikorski et al, 1989"],
										["PRS31Y", "pRS31y", "Centromeric yeast shuttle vector from Sikorski et al, 1989"],
										["PRS40Y", "pRS40y", "Integrative yeast shuttle vector from Sikorski et al, 1992"],
										["PRS41Y", "pRS41y", "Centromeric yeast shuttle vector from Sikorski et al, 1992"],
										["PRS42Y", "pRS42y", "2-micron-based yeast shuttle vector from Sikorski et al, 1992"],
										["UNKNOWN", "unknown", "unknown vector"],
										["PGEX4T1", "pGEX4T1", "Vector for bacterial expression"]
									]);

createVocabularyWithTerms("BACTERIAL_ANTIBIOTIC_RESISTANCE", "Bacterial antibiotic resistance",
									[
										["BLA", "bla", "Confers resistance to beta-lactam antibiotics like ampicillin, carbenicillin, etc."],
										["KAN", "kan", "Confers resistance to geneticin"],
										["CAT", "cat", "Confers resistance to chloramphenicol"]
									]);

createVocabularyWithTerms("MARKER", "Marker to select the strain/cell line after transformation/transfection",
									[
										["URA3", "URA3", "Complements the ura3- auxotrophy (S. cerevisiae gene)"],
										["HIS3", "HIS3", "Complements the his3- auxotrophy (S. cerevisiae gene)"],
										["LEU2", "LEU2", "Complements the leu2- auxotrophy (S. cerevisiae gene)"],
										["TRP1", "TRP1", "Complements the trp1- auxotrophy (S. cerevisiae gene)"],
										["MET15", "MET15", "Complements the met15- auxotrophy (S. cerevisiae gene)"],
										["LYS2", "LYS2", "Complements the lys2- auxotrophy (S. cerevisiae gene)"],
										["ADE2", "ADE2", "Complements the ade2- auxotrophy (S. cerevisiae gene)"],
										["KANMX", "KanMX", "Confers resistance to geneticin"],
										["NATMX", "NatMX", "Confers resistance to nourseothricin"],
										["HYGMX", "HygMX", "Confers resistance to hygromycin B"],
										["URA3MX", "Ura3MX", "Complements the ura3- auxotrophy  (not a S. cerevisiae gene)"],
										["HIS3MX", "His3MX", "Complements the his3- auxotrophy (not a S. cerevisiae gene)"],
										["CY_1", "Cy1", "Confers Curly phenotype"],
										["E_1", "e1", "Confers Ebony phenotype"],
										["SB_1", "Sb1", "Confers Stubble phenotype"],
										["W_1", "w1", "Confers White eyes phenotype"],
										["Y1", "y1", "Confers Yellow phenotype"],
									]);

createVocabularyWithTerms("STERILIZATION", "How the solution/buffer is sterilized when prepared",
									[
										["AUTOCLAVATION", "autoclavation", None],
										["FILTRATION", "filtration", None],
										["NONE", "none", None]
									]);

createVocabularyWithTerms("GENETIC_BACKGROUND", "Genetic background of the yeast strain",
									[
										["BY4743", "BY4743", None],
										["BY4741", "BY4741", None],
										["BY4742", "BY4742", None],
										["CEN.PK2-1C", "CEN.PK2-1C", None],
										["CEN.PK2-1D", "CEN.PK2-1D", None],
										["CEN.PK2", "CEN.PK2", None],
										["W303", "W303", None],
										["W303-1A", "W303-1A", None],
										["W303-1B", "W303-1B", None],
										["S288C", "S288C", None],
										["RM11", "RM11", None],
										["RM11-A", "RM11-A", None],
										["RM11-B", "RM11-B", None],
										["UNKNOWN", "unknown", None],
										["FY4", "FY4", None]
									]);

createVocabularyWithTerms("MATING_TYPE", "Mating type or ploidy of the yeast strain",
									[
										["A", "a", None],
										["ALPHA", "alpha", None],
										["DIPLOID", "diploid", None],
										["UNKNOWN", "unknown", None]
									]);

createVocabularyWithTerms("BACKGROUND_SPECIFIC_MARKERS", "Background-specific markers available in the strain for further genetic modifications",
									[
										["MET15_LYS2", "met15- lys2-", "The strain is a methionine and lysine auxotroph"],
										["MET15", "met15-", "The strain is a methionine auxotroph"],
										["LYS2", "lys2-", "The strain is a lysine auxotroph"],
										["TRP1_ADE2", "trp1- ade2-", "The strain is a tryptophan and adenine auxotroph"],
										["TRP1", "trp1-", "The strain is a tryptophan auxotroph"],
										["ADE2", "ade2-", "The strain is a adenine auxotroph"],
										["MET15_TRP1", "met15- trp1-", "The strain is a methionine and tryptophan auxotroph"],
										["NONE", "none", "The strain does not have any background-specific auxotrophies"],
										["UNKNOWN", "unknown", "No information about the auxotrophy"],
										["MET15_LYS2_TRP1_ADE2", "met15- lys2- trp1- ade2-", "The strain is a methionine, lysine, tryptophan, and adenine auxotroph"],
										["LYS2_TRP1", "lys2- trp1-", "The strain is a lysine and tryptophan auxotroph"],
										["MET15_LYS2_TRP1", "met15- lys2- trp1-", "The strain is a methionine, lysine, and tryptophan auxotroph"]
									]);

createVocabularyWithTerms("COMMON_MARKERS", "Common Markers",
									[
										["URA3_HIS3_LEU2", "ura3- his3- leu2-", "The strain is a uracil, histidine, and leucine auxotroph"],
										["URA3_HIS3", "ura3- his3-", "The strain is a uracil and histidine auxotroph"],
										["URA3_LEU2", "ura3- leu2-", "The strain is a uracil and leucine auxotroph"],
										["URA3", "ura3-", "The strain is a uracil auxotroph"],
										["HIS3_LEU2", "his3- leu2-", "The strain is a histidine and leucine auxotroph"],
										["HIS3", "his3-", "The strain is a histidine auxotroph"],
										["LEU2", "leu2-", "The strain is a leucine auxotroph"],
										["NONE", "none", "The strain does not have any background-specific auxotrophies"],
										["UNKNOWN", "unknown", "No information about the auxotrophy"]
									]);

createVocabularyWithTerms("ENDOGENOUS_PLASMID", "Presence of an endogenous cir 2-micron plasmid",
									[
										["CIR_PLUS", "cir+", "The strain has the endogenous cir 2-micron plasmid"],
										["CIR_ZERO", "cir0", "The strain does not have the endogenous cir 2-micron plasmid"],
										["UNKNOWN", "unknown", "No information about the cir 2-micron plasmid"]
									]);

createVocabularyWithTerms("DIRECTION", "Direction of the oligonucleotide",
									[
										["FORWARD", "forward", None],
										["REVERSE", "reverse", None]
									]);

createVocabularyWithTerms("STRAND", "Double or single strand RNA",
									[
										["DS", "double strand", None],
										["SS", "single strand", None]
									]);

createVocabularyWithTerms("RNA_TYPE", "Type of RNA in terms of function: mimic of RNAi or inhibitor of RNAi",
									[
										["MIMIC", "mimic", None],
										["INHIBITOR", "inhibitor", None]
									]);

createVocabularyWithTerms("RNA_BACKBONE", "Type of backbone, modifications in the backbone",
									[
										["LNA", "LNA", "Locked nucleic acid"],
										["2_O_METHYL", "2-O-methylation", "2-O-methylation modication"]
									]);

createVocabularyWithTerms("ORIGIN", "How the strain/cell line was produced",
									[
										["CROSS", "cross", "The strain was produced by crossing two parent strains"],
										["TRANSFORMATION", "transformation", "The strain/ cell line was obtained by transformation"],
										["SPORULATION", "transformation sporulation", "The strain was obtained by sporulating a parent diploid strain"],
										["NEGATIVE_SELECTION", "negative selection", "The strain/cell line was obtained by negative selection"],
										["TRANSFECTION", "transfection", "The strain/cell line was obtained by transfection"]
									]);

createVocabularyWithTerms("CHECK", "Check done to verify the modifications introduced in the cell line",
									[
										["PCR", "PCR", None],
										["MICROSCOPY", "microscopy", None],
										["WB", "western blotting", None],
										["SB", "southern blotting", None],
										["PCR_MICROSCOPY", "PCR and microscopy", None],
										["FLOWCYTOMETRY", "flow cytometry", None],
										["PCR_FLOWCYTOMETRY", "PCR and flow cytometry", None],
										["MORPHOLOGY", "morphology", None],
										["OTHER", "other", None],
										["NOTHING", "nothing", None]
									]);

createVocabularyWithTerms("PROTOCOL_TYPE", "Type of protocol",
									[
										["DNA", "DNA method", None],
										["RNA", "RNA method", None],
										["PROTEINS", "proteins method", None],
										["YEAST_BASICS", "yeast basic method", None],
										["BACTERIA_BASICS", "bacteria basic method", None],
										["FLUORESCENCE_MICROSCOPY", "fluorescence microscopy method", None],
										["FLOW_CYTOMETRY", "flow cytometry method", None],
										["CELL_SORTING", "cell sorting method", None],
										["CELL_LINE_BASICS", "cell line basics", None]
									]);

createVocabularyWithTerms("TEMPLATE", "Type of template used in the PCR protocol",
									[
										["DNA", "DNA", None],
										["RNA", "RNA", None],
										["BACTERIA_COLONY", "bacteria colony", None],
										["YEAST_COLONY", "yeast colony", None]
									]);

createVocabularyWithTerms("YES_NO_CHOICE", "Yes or No or Unknown Choice",
									[
										["YES", "yes", None],
										["NO", "no", None],
										["UNKNOWN", "unknown", None]
									]);

createVocabularyWithTerms("MEMBRANE", "Type of membrane used for western blotting",
									[
										["PVDF", "PVDF", None],
										["NITROCELLULOSE", "nitrocellulose", None],
										["PVDF_NITROCELLULOSE", "Either PVDF or nitrocellulose", None]
									]);

createVocabularyWithTerms("SPECIES", "Species to which the cell line belongs",
									[
										["HOMO", "Homo sapiens", None],
										["MOUSE", "Mus musculus", None],
										["RAT", "Rattus norvegicus", None],
										["PIG", "Sus scrofa", None],
										["DROSOPHILA_MELANOGASTER", "Drosophila melanogaster", None]
									]);

createVocabularyWithTerms("CELL_MEDIUM", "Medium used to cultivate or manipulate the cell line",
									[
										["RPMI", "rpmi", None],
										["1640", "1640", None],
										["ISCOVES", "iscoves", None],
										["DMEM", "DMEM", None],
										["DMEM_NUTRIENT_MIXTURE_F-12_HAM", "DMEM nutrient mixture F-12 HAM", None],
										["DMEM_HIGH_GLUC", "DMEM high glucose", None],
										["DMEM_LOW_GLUC", "DMEM low glucose", None]
									]);

createVocabularyWithTerms("OWNER", "Who produced/owns the sample",
									[
										["FILL_ME_1", "Fill me with the people of your lab", None],
										["FILL_ME_2", "Fill me with the people of your lab 2", None]
									]);

createVocabularyWithTerms("CELL_TYPE", "Cell type",
									[
										["FIBROBLAST", "fibroblast", None],
										["NEURON", "neuron", None]
									]);

createVocabularyWithTerms("ORGANISM", "Organism",
									[
										["BACTERIA", "Bacteria", None],
										["BUDDING_YEAST", "Saccharomyces cerevisiae", None],
										["MAMMALIAN", "mammalian", None],
										["DROSOPHILA_MELANOGASTER", "Drosophila melanogaster", None]
									]);

createVocabularyWithTerms("EXPERIMENTAL_READOUT", "Experimental readout used",
									[
										["FLOW_CYTOMETRY", "flow citometry", None],
										["SORTING", "cell sorting", None],
										["GROWTH", "growth", None],
										["WESTERN_BLOTTING", "western blotting", None],
										["RT_QPCR", "RT-qPCR", None]
									]);

createVocabularyWithTerms("MACHINE", "Machine used",
									[
										["LSRII_FORTESSA", "SRII Fortessa", None],
										["TECAN_READER", "Tecan reader", None],
										["BIOLECTOR", "BioLector", None],
										["LICOR_ODYSSEY", "LI-COR Odyssey", None],
										["TI_ECLIPSE", "TI Eclipse (Nikon)", None],
										["SRX_101A", "Konica Minolta SRX-101A", None],
										["LIGHT_CYCLER", "LightCycler 480", None]
									]);

createVocabularyWithTerms("PLASMID_RELATIONSHIP", "Kind of plasmid relationship",
								[
										["DELETION", "Deletion", None],
										["INTEGRATION", "Integration", None],
										["MODIFICATION", "Modification", None],
										["LOST", "Lost", None],
										["OTHER", "Other", None]
									]);

createVocabularyWithTerms("STORAGE_NAMES", "Storages available on the lab", [
										["BENCH", "Bench", None],
										["DEFAULT_STORAGE", "Default Storage", None]
									]);

createVocabularyWithTerms("STORAGE_BOX_SIZE", "Boxes available on the lab", [
										["1X1", "1 x 1 box", None],
										["4X4", "4 x 4 box", None],
										["20X40", "20 x 40 box", None]
									]);
									
createVocabularyWithTerms("ELN_TYPES_METADATA", "The presence of this vocabulary indicates the ELN Plugin that the ELN master data script was executed.", [
										["TYPES_VERSION", "Types Version S207", None]
									]);
##
## Property Types for annotations
##

createProperty("COMMENTS", DataType.VARCHAR, "Comments", "", None);
createProperty("QUANTITY", DataType.VARCHAR, "Quantity", "", None);
createProperty("PLASMID_ANNOTATION", DataType.VARCHAR, "Plasmid annotation", "", None);
createProperty("PLASMID_RELATIONSHIP", DataType.CONTROLLEDVOCABULARY, "Plasmid relationship", "", "PLASMID_RELATIONSHIP");
createProperty("CONTAINED", DataType.VARCHAR, "Contained", "", None);

##
## DataSet Types
##
createDataSetTypeWithProperties("ELN_PREVIEW", "PHYSICAL", "ELN Preview image", [
	["NOTES", "General information", "Notes", DataType.MULTILINE_VARCHAR, None, "Notes regarding the dataset", None, None],
	["XMLCOMMENTS",	"Comments","Comments List",	DataType.XML,	None,	"Several comments can be added by different users", commentsDatasetScriptName, None]
]);

createDataSetTypeWithProperties("SEQ_FILE", "PHYSICAL", "", [
	["NOTES", "General information", "Notes", DataType.MULTILINE_VARCHAR, None, "Notes regarding the dataset", None, None],
	["XMLCOMMENTS",	"Comments","Comments List",	DataType.XML,	None,	"Several comments can be added by different users", commentsDatasetScriptName, None]
	
]);

createDataSetTypeWithProperties("RAW_DATA", "PHYSICAL", "", [
	["NOTES", "General information", "Notes", DataType.MULTILINE_VARCHAR, None, "Notes regarding the dataset", None, None],
	["XMLCOMMENTS",	"Comments","Comments List",	DataType.XML,	None,	"Several comments can be added by different users", commentsDatasetScriptName, None]
]);

createDataSetTypeWithProperties("ANALYZED_DATA", "PHYSICAL", "", [
	["NOTES", "General information", "Notes", DataType.MULTILINE_VARCHAR, None, "Notes regarding the dataset", None, None],
	["XMLCOMMENTS",	"Comments","Comments List",	DataType.XML,	None,	"Several comments can be added by different users", commentsDatasetScriptName, None]
]);



##
## Experiment Types
##
createExperimentTypeWithProperties("MATERIALS", "Folder used to organize samples in the Inventory/MATERIALS", []);
createExperimentTypeWithProperties("METHODS", "Folder used to organize samples in the Inventory/METHODS", []);



createExperimentTypeWithProperties("DEFAULT_EXPERIMENT", "Default Experiment", [
	["NAME", 				"General", "Name", 					DataType.VARCHAR, 			None,	"Name", None, None],
	["EXPERIMENTAL_GOALS", 	"General", "Experimental goals", 	DataType.MULTILINE_VARCHAR, None,	"Goal of the experiment", None, None],
	["GRANT", 				"General", "Grant", 				DataType.VARCHAR,			None,	"grant name", None, None],
	["START_DATE", 			"General", "Start Date", 			DataType.TIMESTAMP, 		None,	"Start Date", None, None],
	["END_DATE", 			"General", "End Date", 				DataType.TIMESTAMP,			None,	"End Date", None, None],
	["EXPERIMENTAL_RESULTS","General", "Experimental results", 	DataType.MULTILINE_VARCHAR, None,	"Brief summary of the results obtained", None, None],
	["XMLCOMMENTS",			"Comments","Comments List",			DataType.XML,				None,	"Several comments can be added by different users", commentsExperimentScriptName, None]
]);

##
## Sample Types - Materials
##

annotationsScriptName = createAnnotationsScriptForType("ANTIBODY");
createSampleTypeWithProperties("ANTIBODY", "", [
	["NAME", 				"General", 				"Name", 				DataType.VARCHAR,				None,		"Name", None, None],
	["HOST", 				"General", 				"Host", 				DataType.CONTROLLEDVOCABULARY,	"HOST", 	"Host used to produce the antibody", None, None],
	["FOR_WHAT", 			"General", 				"For what", 			DataType.MULTILINE_VARCHAR,		None, 		"For what kind of experimental application/readout this sample is used in the lab", None, None],
	["DETECTION", 			"General", 				"Detection",			DataType.CONTROLLEDVOCABULARY,	"DETECTION","Protein detection system (fill in this information only for secondary antibodies)", None, None],
	["EPITOPE", 			"General", 				"Epitope",				DataType.MULTILINE_VARCHAR,		None, 		"Epitope of the antibody", None, None],
	["CLONALITY", 			"General", 				"Clonality",			DataType.CONTROLLEDVOCABULARY,	"CLONALITY","Clonality of the antibody", None, None],
	["ISOTYPE", 			"General", 				"Isotype", 				DataType.MULTILINE_VARCHAR,		None, 		"Isotype of the antibody", None, None],
	["SUPPLIER", 			"Supplier and storage", "Supplier",				DataType.MULTILINE_VARCHAR,		None, 		"Supplier of the product", None, None],
	["ARTICLE_NUMBER", 		"Supplier and storage", "Art. Number", 			DataType.MULTILINE_VARCHAR,		None, 		"Article number of the product", None, None],
	["STORAGE", 			"Supplier and storage", "Storage", 				DataType.CONTROLLEDVOCABULARY,	"STORAGE", 	"Storage conditions of the product", None, None],
	["STOCK_CONCENTRATION", "Supplier and storage", "Stock concentration", 	DataType.VARCHAR,				None, 		"Stock concentration of the solution where the product is kept in the lab", None, None],
	["PUBLICATION", 		"Comments", 			"Publication", 			DataType.MULTILINE_VARCHAR,		None, 		"Publication from where the information was first found OR technical sheet given by the manufacturer", None, None],
	["NOTES", 				"Comments", 			"Notes", 				DataType.MULTILINE_VARCHAR,		None, 		"Notes", None, None],
	["XMLCOMMENTS",			"Comments",				"Comments List",		DataType.XML,					None,		"Several comments can be added by different users", commentsSampleScriptName, None],
	["ANNOTATIONS_STATE",	"Comments",				"Annotations State",	DataType.XML,					None,		"Annotations State", annotationsScriptName, None]
]);

annotationsScriptName = createAnnotationsScriptForType("CHEMICAL");
createSampleTypeWithProperties("CHEMICAL", "", [
	["NAME", 				"General", 				"Name", 				DataType.MULTILINE_VARCHAR,		None,		"Name", None, None],
	["SUPPLIER", 			"Supplier and storage", "Supplier", 			DataType.MULTILINE_VARCHAR,		None,		"Supplier of the product", None, None],
	["ARTICLE_NUMBER", 		"Supplier and storage", "Art. Number",			DataType.MULTILINE_VARCHAR,		None,		"Article number of the product", None, None],
	["STORAGE", 			"Supplier and storage", "Storage", 				DataType.CONTROLLEDVOCABULARY,	"STORAGE",	"Storage conditions of the product", None, None],
	["XMLCOMMENTS", 		"Comments", 			"Comments List", 		DataType.XML,					None,		"Several comments can be added by different users", commentsSampleScriptName, None],
	["ANNOTATIONS_STATE",	"Comments",				"Annotations State",	DataType.XML,					None,		"Annotations State", annotationsScriptName, None]
]);

annotationsScriptName = createAnnotationsScriptForType("ENZYME");
createSampleTypeWithProperties("ENZYME", "", [
	["NAME", 				"General",				"Name",					DataType.MULTILINE_VARCHAR,		None,		"Name", None, None],
	["SUPPLIER", 			"Supplier and storage",	"Supplier",				DataType.MULTILINE_VARCHAR,		None,		"Supplier of the product", None, None],
	["ARTICLE_NUMBER", 		"Supplier and storage",	"Art. Number",			DataType.MULTILINE_VARCHAR,		None,		"Article number of the product", None, None],
	["KIT", 				"Supplier and storage",	"Kit including",		DataType.MULTILINE_VARCHAR,		None,		"What the company includes with the enzyme", None, None],
	["STORAGE",				"Supplier and storage",	"Storage",				DataType.CONTROLLEDVOCABULARY,	"STORAGE",	"Storage conditions of the product", None, None],
	["XMLCOMMENTS",			"Comments",				"Comments List",		DataType.XML,					None,		"Several comments can be added by different users", commentsSampleScriptName, None],
	["ANNOTATIONS_STATE",	"Comments",				"Annotations State",	DataType.XML,					None,		"Annotations State", annotationsScriptName, None]
]);

annotationsScriptName = createAnnotationsScriptForType("MEDIA");
createSampleTypeWithProperties("MEDIA", "", [
	["NAME", 				"General",				"Name",					DataType.MULTILINE_VARCHAR,		None,			"Name", None, None],
	["FOR_WHAT", 			"General",				"For what",				DataType.MULTILINE_VARCHAR,		None,			"For what kind of experimental application/readout this sample is used in the lab", None, None],
	["ORGANISM", 			"General",				"Organism",				DataType.CONTROLLEDVOCABULARY,	"ORGANISM",		"For what organism this medium is used", None, None],
	["STORAGE", 			"Storage",				"Storage",				DataType.CONTROLLEDVOCABULARY,	"STORAGE",		"Storage conditions of the product", None, None],
	["STOCK_CONCENTRATION", "Storage",				"Stock concentration",	DataType.VARCHAR,				None,			"Stock concentration of the solution where the product is kept in the lab", None, None],
	["STERILIZATION", 		"Storage",				"Sterilization",		DataType.CONTROLLEDVOCABULARY,	"STERILIZATION","How the solution/buffer is sterilized when prepared", None, None],
	["PUBLICATION", 		"Comments",				"Publication",			DataType.MULTILINE_VARCHAR,		None,			"Publication from where the information was first found OR technical sheet given by the manufacturer", None, None],
	["NOTES", 				"Comments",				"Notes",				DataType.MULTILINE_VARCHAR,		None,			"Deatails for solution/buffer preparation", None, None],
	["XMLCOMMENTS", 		"Comments",				"Comments List",		DataType.XML,					None,			"Several comments can be added by different users", commentsSampleScriptName, None],
	["ANNOTATIONS_STATE",	"Comments",				"Annotations State",	DataType.XML,					None,			"Annotations State", annotationsScriptName, None]
]);

annotationsScriptName = createAnnotationsScriptForType("SOLUTION_BUFFER");
createSampleTypeWithProperties("SOLUTION_BUFFER", "", [
	["NAME", 				"General",				"Name",					DataType.MULTILINE_VARCHAR,		None,			"Name", None, None],
	["FOR_WHAT", 			"General",				"For what",				DataType.MULTILINE_VARCHAR,		None,			"For what kind of experimental application/readout this sample is used in the lab", None, None],
	["DETAILS", 			"Recipe",				"Details",				DataType.MULTILINE_VARCHAR,		None,			"Details and tips about how to prepare the solution/buffer", None, None],
	["STORAGE", 			"Storage",				"Storage",				DataType.CONTROLLEDVOCABULARY,	"STORAGE",		"Storage conditions of the product", None, None],
	["STOCK_CONCENTRATION", "Storage",				"Stock concentration",	DataType.VARCHAR,				None,			"Stock concentration of the solution where the product is kept in the lab", None, None],
	["STERILIZATION", 		"Storage",				"Sterilization",		DataType.CONTROLLEDVOCABULARY,	"STERILIZATION","How the solution/buffer is sterilized when prepared", None, None],
	["PUBLICATION", 		"Comments",				"Publication",			DataType.MULTILINE_VARCHAR,		None,			"Publication from where the information was first found OR technical sheet given by the manufacturer", None, None],
	["NOTES", 				"Comments",				"Notes",				DataType.MULTILINE_VARCHAR,		None,			"Notes", None, None],
	["XMLCOMMENTS", 		"Comments",				"Comments List",		DataType.XML,					None,			"Several comments can be added by different users", commentsSampleScriptName, None],
	["ANNOTATIONS_STATE",	"Comments",				"Annotations State",	DataType.XML,					None,			"Annotations State", annotationsScriptName, None]
]);

annotationsScriptName = createAnnotationsScriptForType("OLIGO");
createSampleTypeWithProperties("OLIGO", "", [
  ["NAME", 				"General",				"Name",			DataType.VARCHAR,				None,				"Target of the oligonucleotide", None, None],
	["DIRECTION", 				"Details",			"Direction",				DataType.CONTROLLEDVOCABULARY, "DIRECTION",			"Direction of the oligonucleotide", None, None],
	["RESTRICTION_ENZYME", 		"Details",			"Restriction Enzyme",		DataType.MULTILINE_VARCHAR,		None,				"Restriction sites in the oligonucleotide", None, None],
	["MODIFICATIONS", 			"Details",			"Modifications",			DataType.MULTILINE_VARCHAR,		None,				"Modifications of the ordered oligonucleotide", None, None],
	["SEQUENCE", 				"Details",			"Sequence",					DataType.MULTILINE_VARCHAR,		None,				"Sequence of the oligonucleotide", None, None],
	["XMLCOMMENTS", 			"Comments",			"Comments List",			DataType.XML,					None,				"Several comments can be added by different users", commentsSampleScriptName, None],
	["ANNOTATIONS_STATE",		"Comments",			"Annotations State",		DataType.XML,					None,				"Annotations State", annotationsScriptName, None]
]);

annotationsScriptName = createAnnotationsScriptForType("RNA");
createSampleTypeWithProperties("RNA", "", [
	["NAME", 				"General",				"Name of RNA",			DataType.VARCHAR,				None,				"Name of the RNA: species/number/strand", None, None],
	["TARGET", 					"General",				"Target of the RNA",	DataType.VARCHAR,				None,				"Target of the oligonucleotide", None, None],
	["TYPE", 					"General",				"Type of RNA",			DataType.CONTROLLEDVOCABULARY,	"RNA_TYPE",			"Type of RNA in terms of function: mimic of RNAi or inhibitor of RNAi", None, None],
	["STRAND", 					"Details",				"Strand",				DataType.CONTROLLEDVOCABULARY,	"STRAND",			"Double or single strand RNA", None, None],
	["BACKBONE_TYPE", 			"Details",				"Backbone type",		DataType.CONTROLLEDVOCABULARY,	"RNA_BACKBONE",		"Type of backbone, modifications in the backbone", None, None],
	["MODIFICATIONS", 			"Details",				"Modifications",		DataType.VARCHAR,				None,				"Modifications of the ordered oligonucleotide", None, None],
	["SEQUENCE", 				"Details",				"Sequence",				DataType.MULTILINE_VARCHAR,		None,				"Sequence of the oligonucleotide", None, None],
	["SUPPLIER", 				"Supplier and storage",	"Supplier",				DataType.MULTILINE_VARCHAR,		None,				"Supplier of the product", None, None],
	["ARTICLE_NUMBER", 			"Supplier and storage",	"Art. Number",			DataType.MULTILINE_VARCHAR,		None,				"Article number of the product", None, None],
	["STORAGE", 				"Supplier and storage",	"Storage",				DataType.CONTROLLEDVOCABULARY,	"STORAGE",			"Storage conditions of the product", None, None],
	["PUBLICATION", 			"Comments",				"Publication",			DataType.MULTILINE_VARCHAR,		None,				"Publication from where the information was first found OR technical sheet given by the manufacturer", None, None],
	["XMLCOMMENTS", 			"Comments",				"Comments List",		DataType.XML,					None,				"Several comments can be added by different users", commentsSampleScriptName, None],
	["ANNOTATIONS_STATE",		"Comments",				"Annotations State",	DataType.XML,					None,				"Annotations State", annotationsScriptName, None]
]);

annotationsScriptName = createAnnotationsScriptForType("PLASMID");
createSampleTypeWithProperties("PLASMID", "", [
	["NAME", 					"General",				"Plasmid",							DataType.VARCHAR,				None,								"Plasmid name", None, None],
	["OWNER", 							"General",				"Owner",							DataType.CONTROLLEDVOCABULARY,	"OWNER",							"Who produced/owned the sample", None, None],
	["OWNER_NUMBER", 					"General",				"Owner number",						DataType.MULTILINE_VARCHAR,		None,								"Owner number", None, None],
	["BACKBONE", 						"Details",				"Backbone",							DataType.CONTROLLEDVOCABULARY,	"BACKBONE",							"Backbone of the plasmid", None, None],
	["BACTERIAL_ANTIBIOTIC_RESISTANCE", "Details",				"Bacterial Antibiotic Resistance",	DataType.CONTROLLEDVOCABULARY,	"BACTERIAL_ANTIBIOTIC_RESISTANCE",	"Bacterial antibiotic resistance", None, None],
	["MARKER", 							"Details",				"Marker",							DataType.CONTROLLEDVOCABULARY,	"MARKER",							"Marker to select the strain/cell line after transformation/transfection", None, None],
	["OTHER_MARKER", 					"Details",				"Other Marker",						DataType.VARCHAR,				None,								"Other marker useful for selection", None, None],
	["FLANKING_RESTRICTION_ENZYMES", 	"Details",				"Flanking Restriction Enzymes",		DataType.VARCHAR,				None,								"Restriction enzymes sites flanking the insert of the plasmid", None, None],
	["OLIGOS_TEMPLATE", 				"Details",				"Oligos and template",				DataType.MULTILINE_VARCHAR,		None,								"Oligos and template used to clone the single parts of the plasmid", None, None],
	["SOURCE", 							"Origin",				"Source",							DataType.VARCHAR,				None,								"Source from where the construct/strain/cell line obtained or purchased, if it was not produced in the lab", None, None],
	["PUBLICATION", 					"Comments",				"Publication",						DataType.MULTILINE_VARCHAR,		None,								"Publication from where the information was first found OR technical sheet given by the manufacturer", None, None],
	["NOTES", 							"Comments", 			"Notes",							DataType.MULTILINE_VARCHAR,		None,								"Notes", None, None],
	["XMLCOMMENTS", 					"Comments",				"Comments List",					DataType.XML,					None,								"Several comments can be added by different users", commentsSampleScriptName, None],
	["ANNOTATIONS_STATE",				"Comments",				"Annotations State",				DataType.XML,					None,								"Annotations State", annotationsScriptName, None]
]);

annotationsScriptName = createAnnotationsScriptForType("BACTERIA");
createSampleTypeWithProperties("BACTERIA", "", [
	["NAME", 			"General",				"Bacteria strain name",				DataType.VARCHAR,				None,								"Bacterial strain name", None, None],
	["OWNER", 							"General",				"Owner",							DataType.CONTROLLEDVOCABULARY,	"OWNER",							"Who produced/owned the sample", None, None],
	["OWNER_NUMBER", 					"General",				"Owner number",						DataType.MULTILINE_VARCHAR,		None,								"Owner number", None, None],
	["GENETIC_MODIFICATION", 			"Genotype",				"Genetic modifications",			DataType.MULTILINE_VARCHAR,		None,								"Genetic modifications composed by the Plasmid ancestors", None, genotypeSampleScriptName],
	["BACTERIA_GENOTYPE", 				"Genotype",				"Bacteria genotype",				DataType.MULTILINE_VARCHAR,		None,								"Bacterial genotype", None, None],
	["MARKERS", 						"Genotype",				"Markers",							DataType.MULTILINE_VARCHAR,		None,								"Markers available in the strain for further genetic modifications", None, None],
	["ORIGIN", 							"Origin",				"Origin",							DataType.CONTROLLEDVOCABULARY,	"ORIGIN",							"How the strain/cell line was produced", None, None],
	["STRAIN_CHECK", 					"Origin",				"Strain Check",						DataType.CONTROLLEDVOCABULARY,	"CHECK",							"Check done to verify the modifications introduced in the strain", None, None],
	["SOURCE", 							"Origin",				"Source",							DataType.VARCHAR,				None,								"Source from where the construct/strain/cell line obtained or purchased, if it was not produced in the lab", None, None],
	["PUBLICATION", 					"Comments",				"Publication",						DataType.MULTILINE_VARCHAR,		None,								"Publication from where the information was first found OR technical sheet given by the manufacturer", None, None],
	["NOTES", 							"Comments", 			"Notes",							DataType.MULTILINE_VARCHAR,		None,								"Notes", None, None],
	["XMLCOMMENTS", 					"Comments",				"Comments List",					DataType.XML,					None,								"Several comments can be added by different users", commentsSampleScriptName, None],
	["ANNOTATIONS_STATE",				"Comments",				"Annotations State",				DataType.XML,					None,								"Annotations State", annotationsScriptName, None]
]);

annotationsScriptName = createAnnotationsScriptForType("YEAST");
createSampleTypeWithProperties("YEAST", "", [
	["NAME", 							"General",				"Yeast strain name",					DataType.MULTILINE_VARCHAR,		None,								"Yeast strain name", None, None],
	["OWNER", 							"General",				"Owner",								DataType.CONTROLLEDVOCABULARY,	"OWNER",							"Who produced/owned the sample", None, None],
	["OWNER_NUMBER", 					"General",				"Owner number",							DataType.MULTILINE_VARCHAR,		None,								"Owner number", None, None],
	["GENETIC_MODIFICATION", 			"Genotype",				"Genetic modifications",				DataType.MULTILINE_VARCHAR,		None,								"Genetic modifications composed by the Plasmid ancestors", None, genotypeSampleScriptName],
	["GENETIC_BACKGROUND", 				"Genotype",				"Genetic Background",					DataType.CONTROLLEDVOCABULARY,	"GENETIC_BACKGROUND",				"Genetic background of the yeast strain", None, None],
	["MATING_TYPE", 					"Genotype",				"Mating Type",							DataType.CONTROLLEDVOCABULARY,	"MATING_TYPE",						"Mating type or ploidy of the yeast strain", None, None],
	["BACKGROUND-SPECIFIC_MARKERS", 	"Genotype",				"Background-specific markers",			DataType.CONTROLLEDVOCABULARY,	"BACKGROUND_SPECIFIC_MARKERS",		"Background-specific markers available in the strain for further genetic modifications", None, None],
	["COMMON_MARKERS", 					"Genotype",				"Common markers",						DataType.CONTROLLEDVOCABULARY,	"COMMON_MARKERS",					"Common markers available in the strain for further genetic modifications", None, None],
	["ENDOGENOUS_PLASMID", 				"Genotype",				"Endogenous 2micron plasmid in yeast",	DataType.CONTROLLEDVOCABULARY,	"ENDOGENOUS_PLASMID",				"Presence of an endogenous cir 2micron plasmid", None, None],
	["ORIGIN", 							"Origin",				"Origin",								DataType.CONTROLLEDVOCABULARY,	"ORIGIN",							"How the strain/cell line was produced", None, None],
	["STRAIN_CHECK", 					"Origin",				"Strain Check",							DataType.CONTROLLEDVOCABULARY,	"CHECK",							"Check done to verify the modifications introduced in the strain", None, None],
	["SOURCE", 							"Origin",				"Source",								DataType.VARCHAR,				None,								"Source from where the construct/strain/cell line obtained or purchased, if it was not produced in the lab", None, None],
	["PUBLICATION", 					"Comments",				"Publication",							DataType.MULTILINE_VARCHAR,		None,								"Publication from where the information was first found OR technical sheet given by the manufacturer", None, None],
	["NOTES", 							"Comments", 			"Notes",								DataType.MULTILINE_VARCHAR,		None,								"Notes", None, None],
	["XMLCOMMENTS", 					"Comments",				"Comments List",						DataType.XML,					None,								"Several comments can be added by different users", commentsSampleScriptName, None],
	["ANNOTATIONS_STATE",				"Comments",				"Annotations State",					DataType.XML,					None,								"Annotations State", annotationsScriptName, None]
]);

annotationsScriptName = createAnnotationsScriptForType("CELL_LINE");
createSampleTypeWithProperties("CELL_LINE", "", [
	["NAME", 					"General",				"Cell line name",						DataType.VARCHAR,				None,								"Name of the cell line", None, None],
	["OWNER", 							"General",				"Owner",								DataType.CONTROLLEDVOCABULARY,	"OWNER",							"Who produced/owned the sample", None, None],
	["OWNER_NUMBER", 					"General",				"Owner number",							DataType.MULTILINE_VARCHAR,		None,								"Owner number", None, None],
	["GENETIC_MODIFICATION", 			"Genotype",				"Genetic modifications",				DataType.MULTILINE_VARCHAR,		None,								"Genetic modifications composed by the Plasmid ancestors", None, genotypeSampleScriptName],
	["SPECIES", 						"Genotype",				"Species",								DataType.CONTROLLEDVOCABULARY,	"SPECIES",							"Species to which the cell line belongs", None, None],
	["CELL_TYPE", 						"Genotype",				"Cell type",							DataType.CONTROLLEDVOCABULARY,	"CELL_TYPE",						"Cell type of the cell line", None, None],
	["ORIGIN", 							"Origin",				"Origin",								DataType.CONTROLLEDVOCABULARY,	"ORIGIN",							"How the strain/cell line was produced", None, None],
	["CLONE_NO", 						"Origin",				"Clone #",								DataType.INTEGER,				None,								"Clone number", None, None],
	["CHECK", 							"Origin",				"Check",								DataType.CONTROLLEDVOCABULARY,	"CHECK",							"Check done to verify the modifications introduced in the cell line", None, None],
	["CREATION_DATE", 					"Origin",				"Creation date",						DataType.TIMESTAMP,				None,								"Creation date of the cell line", None, None],
	["MODIFICATION_DATE", 				"Origin",				"Modification date",					DataType.TIMESTAMP,				None,								"Modification date of the cell line", None, None],
	["FREEZING_DATE", 					"Origin",				"Freezing date",						DataType.TIMESTAMP,				None,								"Freezing date (if more than one, add the latest)", None, None],
	["SOURCE", 							"Origin",				"Source",								DataType.VARCHAR,				None,								"Source from where the construct/strain/cell line obtained or purchased, if it was not produced in the lab", None, None],
	["MEDIUM", 							"Cultivation",			"Medium",								DataType.CONTROLLEDVOCABULARY,	"CELL_MEDIUM",						"Medium used to cultivate or manipulate the cell line", None, None],
	["GROWTH_TEMP", 					"Cultivation",			"Growth temp. ( &deg;C)",				DataType.INTEGER,				None,								"Growth temperature of the cell line", None, None],
	["CELL_CO2", 						"Cultivation",			"% CO2",								DataType.INTEGER,				None,								"Percentage of CO2 needed for the cultivation of the cell line", None, None],
	["SELECTION_MARKER", 				"Cultivation",			"Selection marker",						DataType.VARCHAR,				None,								"Special medium components or selection needed for the cell line", None, None],
	["MYCOPLASM", 						"Cultivation",			"Mycoplasm tested",						DataType.CONTROLLEDVOCABULARY,	"YES_NO_CHOICE",							"Mycoplasm tested", None, None],
	["PUBLICATION", 					"Comments",				"Publication",							DataType.MULTILINE_VARCHAR,		None,								"Publication from where the information was first found OR technical sheet given by the manufacturer", None, None],
	["NOTES", 							"Comments", 			"Notes",								DataType.MULTILINE_VARCHAR,		None,								"Notes", None, None],
	["XMLCOMMENTS", 					"Comments",				"Comments List",						DataType.XML,					None,								"Several comments can be added by different users", commentsSampleScriptName, None],
	["ANNOTATIONS_STATE",				"Comments",				"Annotations State",					DataType.XML,					None,								"Annotations State", annotationsScriptName, None]
]);

annotationsScriptName = createAnnotationsScriptForType("FLY");
createSampleTypeWithProperties("FLY", "", [
	["NAME", 				"General",				"Fly strain name",						DataType.VARCHAR,				None,								"Fly strain name", None, None],
	["OWNER", 							"General",				"Owner",								DataType.CONTROLLEDVOCABULARY,	"OWNER",							"Who produced/owned the sample", None, None],
	["OWNER_NUMBER", 					"General",				"Owner number",							DataType.MULTILINE_VARCHAR,		None,								"Owner number", None, None],
	["GENETIC_MODIFICATION", 			"Genotype",				"Genetic modifications",				DataType.MULTILINE_VARCHAR,		None,								"Genetic modifications composed by the Plasmid ancestors", None, genotypeSampleScriptName],
	["FLY_GENOTYPE", 					"Genotype",				"Genotype",								DataType.VARCHAR,				None,								"Genotype of the fly", None, None],
	["ASSOCIATED_GENE", 				"Genotype",				"Associated gene",						DataType.VARCHAR,				None,								"The transgene may contain regulatory or coding sequences from an endogenous gene", None, None],
	["MARKERS", 						"Genotype",				"Markers",								DataType.VARCHAR,				None,								"Markers available in the strain for further genetic modifications", None, None],
	["ORIGIN", 							"Origin",				"Origin",								DataType.CONTROLLEDVOCABULARY,	"ORIGIN",							"How the strain/cell line was produced", None, None],
	["STRAIN_CHECK", 					"Origin",				"Strain Check",							DataType.CONTROLLEDVOCABULARY,	"CHECK",							"Check done to verify the modifications introduced in the strain", None, None],
	["SOURCE", 							"Origin",				"Source",								DataType.VARCHAR,				None,								"Source from where the construct/strain/cell line obtained or purchased, if it was not produced in the lab", None, None],
	["MATING_PARTNERS", 				"Comments",				"Mating partners",						DataType.MULTILINE_VARCHAR,		None,								"Features needed for the mating partners", None, None],
	["PUBLICATION", 					"Comments",				"Publication",							DataType.MULTILINE_VARCHAR,		None,								"Publication from where the information was first found OR technical sheet given by the manufacturer", None, None],
	["NOTES", 							"Comments", 			"Notes",								DataType.MULTILINE_VARCHAR,		None,								"Notes", None, None],
	["XMLCOMMENTS", 					"Comments",				"Comments List",						DataType.XML,					None,								"Several comments can be added by different users", commentsSampleScriptName, None],
	["ANNOTATIONS_STATE",				"Comments",				"Annotations State",					DataType.XML,					None,								"Annotations State", annotationsScriptName, None]
]);

addPropertiesToSamples([
	"ANTIBODY",
	"BACTERIA",
	"CHEMICAL",
	"ENZYME",
	"CELL_LINE",
	"FLY",
	"MEDIA",
	"OLIGO",
	"PLASMID",
	"YEAST",
	"SOLUTION_BUFFER",
	"RNA"
	],[
	["STORAGE_NAMES",		"Physical Storage",		"Storage Name",			DataType.CONTROLLEDVOCABULARY,		"STORAGE_NAMES",	"Storage Name", None, None],
	["STORAGE_ROW",			"Physical Storage",		"Storage Row",			DataType.INTEGER,					None,				"Storage Row", None, None],
	["STORAGE_COLUMN",		"Physical Storage",		"Storage Column",		DataType.INTEGER,					None,				"Storage Column", None, None],
	["STORAGE_BOX_NAME",	"Physical Storage",		"Storage Box Name",		DataType.VARCHAR,					None,				"Storage Box Name", None, None],
	["STORAGE_BOX_SIZE",	"Physical Storage",		"Storage Box Size",		DataType.CONTROLLEDVOCABULARY,		"STORAGE_BOX_SIZE",	"Storage Box Size", None, None],
	["STORAGE_USER",		"Physical Storage",		"Storage User Id",		DataType.VARCHAR,					None,				"Storage User Id", None, None],
	["STORAGE_POSITION",	"Physical Storage",		"Storage Position",		DataType.VARCHAR,					None,				"Storage Position", None, None]
]);

##
## Sample Types - Non Materials
##

annotationsScriptName = createAnnotationsScriptForType("EXPERIMENTAL_STEP");
createSampleTypeWithProperties("EXPERIMENTAL_STEP", "", [
	["NAME", 							"General",				"Name",									DataType.MULTILINE_VARCHAR,		None,								"Name", None, None],
	["OWNER", 							"General",				"Owner",								DataType.CONTROLLEDVOCABULARY,	"OWNER",							"Who produced/owned the sample", None, None],
	["EXPERIMENTAL_GOALS", 				"General",				"Experimental Goals",					DataType.MULTILINE_VARCHAR,		None,								"Goal of the experiment", None, None],
	["EXPERIMENTAL_RESULTS", 			"General",				"Experimental Results",					DataType.MULTILINE_VARCHAR,		None,								"Brief summary of the results obtained", None, None],
	["START_DATE", 			"General",				"Start date",					DataType.TIMESTAMP,		None,								"Date when the experimental step is started", None, None],
	["END_DATE", 			"General",				"End date",					DataType.TIMESTAMP,		None,								"Date when the experimental step is completed", None, None],
	["EXPERIMENTAL_READOUT", 			"Readout details",		"Experimental readout",					DataType.CONTROLLEDVOCABULARY,	"EXPERIMENTAL_READOUT",				"Experimental readout used in the experiment", None, None],
	["MACHINE", 						"Readout details",		"Machine",								DataType.CONTROLLEDVOCABULARY,	"MACHINE",							"Machine used to perform the experiment", None, None],
	["FREEFORM_TABLE_STATE", 			"Readout details",		"Freeform Table State",					DataType.MULTILINE_VARCHAR,		None,								"Table describing how the order of samples measured in the experiments", None, None],
	["PUBLICATION", 					"Comments",				"Publication",							DataType.MULTILINE_VARCHAR,		None,								"Publication from where the information was first found OR technical sheet given by the manufacturer", None, None],
	["NOTES", 							"Comments", 			"Notes",								DataType.MULTILINE_VARCHAR,		None,								"Notes", None, None],
	["XMLCOMMENTS", 					"Comments",				"Comments List",						DataType.XML,					None,								"Several comments can be added by different users", commentsSampleScriptName, None],
	["ANNOTATIONS_STATE",				"Comments",				"Annotations State",					DataType.XML,					None,								"Annotations State", annotationsScriptName, None]
]);

annotationsScriptName = createAnnotationsScriptForType("GENERAL_PROTOCOL");
createSampleTypeWithProperties("GENERAL_PROTOCOL", "", [
	["NAME", 					"General",			"Name",						DataType.MULTILINE_VARCHAR,		None,				"Name", None, None],
	["FOR_WHAT", 				"General",			"For what",					DataType.MULTILINE_VARCHAR,		None,				"For what kind of experimental application/readout this sample is used in the lab", None, None],
	["PROTOCOL_TYPE", 			"General",			"Protocol type",			DataType.CONTROLLEDVOCABULARY,	"PROTOCOL_TYPE",	"Category a protocol belongs", None, None],
	["MATERIALS", 				"Materials",		"Materials",				DataType.MULTILINE_VARCHAR,		None,				"Machines (and relative set up), special labware required for the protocol.", None, None],
	["TIME_REQUIREMENT", 		"Method",			"Time requirement",			DataType.MULTILINE_VARCHAR,		None,				"Time required to complete a protocol", None, None],
	["PROCEDURE",				"Method", 			"Procedure",				DataType.MULTILINE_VARCHAR,		None,				"Procedure required by the protocol by points (1,2,3,...)", None, None],
	["PROTOCOL_EVALUATION", 	"Method",			"Protocol evaluation",		DataType.MULTILINE_VARCHAR,		None,				"Parameters and observations to meet the minimal efficiency of the protocol", None, None],
	["SUGGESTIONS", 			"Comments",			"Suggestions",				DataType.MULTILINE_VARCHAR,		None,				"Suggestions for the protocol", None, None],
	["PROTOCOL_MODIFICATIONS", 	"Comments",			"Protocol modifications",	DataType.MULTILINE_VARCHAR,		None,				"Alternative procedures used to make protocol variations", None, None],
	["PUBLICATION", 			"Comments",			"Publication",				DataType.MULTILINE_VARCHAR,		None,				"Publication from where the information was first found OR technical sheet given by the manufacturer", None, None],
	["XMLCOMMENTS", 			"Comments",			"Comments List",			DataType.XML,					None,				"Several comments can be added by different users", commentsSampleScriptName, None],
	["ANNOTATIONS_STATE",		"Comments",			"Annotations State",		DataType.XML,					None,				"Annotations State", annotationsScriptName, None]
]);

annotationsScriptName = createAnnotationsScriptForType("PCR_PROTOCOL");
createSampleTypeWithProperties("PCR_PROTOCOL", "", [
	["NAME", 					"General",			"Name",						DataType.MULTILINE_VARCHAR,		None,				"Name", None, None],
	["FOR_WHAT", 				"General",			"For what",					DataType.MULTILINE_VARCHAR,		None,				"For what kind of experimental application/readout this sample is used in the lab", None, None],
	["TEMPLATE", 				"General",			"Template",					DataType.CONTROLLEDVOCABULARY,	"TEMPLATE",			"Type of template used in the PCR protocol", None, None],
	["REACTION_MIX", 			"Materials",		"Reaction mix",				DataType.MULTILINE_VARCHAR,		None,				"Reaction mix recipe for the PCR", None, None],
	["THERMOCYCLER_PROTOCOL", 	"Method",			"Thermocycler protocol",	DataType.MULTILINE_VARCHAR,		None,				"Thermocycler protocol for PCR", None, None],
	["PROTOCOL_EVALUATION", 	"Method",			"Protocol evaluation",		DataType.MULTILINE_VARCHAR,		None,				"Parameters and observations to meet the minimal efficiency of the protocol", None, None],
	["SUGGESTIONS", 			"Comments",			"Suggestions",				DataType.MULTILINE_VARCHAR,		None,				"Suggestions for the protocol", None, None],
	["PROTOCOL_MODIFICATIONS", 	"Comments",			"Protocol modifications",	DataType.MULTILINE_VARCHAR,		None,				"Alternative procedures used to make protocol variations", None, None],
	["PUBLICATION", 			"Comments",			"Publication",				DataType.MULTILINE_VARCHAR,		None,				"Publication from where the information was first found OR technical sheet given by the manufacturer", None, None],
	["XMLCOMMENTS", 			"Comments",			"Comments List",			DataType.XML,					None,				"Several comments can be added by different users", commentsSampleScriptName, None],
	["ANNOTATIONS_STATE",		"Comments",			"Annotations State",		DataType.XML,					None,				"Annotations State", annotationsScriptName, None]
]);

annotationsScriptName = createAnnotationsScriptForType("WESTERN_BLOTTING_PROTOCOL");
createSampleTypeWithProperties("WESTERN_BLOTTING_PROTOCOL", "", [
	["NAME", 					"General",			"Name",						DataType.MULTILINE_VARCHAR,		None,				"Name", None, None],
	["FOR_WHAT", 				"General",			"For what",					DataType.MULTILINE_VARCHAR,		None,				"For what kind of experimental application/readout this sample is used in the lab", None, None],
	["STORAGE", 				"General", 			"Storage",					DataType.CONTROLLEDVOCABULARY,	"STORAGE",			"Storage conditions of the product", None, None],
	["MEMBRANE", 				"Materials", 		"Membrane",					DataType.CONTROLLEDVOCABULARY,	"MEMBRANE",			"Membrane used for western blotting", None, None],
	["PUBLICATION", 			"Comments", 		"Publication",				DataType.MULTILINE_VARCHAR,		None,				"Publication from where the information was first found OR technical sheet given by the manufacturer", None, None],
	["NOTES", 					"Comments", 		"Notes",					DataType.MULTILINE_VARCHAR,		None,				"Notes", None, None],
	["XMLCOMMENTS", 			"Comments",			"Comments List",			DataType.XML,					None,				"Several comments can be added by different users", commentsSampleScriptName, None],
	["ANNOTATIONS_STATE",		"Comments",			"Annotations State",		DataType.XML,					None,				"Annotations State", annotationsScriptName, None]
]);