#
# Copyright 2014 ETH Zuerich, Scientific IT Services
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##
## Configuration
##
#PATH_TO_MANAGE_PROPERTIES_SCRIPTS = "/Users/juanf/Documents/workspace/openbis/source/core-plugins/newbrowser/1/compatibility/";
PATH_TO_MANAGE_PROPERTIES_SCRIPTS = None;

# MasterDataRegistrationTransaction Class
import os
import ch.systemsx.cisd.openbis.generic.server.jython.api.v1.DataType as DataType

##
## Globals
##
vocabulariesCache = {};
propertiesCache = {};
samplesCache = {};
tr = service.transaction()

##
## API Facade
##
def createVocabularyWithTerms(vocabularyCode, terms):
	vocabulary = tr.createNewVocabulary(vocabularyCode);
	addTerms(vocabulary, terms);
	vocabulariesCache[vocabularyCode] = vocabulary;
	
def addTerms(vocabulary, terms):
	for term in terms:
		addTermWithLabel(vocabulary, term[0], term[1])
	
def addTermWithLabel(vocabulary, termCode, termLabel):
	newTerm = tr.createNewVocabularyTerm(termCode);
	newTerm.setLabel(termLabel);
	vocabulary.addTerm(newTerm);
	
def createSampleTypeWithProperties(sampleTypeCode, description, properties):
	newSampleType = tr.getOrCreateNewSampleType(sampleTypeCode);
	newSampleType.setDescription(description);
	newSampleType.setAutoGeneratedCode(True);
	newSampleType.setGeneratedCodePrefix(sampleTypeCode[:3]);
	addProperties(newSampleType, properties);
	samplesCache[sampleTypeCode] = newSampleType;
	
def createDataSetTypeWithProperties(dataSetCode, kind, description, properties):
	newDataSet = tr.getOrCreateNewDataSetType(dataSetCode);
	newDataSet.setDataSetKind(kind);
	newDataSet.setDescription(description);
	addProperties(newDataSet, properties);
	
def createExperimentTypeWithProperties(experimentTypeCode, description, properties):
	newExperiment = tr.getOrCreateNewExperimentType(experimentTypeCode);
	newExperiment.setDescription(description);
	addProperties(newExperiment, properties);

def addPropertiesToSamples(sampleTypeCodes, properties):
	for sampleTypeCode in sampleTypeCodes:
		sampleType = samplesCache[sampleTypeCode];
		addProperties(sampleType, properties);
	
def addProperties(entity, properties):
	for property in properties:
		addProperty(entity, property[0], property[1], property[2], property[3], property[4], property[5], property[6]);
	
def addProperty(entity, propertyCode, section, propertyLabel, dataType, vocabularyCode, propertyDescription, managedScript):
	property = None;
	
	if propertyCode in propertiesCache:
		property = propertiesCache[propertyCode];
	else:
		property = createProperty(propertyCode, dataType, propertyLabel, propertyDescription, vocabularyCode);
	
	propertyAssignment = tr.assignPropertyType(entity, property);
	propertyAssignment.setSection(section);
	if managedScript != None:
		propertyAssignment.setManaged(True);
		propertyAssignment.setScriptName(managedScript);

def createProperty(propertyCode, dataType, propertyLabel, propertyDescription, vocabularyCode):
	property = tr.getOrCreateNewPropertyType(propertyCode, dataType);
	property.setDescription(propertyDescription);
	property.setLabel(propertyLabel);
	propertiesCache[propertyCode] = property;
	if dataType == DataType.CONTROLLEDVOCABULARY:
		property.setVocabulary(vocabulariesCache[vocabularyCode]);
	return property;

##
## Manage properties scripts
##
annotationsScriptName = None;
commentsScriptName = None;

if PATH_TO_MANAGE_PROPERTIES_SCRIPTS != None:
	annotationsScriptName = "ANNOTATIONS";
	annotationsScriptAsString = open(PATH_TO_MANAGE_PROPERTIES_SCRIPTS + "managed.py", 'r').read();
	annotationsScript = tr.getOrCreateNewScript(annotationsScriptName);
	annotationsScript.setName("Annotations");
	annotationsScript.setDescription("Annotations Handler");
	annotationsScript.setScript(annotationsScriptAsString);
	annotationsScript.setScriptType("MANAGED_PROPERTY");
	annotationsScript.setEntityForScript("SAMPLE");
	
	commentsScriptName = "COMMENTS";
	commentsScriptAsString = open(PATH_TO_MANAGE_PROPERTIES_SCRIPTS + "comments.py", 'r').read();
	commentsScript = tr.getOrCreateNewScript(commentsScriptName);
	commentsScript.setName("Comments");
	commentsScript.setDescription("Comments Handler");
	commentsScript.setScript(commentsScriptAsString);
	commentsScript.setScriptType("MANAGED_PROPERTY");
	commentsScript.setEntityForScript("SAMPLE");

##
## Vocabulary Types
##
createVocabularyWithTerms("HOST", [
										["MOUSE", "mouse"],
										["RAT", "rat"],
										["GUINEA_PIG", "guinea pig"],
										["RABBIT", "rabbit"],
										["DONKEY", "donkey"]
									]);

createVocabularyWithTerms("DETECTION", [
										["HRP", "horseradish peroxydase"],
										["FLUORESCENCE", "fluorescent probe"]
									]);

createVocabularyWithTerms("STORAGE", [
										["RT", "room temperature"],
										["4", "+4 degrees"],
										["-20", "-20 degrees"],
										["-80", "-80 degrees"]
									]);

createVocabularyWithTerms("CLONALITY", [
										["MONOCLONAL", "monoclonal"],
										["POLYCLONAL", "polyclonal"],
										["UNKNOWN", "unknown"]
									]);

createVocabularyWithTerms("BACKBONE", [
										["PBLUESCRIPT_II_KS_PLUS", "pBluescript II KS +"],
										["PBSN", "pBSN"],
										["PSPPOLY_A", "pSPpoly(A)"],
										["PKERG10Y", "pKERG10y"],
										["PRS30Y", "pRS30y"],
										["PRS31Y", "pRS31y"],
										["PRS40Y", "pRS40y"],
										["PRS41Y", "pRS41y"],
										["PRS42Y", "pRS42y"],
										["PET22B", "pET22b"],
										["UNKNOWN", "unknown"],
										["PFA6", "pFA6"],
										["PGEX4T1", "pGEX4T1"],
										["PEG202", "pEG202"],
										["PJEXPRESS", "pJexpress"],
										["PJEXPRESS2", "pJexpress2"],
										["POLYLYS-PJEXPRESS2", "polyLys-pJexpress2"],
										["OSER", "OSER"]
									]);

createVocabularyWithTerms("BACTERIAL_ANTIBIOTIC_RESISTANCE", [
										["BLA", "bla"],
										["KAN", "kan"],
										["CAM", "cam"]
									]);

createVocabularyWithTerms("MARKER", [
										["URA3", "URA3"],
										["HIS3", "HIS3"],
										["LEU2", "LEU2"],
										["TRP1", "TRP1"],
										["MET15", "MET15"],
										["LYS2", "LYS2"],
										["ADE1", "ADE1"],
										["KANMX", "KanMX"],
										["NATMX", "NatMX"],
										["HYGMX", "HygMX"],
										["URA3MX", "Ura3MX"],
										["HIS3MX", "His3MX"],
										["BAR", "bar"],
										["CY_1", "Cy1"],
										["E_1", "e1"],
										["SB_1", "Sb1"],
										["W_1", "w1"],
										["Y1", "y1"],
									]);

createVocabularyWithTerms("STERILIZATION", [
										["AUTOCLAVATION", "autoclavation"],
										["FILTRATION", "filtration"],
										["NONE", "none"]
									]);

createVocabularyWithTerms("GENETIC_BACKGROUND", [
										["BY4743", "BY4743"],
										["BY4741", "BY4741"],
										["BY4742", "BY4742"],
										["CEN.PK2-1C", "CEN.PK2-1C"],
										["CEN.PK2-1D", "CEN.PK2-1D"],
										["CEN.PK2", "CEN.PK2"],
										["W303", "W303"],
										["W303-1A", "W303-1A"],
										["W303-1B", "W303-1B"],
										["S288C", "S288C"],
										["RM11", "RM11"],
										["RM11-A", "RM11-A"],
										["RM11-B", "RM11-B"],
										["UNKNOWN", "unknown"],
										["FY4", "FY4"]
									]);

createVocabularyWithTerms("MATING_TYPE", [
										["A", "a"],
										["ALPHA", "alpha"],
										["DIPLOID", "diploid"],
										["UNKNOWN", "unknown"]
									]);

createVocabularyWithTerms("BACKGROUND_SPECIFIC_MARKERS", [
										["MET15_LYS2", "met15- lys2-"],
										["MET15", "met15-"],
										["LYS2", "lys2-"],
										["TRP1_ADE2", "trp1- ade2-"],
										["TRP1", "trp1-"],
										["ADE2", "ade2-"],
										["MET15_TRP1", "met15- trp1-"],
										["HO_KAN", "ho::kanMX"],
										["NONE", "none"],
										["UNKNOWN", "unknown"],
										["MET15_LYS2_TRP1_ADE2", "met15- lys2- trp1- ade2-"],
										["LYS2_TRP1", "lys2- trp1-"],
										["MET15_LYS2_TRP1", "met15- lys2- trp1-"]
									]);

createVocabularyWithTerms("COMMON_MARKERS", [
										["URA3_HIS3_LEU2", "ura3- his3- leu2-"],
										["URA3_HIS3", "ura3- his3-"],
										["URA3_LEU2", "ura3- leu2-"],
										["URA3", "ura3-"],
										["HIS3_LEU2", "his3- leu2-"],
										["HIS3", "his3-"],
										["LEU2", "leu2-"],
										["NONE", "none"],
										["UNKNOWN", "unknown"]
									]);

createVocabularyWithTerms("ENDOGENOUS_PLASMID", [
										["CIR_PLUS", "cir+"],
										["CIR_ZERO", "cir0"],
										["UNKNOWN", "unknown"]
									]);

createVocabularyWithTerms("DIRECTION", [
										["FORWARD", "forward"],
										["REVERSE", "reverse"]
									]);

createVocabularyWithTerms("STRAND", [
										["DS", "double strand"],
										["SS", "single strand"]
									]);

createVocabularyWithTerms("RNA_TYPE", [
										["MIMIC", "mimic"],
										["INHIBITOR", "inhibitor"]
									]);

createVocabularyWithTerms("RNA_BACKBONE", [
										["LNA", "LNA"],
										["2_O_METHYL", "2-O-methylation"]
									]);

createVocabularyWithTerms("ORIGIN", [
										["CROSS", "cross"],
										["TRANSFORMATION", "transformation"],
										["SPORULATION", "transformation sporulation"],
										["NEGATIVE_SELECTION", "negative selection"],
										["TRANSFECTION", "transfection"]
									]);

createVocabularyWithTerms("CHECK", [
										["PCR", "PCR"],
										["MICROSCOPY", "microscopy"],
										["WB", "western blotting"],
										["SB", "southern blotting"],
										["PCR_MICROSCOPY", "PCR and microscopy"],
										["FLOWCYTOMETRY", "flow cytometry"],
										["PCR_FLOWCYTOMETRY", "PCR and flow cytometry"],
										["MORPHOLOGY", "morphology"],
										["OTHER", "other"],
										["NOTHING", "nothing"]
									]);

createVocabularyWithTerms("PROTOCOL_TYPE", [
										["DNA", "DNA method"],
										["RNA", "RNA method"],
										["PROTEINS", "proteins method"],
										["YEAST_BASICS", "yeast basic method"],
										["BACTERIA_BASICS", "bacteria basic method"],
										["FLUORESCENCE_MICROSCOPY", "fluorescence microscopy method"],
										["FLOW_CYTOMETRY", "flow cytometry method"],
										["CELL_SORTING", "cell sorting method"],
										["CELL_LINE_BASICS", "cell line basics"]
									]);

createVocabularyWithTerms("TEMPLATE", [
										["DNA", "DNA"],
										["RNA", "RNA"],
										["BACTERIA_COLONY", "bacteria colony"],
										["YEAST_COLONY", "yeast colony"]
									]);

createVocabularyWithTerms("YES_NO", [
										["YES", "yes"],
										["NO", "no"],
										["UNKNOWN", "unknown"]
									]);

createVocabularyWithTerms("MEMBRANE", [
										["PVDF", "PVDF"],
										["NITROCELLULOSE", "nitrocellulose"],
										["PVDF_NITROCELLULOSE", "Either PVDF or nitrocellulose"]
									]);

createVocabularyWithTerms("SPECIES", [
										["HOMO", "Homo sapiens"],
										["MOUSE", "Mus musculus"],
										["RAT", "Rattus norvegicus"],
										["PIG", "Sus scrofa"],
										["DROSOPHILA_MELANOGASTER", "Drosophila melanogaster"]
									]);

createVocabularyWithTerms("CELL_MEDIUM", [
										["RPMI", "rpmi"],
										["1640", "1640"],
										["ISCOVES", "iscoves"],
										["DMEM", "DMEM"],
										["DMEM_NUTRIENT_MIXTURE_F-12_HAM", "DMEM nutrient mixture F-12 HAM"],
										["DMEM_HIGH_GLUC", "DMEM high glucose"],
										["DMEM_LOW_GLUC", "DMEM low glucose"]
									]);

createVocabularyWithTerms("OWNER", [
										["FILL_ME_1", "Fill me with the people of your lab"],
										["FILL_ME_2", "Fill me with the people of your lab 2"]
									]);

createVocabularyWithTerms("CELL_TYPE", [
										["FIBROBLAST", "fibroblast"],
										["NEURON", "neuron"]
									]);

createVocabularyWithTerms("ORGANISM", [
										["BACTERIA", "Bacteria"],
										["BUDDING_YEAST", "Saccharomyces cerevisiae"],
										["MAMMALIAN", "mammalian"],
										["DROSOPHILA_MELANOGASTER", "Drosophila melanogaster"]
									]);

createVocabularyWithTerms("EXPERIMENTAL_READOUT", [
										["FLOW_CYTOMETRY", "flow citometry"],
										["SORTING", "cell sorting"],
										["GROWTH", "growth"],
										["WESTERN_BLOTTING", "western blottong"],
										["RT_QPCR", "RT-qPCR"]
									]);

createVocabularyWithTerms("MACHINE", [
										["LSRII_FORTESSA", "SRII Fortessa"],
										["TECAN_READER", "Tecan reader"],
										["BIOLECTOR", "BioLector"],
										["LICOR_ODYSSEY", "LI-COR Odyssey"],
										["TI_ECLIPSE", "TI Eclipse (Nikon)"],
										["SRX_101A", "Konica Minolta SRX-101A"],
										["LIGHT_CYCLER", "LightCycler 480"]
									]);

createVocabularyWithTerms("PLASMID_RELATIONSHIP", [
										["DELETION", "Deletion"],
										["INTEGRATION", "Integration"],
										["MODIFICATION", "Modification"],
										["OTHER", "Other"]
									]);

createVocabularyWithTerms("STORAGE_NAMES", [
										["BENCH", "Bench"],
										["DEFAULT_STORAGE", "Default Storage"]
									]);

##
## Property Types for annotations
##

createProperty("COMMENTS", DataType.VARCHAR, "Comments", "", None);
createProperty("QUANTITY", DataType.VARCHAR, "Quantity", "", None);
createProperty("PLASMID_ANNOTATION", DataType.VARCHAR, "Plasmid annotation", "", None);
createProperty("PLASMID_RELATIONSHIP", DataType.CONTROLLEDVOCABULARY, "Plasmid relationship", "", "PLASMID_RELATIONSHIP");

##
## DataSet Types
##
createDataSetTypeWithProperties("ELN_PREVIEW", "PHYSICAL", "ELN Preview image", []);

createDataSetTypeWithProperties("SEQ_FILE", "PHYSICAL", "", [
	["NOTES", "General information", "Notes", DataType.MULTILINE_VARCHAR, None, "Notes regarding the dataset", None],
]);

createDataSetTypeWithProperties("RAW_DATA", "PHYSICAL", "", [
	["NOTES", "General information", "Notes", DataType.MULTILINE_VARCHAR, None, "Notes regarding the dataset", None],
]);

##
## Experiment Types
##
createExperimentTypeWithProperties("ANTIBODY", "BOX TO HOLD SAMPLES OF THIS TYPE FOR ORGANIZATIONAL PURPOSES", []);
createExperimentTypeWithProperties("BACTERIA", "BOX TO HOLD SAMPLES OF THIS TYPE FOR ORGANIZATIONAL PURPOSES", []);
createExperimentTypeWithProperties("CHEMICAL", "BOX TO HOLD SAMPLES OF THIS TYPE FOR ORGANIZATIONAL PURPOSES", []);
createExperimentTypeWithProperties("ENZYME", "BOX TO HOLD SAMPLES OF THIS TYPE FOR ORGANIZATIONAL PURPOSES", []);
createExperimentTypeWithProperties("MEDIA", "BOX TO HOLD SAMPLES OF THIS TYPE FOR ORGANIZATIONAL PURPOSES", []);
createExperimentTypeWithProperties("OLIGO", "BOX TO HOLD SAMPLES OF THIS TYPE FOR ORGANIZATIONAL PURPOSES", []);
createExperimentTypeWithProperties("RNA", "BOX TO HOLD SAMPLES OF THIS TYPE FOR ORGANIZATIONAL PURPOSES", []);
createExperimentTypeWithProperties("PLASMID", "BOX TO HOLD SAMPLES OF THIS TYPE FOR ORGANIZATIONAL PURPOSES", []);
createExperimentTypeWithProperties("SOLUTION_BUFFER", "BOX TO HOLD SAMPLES OF THIS TYPE FOR ORGANIZATIONAL PURPOSES", []);
createExperimentTypeWithProperties("YEAST", "BOX TO HOLD SAMPLES OF THIS TYPE FOR ORGANIZATIONAL PURPOSES", []);
createExperimentTypeWithProperties("CELL_LINE", "BOX TO HOLD SAMPLES OF THIS TYPE FOR ORGANIZATIONAL PURPOSES", []);
createExperimentTypeWithProperties("FLY", "BOX TO HOLD SAMPLES OF THIS TYPE FOR ORGANIZATIONAL PURPOSES", []);

createExperimentTypeWithProperties("GENERAL_PROTOCOL", "BOX TO HOLD SAMPLES OF THIS TYPE FOR ORGANIZATIONAL PURPOSES", []);
createExperimentTypeWithProperties("PCR_PROTOCOL", "BOX TO HOLD SAMPLES OF THIS TYPE FOR ORGANIZATIONAL PURPOSES", []);
createExperimentTypeWithProperties("WESTERN_BLOTTING_PROTOCOL", "BOX TO HOLD SAMPLES OF THIS TYPE FOR ORGANIZATIONAL PURPOSES", []);

createExperimentTypeWithProperties("DEFAULT_EXPERIMENT", "Default Experiment", [
	["NAME", 				"General", "Name", 					DataType.VARCHAR, 			None,	"Name", None],
	["EXPERIMENTAL_GOALS", 	"General", "Experimental goals", 	DataType.MULTILINE_VARCHAR, None,	"Goal of the experiment", None],
	["GRANT", 				"General", "Grant", 				DataType.VARCHAR,			None,	"grant name", None],
	["START_DATE", 			"General", "Start Date", 			DataType.TIMESTAMP, 		None,	"Start Date", None],
	["END_DATE", 			"General", "End Date", 				DataType.TIMESTAMP,			None,	"End Date", None],
	["EXPERIMENTAL_RESULTS","General", "Experimental results", 	DataType.MULTILINE_VARCHAR, None,	"Brief summary of the results obtained", None],
	["XMLCOMMENTS",			"Comments","Comments List",			DataType.XML,				None,	"Several comments can be added by different users", commentsScriptName]
]);

##
## Sample Types - Materials
##

createSampleTypeWithProperties("ANTIBODY", "", [
	["NAME", 				"General", 				"Name", 				DataType.VARCHAR,				None,		"Name", None],
	["HOST", 				"General", 				"Host", 				DataType.CONTROLLEDVOCABULARY,	"HOST", 	"Host used to produce the antibody", None],
	["FOR_WHAT", 			"General", 				"For what", 			DataType.MULTILINE_VARCHAR,		None, 		"For what kind of experimental application/readout this sample is used in the lab", None],
	["DETECTION", 			"General", 				"Detection",			DataType.CONTROLLEDVOCABULARY,	"DETECTION","Protein detection system (fill in this information only for secondary antibodies)", None],
	["EPITOPE", 			"General", 				"Epitope",				DataType.MULTILINE_VARCHAR,		None, 		"Epitope of the antibody", None],
	["CLONALITY", 			"General", 				"Clonality",			DataType.CONTROLLEDVOCABULARY,	"CLONALITY","Clonality of the antibody", None],
	["ISOTYPE", 			"General", 				"Isotype", 				DataType.MULTILINE_VARCHAR,		None, 		"Isotype of the antibody", None],
	["SUPPLIER", 			"Supplier and storage", "Supplier",				DataType.MULTILINE_VARCHAR,		None, 		"Supplier of the product", None],
	["ARTICLE_NUMBER", 		"Supplier and storage", "Art. Number", 			DataType.MULTILINE_VARCHAR,		None, 		"Article number of the product", None],
	["STORAGE", 			"Supplier and storage", "Storage", 				DataType.CONTROLLEDVOCABULARY,	"STORAGE", 	"Storage conditions of the product", None],
	["STOCK_CONCENTRATION", "Supplier and storage", "Stock concentration", 	DataType.VARCHAR,				None, 		"Stock concentration of the solution where the product is kept in the lab", None],
	["PUBLICATION", 		"Comments", 			"Publication", 			DataType.MULTILINE_VARCHAR,		None, 		"Publication from where the information was first found OR technical sheet given by the manufacturer", None],
	["NOTES", 				"Comments", 			"Notes", 				DataType.MULTILINE_VARCHAR,		None, 		"Notes", None],
	["XMLCOMMENTS",			"Comments",				"Comments List",		DataType.XML,					None,		"Several comments can be added by different users", commentsScriptName],
	["ANNOTATIONS_STATE",	"Comments",				"Annotations State",	DataType.XML,					None,		"Annotations State", annotationsScriptName]
]);

createSampleTypeWithProperties("CHEMICAL", "", [
	["NAME", 				"General", 				"Name", 				DataType.MULTILINE_VARCHAR,		None,		"Name", None],
	["SUPPLIER", 			"Supplier and storage", "Supplier", 			DataType.MULTILINE_VARCHAR,		None,		"Supplier of the product", None],
	["ARTICLE_NUMBER", 		"Supplier and storage", "Art. Number",			DataType.MULTILINE_VARCHAR,		None,		"Article number of the product", None],
	["STORAGE", 			"Supplier and storage", "Storage", 				DataType.CONTROLLEDVOCABULARY,	"STORAGE",	"Storage conditions of the product", None],
	["XMLCOMMENTS", 		"Comments", 			"Comments List", 		DataType.XML,					None,		"Several comments can be added by different users", commentsScriptName],
	["ANNOTATIONS_STATE",	"Comments",				"Annotations State",	DataType.XML,					None,		"Annotations State", annotationsScriptName]
]);

createSampleTypeWithProperties("ENZYME", "", [
	["NAME", 				"General",				"Name",					DataType.MULTILINE_VARCHAR,		None,		"Name", None],
	["SUPPLIER", 			"Supplier and storage",	"Supplier",				DataType.MULTILINE_VARCHAR,		None,		"Supplier of the product", None],
	["ARTICLE_NUMBER", 		"Supplier and storage",	"Art. Number",			DataType.MULTILINE_VARCHAR,		None,		"Article number of the product", None],
	["KIT", 				"Supplier and storage",	"Kit including",		DataType.MULTILINE_VARCHAR,		None,		"What the company includes with the enzyme", None],
	["STORAGE",				"Supplier and storage",	"Storage",				DataType.CONTROLLEDVOCABULARY,	"STORAGE",	"Storage conditions of the product", None],
	["XMLCOMMENTS",			"Comments",				"Comments List",		DataType.XML,					None,		"Several comments can be added by different users", commentsScriptName],
	["ANNOTATIONS_STATE",	"Comments",				"Annotations State",	DataType.XML,					None,		"Annotations State", annotationsScriptName]
]);

createSampleTypeWithProperties("MEDIA", "", [
	["NAME", 				"General",				"Name",					DataType.MULTILINE_VARCHAR,		None,			"Name", None],
	["FOR_WHAT", 			"General",				"For what",				DataType.MULTILINE_VARCHAR,		None,			"For what kind of experimental application/readout this sample is used in the lab", None],
	["ORGANISM", 			"General",				"Organism",				DataType.CONTROLLEDVOCABULARY,	"ORGANISM",		"For what organism this medium is used", None],
	["STORAGE", 			"Storage",				"Storage",				DataType.CONTROLLEDVOCABULARY,	"STORAGE",		"Storage conditions of the product", None],
	["STOCK_CONCENTRATION", "Storage",				"Stock concentration",	DataType.VARCHAR,				None,			"Stock concentration of the solution where the product is kept in the lab", None],
	["STERILIZATION", 		"Storage",				"Sterilization",		DataType.CONTROLLEDVOCABULARY,	"STERILIZATION","How the solution/buffer is sterilized when prepared", None],
	["PUBLICATION", 		"Comments",				"Publication",			DataType.MULTILINE_VARCHAR,		None,			"Publication from where the information was first found OR technical sheet given by the manufacturer", None],
	["NOTES", 				"Comments",				"Notes",				DataType.MULTILINE_VARCHAR,		None,			"Deatails for solution/buffer preparation", None],
	["XMLCOMMENTS", 		"Comments",				"Comments List",		DataType.XML,					None,			"Several comments can be added by different users", commentsScriptName],
	["ANNOTATIONS_STATE",	"Comments",				"Annotations State",	DataType.XML,					None,			"Annotations State", annotationsScriptName]
]);

createSampleTypeWithProperties("SOLUTION_BUFFER", "", [
	["NAME", 				"General",				"Name",					DataType.MULTILINE_VARCHAR,		None,			"Name", None],
	["FOR_WHAT", 			"General",				"For what",				DataType.MULTILINE_VARCHAR,		None,			"For what kind of experimental application/readout this sample is used in the lab", None],
	["DETAILS", 			"Recipe",				"Details",				DataType.MULTILINE_VARCHAR,		None,			"Details and tips about how to prepare the solution/buffer", None],
	["STORAGE", 			"Storage",				"Storage",				DataType.CONTROLLEDVOCABULARY,	"STORAGE",		"Storage conditions of the product", None],
	["STOCK_CONCENTRATION", "Storage",				"Stock concentration",	DataType.VARCHAR,				None,			"Stock concentration of the solution where the product is kept in the lab", None],
	["STERILIZATION", 		"Storage",				"Sterilization",		DataType.CONTROLLEDVOCABULARY,	"STERILIZATION","How the solution/buffer is sterilized when prepared", None],
	["PUBLICATION", 		"Comments",				"Publication",			DataType.MULTILINE_VARCHAR,		None,			"Publication from where the information was first found OR technical sheet given by the manufacturer", None],
	["NOTES", 				"Comments",				"Notes",				DataType.MULTILINE_VARCHAR,		None,			"Notes", None],
	["XMLCOMMENTS", 		"Comments",				"Comments List",		DataType.XML,					None,			"Several comments can be added by different users", commentsScriptName],
	["ANNOTATIONS_STATE",	"Comments",				"Annotations State",	DataType.XML,					None,			"Annotations State", annotationsScriptName]
]);

createSampleTypeWithProperties("OLIGO", "", [
	["TARGET", 					"General",			"Target",					DataType.MULTILINE_VARCHAR,		None,				"Target of the oligonucleotide", None],
	["DIRECTION", 				"Details",			"Direction",				DataType.CONTROLLEDVOCABULARY, "DIRECTION",			"Direction of the oligonucleotide", None],
	["RESTRICTION_ENZYME", 		"Details",			"Restriction Enzyme",		DataType.MULTILINE_VARCHAR,		None,				"Restriction sites in the oligonucleotide", None],
	["MODIFICATIONS", 			"Details",			"Modifications",			DataType.MULTILINE_VARCHAR,		None,				"Modifications of the ordered oligonucleotide", None],
	["SEQUENC", 				"Details",			"Sequence",					DataType.MULTILINE_VARCHAR,		None,				"Sequence of the oligonucleotide", None],
	["XMLCOMMENTS", 			"Comments",			"Comments List",			DataType.XML,					None,				"Several comments can be added by different users", commentsScriptName],
	["ANNOTATIONS_STATE",		"Comments",			"Annotations State",		DataType.XML,					None,				"Annotations State", annotationsScriptName]
]);

createSampleTypeWithProperties("RNA", "", [
	["RNA_NAME", 				"General",				"Name of RNA",			DataType.VARCHAR,				None,				"Name of the RNA: species/number/strand", None],
	["TARGET", 					"General",				"Target of the RNA",	DataType.VARCHAR,				None,				"Target of the oligonucleotide", None],
	["TYPE", 					"General",				"Type of RNA",			DataType.CONTROLLEDVOCABULARY,	"RNA_TYPE",			"Type of RNA in terms of function: mimic of RNAi or inhibitor of RNAi", None],
	["STRAND", 					"Details",				"Strand",				DataType.CONTROLLEDVOCABULARY,	"STRAND",			"Double or single strand RNA", None],
	["BACKBONE_TYPE", 			"Details",				"Backbone type",		DataType.CONTROLLEDVOCABULARY,	"RNA_BACKBONE",		"Type of backbone, modifications in the backbone", None],
	["MODIFICATIONS", 			"Details",				"Modifications",		DataType.VARCHAR,				None,				"Modifications of the ordered oligonucleotide", None],
	["SEQUENCE", 				"Details",				"Sequence",				DataType.MULTILINE_VARCHAR,		None,				"Sequence of the oligonucleotide", None],
	["SUPPLIER", 				"Supplier and storage",	"Supplier",				DataType.MULTILINE_VARCHAR,		None,				"Supplier of the product", None],
	["ARTICLE_NUMBER", 			"Supplier and storage",	"Art. Number",			DataType.MULTILINE_VARCHAR,		None,				"Article number of the product", None],
	["STORAGE", 				"Supplier and storage",	"Storage",				DataType.CONTROLLEDVOCABULARY,	"STORAGE",			"Storage conditions of the product", None],
	["PUBLICATION", 			"Comments",				"Publication",			DataType.MULTILINE_VARCHAR,		None,				"Publication from where the information was first found OR technical sheet given by the manufacturer", None],
	["XMLCOMMENTS", 			"Comments",				"Comments List",		DataType.XML,					None,				"Several comments can be added by different users", commentsScriptName],
	["ANNOTATIONS_STATE",		"Comments",				"Annotations State",	DataType.XML,					None,				"Annotations State", annotationsScriptName]
]);

createSampleTypeWithProperties("PLASMID", "", [
	["PLASMID_NAME", 					"General",				"Plasmid",							DataType.VARCHAR,				None,								"Plasmid name", None],
	["OWNER", 							"General",				"Owner",							DataType.CONTROLLEDVOCABULARY,	"OWNER",							"Who produced/owned the sample", None],
	["OWNER_NUMBER", 					"General",				"Owner number",						DataType.MULTILINE_VARCHAR,		None,								"Owner number", None],
	["BACKBONE", 						"Details",				"Backbone",							DataType.CONTROLLEDVOCABULARY,	"BACKBONE",							"Backbone of the plasmid", None],
	["BACTERIAL_ANTIBIOTIC_RESISTANCE", "Details",				"Bacterial Antibiotic Resistance",	DataType.CONTROLLEDVOCABULARY,	"BACTERIAL_ANTIBIOTIC_RESISTANCE",	"Bacterial antibiotic resistance", None],
	["MARKER", 							"Details",				"Marke",							DataType.CONTROLLEDVOCABULARY,	"MARKER",							"Marker to select the strain/cell line after transformation/transfection", None],
	["OTHER_MARKER", 					"Details",				"Other Marker",						DataType.VARCHAR,				None,								"Other marker useful for selection", None],
	["FLANKING_RESTRICTION_ENZYMES", 	"Details",				"Flanking Restriction Enzymes",		DataType.VARCHAR,				None,								"Restriction enzymes sites flanking the insert of the plasmid", None],
	["OLIGOS_TEMPLATE", 				"Details",				"Oligos and template",				DataType.MULTILINE_VARCHAR,		None,								"Oligos and template used to clone the single parts of the plasmid", None],
	["SOURCE", 							"Origin",				"Source",							DataType.VARCHAR,				None,								"Source from where the construct/strain/cell line obtained or purchased, if it was not produced in the lab", None],
	["PUBLICATION", 					"Comments",				"Publication",						DataType.MULTILINE_VARCHAR,		None,								"Publication from where the information was first found OR technical sheet given by the manufacturer", None],
	["NOTES", 							"Comments", 			"Notes",							DataType.MULTILINE_VARCHAR,		None,								"Notes", None],
	["XMLCOMMENTS", 					"Comments",				"Comments List",					DataType.XML,					None,								"Several comments can be added by different users", commentsScriptName],
	["ANNOTATIONS_STATE",				"Comments",				"Annotations State",				DataType.XML,					None,								"Annotations State", annotationsScriptName]
]);

createSampleTypeWithProperties("BACTERIA", "", [
	["BACTERIA_STRAIN_NAME", 			"General",				"Bacteria strain name",				DataType.VARCHAR,				None,								"Bacterial strain name", None],
	["OWNER", 							"General",				"Owner",							DataType.CONTROLLEDVOCABULARY,	"OWNER",							"Who produced/owned the sample", None],
	["OWNER_NUMBER", 					"General",				"Owner number",						DataType.MULTILINE_VARCHAR,		None,								"Owner number", None],
	["BACTERIA_GENOTYPE", 				"Genotype",				"Bacteria genotype",				DataType.MULTILINE_VARCHAR,		None,								"Bacterial genotype", None],
	["MARKERS", 						"Genotype",				"Markers",							DataType.MULTILINE_VARCHAR,		None,								"Markers available in the strain for further genetic modifications", None],
	["ORIGIN", 							"Origin",				"Origin",							DataType.CONTROLLEDVOCABULARY,	"ORIGIN",							"How the strain/cell line was produced", None],
	["STRAIN_CHECK", 					"Origin",				"Strain Check",						DataType.CONTROLLEDVOCABULARY,	"CHECK",							"Check done to verify the modifications introduced in the strain", None],
	["SOURCE", 							"Origin",				"Source",							DataType.VARCHAR,				None,								"Source from where the construct/strain/cell line obtained or purchased, if it was not produced in the lab", None],
	["PUBLICATION", 					"Comments",				"Publication",						DataType.MULTILINE_VARCHAR,		None,								"Publication from where the information was first found OR technical sheet given by the manufacturer", None],
	["NOTES", 							"Comments", 			"Notes",							DataType.MULTILINE_VARCHAR,		None,								"Notes", None],
	["XMLCOMMENTS", 					"Comments",				"Comments List",					DataType.XML,					None,								"Several comments can be added by different users", commentsScriptName],
	["ANNOTATIONS_STATE",				"Comments",				"Annotations State",				DataType.XML,					None,								"Annotations State", annotationsScriptName]
]);

createSampleTypeWithProperties("YEAST", "", [
	["YEAST_STRAIN_NAME", 				"General",				"Yeast strain name",					DataType.MULTILINE_VARCHAR,		None,								"Yeast strain name", None],
	["OWNER", 							"General",				"Owner",								DataType.CONTROLLEDVOCABULARY,	"OWNER",							"Who produced/owned the sample", None],
	["OWNER_NUMBER", 					"General",				"Owner number",							DataType.MULTILINE_VARCHAR,		None,								"Owner number", None],
	["GENETIC_BACKGROUND", 				"Genotype",				"Genetic Background",					DataType.CONTROLLEDVOCABULARY,	"GENETIC_BACKGROUND",				"Genetic background of the yeast strain", None],
	["MATING_TYPE", 					"Genotype",				"Mating Type",							DataType.CONTROLLEDVOCABULARY,	"MATING_TYPE",						"Mating type or ploidy of the yeast strain", None],
	["BACKGROUND-SPECIFIC_MARKERS", 	"Genotype",				"Background-specific markers",			DataType.CONTROLLEDVOCABULARY,	"BACKGROUND_SPECIFIC_MARKERS",		"Background-specific markers available in the strain for further genetic modifications", None],
	["COMMON_MARKERS", 					"Genotype",				"Common markers",						DataType.CONTROLLEDVOCABULARY,	"COMMON_MARKERS",					"Common markers available in the strain for further genetic modifications", None],
	["ENDOGENOUS_PLASMID", 				"Genotype",				"Endogenous 2micron plasmid in yeast",	DataType.CONTROLLEDVOCABULARY,	"ENDOGENOUS_PLASMID",				"Presence of an endogenous cir 2micron plasmid", None],
	["ORIGIN", 							"Origin",				"Origin",								DataType.CONTROLLEDVOCABULARY,	"ORIGIN",							"How the strain/cell line was produced", None],
	["STRAIN_CHECK", 					"Origin",				"Strain Check",							DataType.CONTROLLEDVOCABULARY,	"CHECK",							"Check done to verify the modifications introduced in the strain", None],
	["SOURCE", 							"Origin",				"Source",								DataType.VARCHAR,				None,								"Source from where the construct/strain/cell line obtained or purchased, if it was not produced in the lab", None],
	["PUBLICATION", 					"Comments",				"Publication",							DataType.MULTILINE_VARCHAR,		None,								"Publication from where the information was first found OR technical sheet given by the manufacturer", None],
	["NOTES", 							"Comments", 			"Notes",								DataType.MULTILINE_VARCHAR,		None,								"Notes", None],
	["XMLCOMMENTS", 					"Comments",				"Comments List",						DataType.XML,					None,								"Several comments can be added by different users", commentsScriptName],
	["ANNOTATIONS_STATE",				None,					"Annotations State",					DataType.XML,					None,								"Annotations State", annotationsScriptName]
]);

createSampleTypeWithProperties("CELL_LINE", "", [
	["CELL_LINE_NAME", 					"General",				"Cell line name",						DataType.VARCHAR,				None,								"Name of the cell line", None],
	["OWNER", 							"General",				"Owner",								DataType.CONTROLLEDVOCABULARY,	"OWNER",							"Who produced/owned the sample", None],
	["OWNER_NUMBER", 					"General",				"Owner number",							DataType.MULTILINE_VARCHAR,		None,								"Owner number", None],
	["SPECIES", 						"Genotype",				"Species",								DataType.CONTROLLEDVOCABULARY,	"SPECIES",							"Species to which the cell line belongs", None],
	["CELL_TYPE", 						"Genotype",				"Cell type",							DataType.CONTROLLEDVOCABULARY,	"CELL_TYPE",						"Cell type of the cell line", None],
	["ORIGIN", 							"Origin",				"Origin",								DataType.CONTROLLEDVOCABULARY,	"ORIGIN",							"How the strain/cell line was produced", None],
	["CLONE_NO", 						"Origin",				"Clone #",								DataType.INTEGER,				None,								"Clone number", None],
	["CHECK", 							"Origin",				"Check",								DataType.CONTROLLEDVOCABULARY,	"CHECK",							"Check done to verify the modifications introduced in the cell line", None],
	["CREATION_DATE", 					"Origin",				"Creation date",						DataType.TIMESTAMP,				None,								"Creation date of the cell line", None],
	["MODIFICATION_DATE", 				"Origin",				"Modification date",					DataType.TIMESTAMP,				None,								"Modification date of the cell line", None],
	["FREEZING_DATE", 					"Origin",				"Freezing date",						DataType.TIMESTAMP,				None,								"Freezing date (if more than one, add the latest)", None],
	["SOURCE", 							"Origin",				"Source",								DataType.VARCHAR,				None,								"Source from where the construct/strain/cell line obtained or purchased, if it was not produced in the lab", None],
	["MEDIUM", 							"Cultivation",			"Medium",								DataType.CONTROLLEDVOCABULARY,	"CELL_MEDIUM",						"Medium used to cultivate or manipulate the cell line", None],
	["GROWTH_TEMP", 					"Cultivation",			"Growth temp. ( &deg;C)",				DataType.INTEGER,				None,								"Growth temperature of the cell line", None],
	["CELL_CO2", 						"Cultivation",			"% CO2",								DataType.INTEGER,				None,								"Percentage of CO2 needed for the cultivation of the cell line", None],
	["SELECTION_MARKER", 				"Cultivation",			"Selection marker",						DataType.VARCHAR,				None,								"Special medium components or selection needed for the cell line", None],
	["MYCOPLASM", 						"Cultivation",			"Mycoplasm tested",						DataType.CONTROLLEDVOCABULARY,	"YES_NO",							"Mycoplasm tested", None],
	["PUBLICATION", 					"Comments",				"Publication",							DataType.MULTILINE_VARCHAR,		None,								"Publication from where the information was first found OR technical sheet given by the manufacturer", None],
	["NOTES", 							"Comments", 			"Notes",								DataType.MULTILINE_VARCHAR,		None,								"Notes", None],
	["XMLCOMMENTS", 					"Comments",				"Comments List",						DataType.XML,					None,								"Several comments can be added by different users", commentsScriptName],
	["ANNOTATIONS_STATE",				"Comments",				"Annotations State",					DataType.XML,					None,								"Annotations State", annotationsScriptName]
]);

createSampleTypeWithProperties("FLY", "", [
	["FLY_STRAIN_NAME", 				"General",				"Fly strain name",						DataType.VARCHAR,				None,								"Fly strain name", None],
	["OWNER", 							"General",				"Owner",								DataType.CONTROLLEDVOCABULARY,	"OWNER",							"Who produced/owned the sample", None],
	["OWNER_NUMBER", 					"General",				"Owner number",							DataType.MULTILINE_VARCHAR,		None,								"Owner number", None],
	["FLY_GENOTYPE", 					"Genotype",				"Genotype",								DataType.VARCHAR,				None,								"Genotype of the fly", None],
	["ASSOCIATED_GENE", 				"Genotype",				"Associated gene",						DataType.VARCHAR,				None,								"The transgene may contain regulatory or coding sequences from an endogenous gene", None],
	["MARKERS", 						"Genotype",				"Markers",								DataType.VARCHAR,				None,								"Markers available in the strain for further genetic modifications", None],
	["ORIGIN", 							"Origin",				"Origin",								DataType.CONTROLLEDVOCABULARY,	"ORIGIN",							"How the strain/cell line was produced", None],
	["STRAIN_CHECK", 					"Origin",				"Strain Check",							DataType.CONTROLLEDVOCABULARY,	"CHECK",							"Check done to verify the modifications introduced in the strain", None],
	["SOURCE", 							"Origin",				"Source",								DataType.VARCHAR,				None,								"Source from where the construct/strain/cell line obtained or purchased, if it was not produced in the lab", None],
	["MATING_PARTNERS", 				"Comments",				"Mating partners",						DataType.MULTILINE_VARCHAR,		None,								"Features needed for the mating partners", None],
	["PUBLICATION", 					"Comments",				"Publication",							DataType.MULTILINE_VARCHAR,		None,								"Publication from where the information was first found OR technical sheet given by the manufacturer", None],
	["NOTES", 							"Comments", 			"Notes",								DataType.MULTILINE_VARCHAR,		None,								"Notes", None],
	["XMLCOMMENTS", 					"Comments",				"Comments List",						DataType.XML,					None,								"Several comments can be added by different users", commentsScriptName],
	["ANNOTATIONS_STATE",				"Comments",				"Annotations State",					DataType.XML,					None,								"Annotations State", annotationsScriptName]
]);

addPropertiesToSamples([
	"ANTIBODY",
	"BACTERIA",
	"CHEMICAL",
	"ENZYME",
	"CELL_LINE",
	"FLY",
	"MEDIA",
	"OLIGO",
	"PLASMID",
	"YEAST",
	"SOLUTION_BUFFER",
	"RNA"
	],[
	["STORAGE_NAMES",		"Physical Storage",		"Storage Name",			DataType.CONTROLLEDVOCABULARY,		"STORAGE_NAMES",	"Storage Name", None],
	["STORAGE_ROW",			"Physical Storage",		"Storage Row",			DataType.INTEGER,					None,				"Storage Row", None],
	["STORAGE_COLUMN",		"Physical Storage",		"Storage Column",		DataType.INTEGER,					None,				"Storage Column", None],
	["STORAGE_BOX_NAME",	"Physical Storage",		"Storage Box Name",		DataType.VARCHAR,					None,				"Storage Box Name", None],
	["STORAGE_USER",		"Physical Storage",		"Storage User Id",		DataType.VARCHAR,					None,				"Storage User Id", None]
]);

##
## Sample Types - Non Materials
##

createSampleTypeWithProperties("EXPERIMENTAL_STEP", "", [
	["NAME", 							"General",				"Name",									DataType.MULTILINE_VARCHAR,		None,								"Name", None],
	["OWNER", 							"General",				"Owner",								DataType.CONTROLLEDVOCABULARY,	"OWNER",							"Who produced/owned the sample", None],
	["EXPERIMENTAL_GOALS", 				"General",				"Experimental goals",					DataType.MULTILINE_VARCHAR,		None,								"Goal of the experiment", None],
	["EXPERIMENTAL_RESULTS", 			"General",				"Experimental results",					DataType.MULTILINE_VARCHAR,		None,								"Brief summary of the results obtained", None],
	["NOTES", 							"Comments", 			"Notes",								DataType.MULTILINE_VARCHAR,		None,								"Notes", None],
	["EXPERIMENTAL_READOUT", 			"Readout details",		"Experimental readout",					DataType.CONTROLLEDVOCABULARY,	"EXPERIMENTAL_READOUT",				"Experimental readout used in the experiment", None],
	["MACHINE", 						"Readout details",		"Machine",								DataType.CONTROLLEDVOCABULARY,	"MACHINE",							"Machine used to perform the experiment", None],
	["FREEFORM_TABLE_STATE", 			"Readout details",		"Freeform Table State",					DataType.MULTILINE_VARCHAR,		None,								"Table describing how the order of samples measured in the experiments", None],
	["PUBLICATION", 					"Comments",				"Publication",							DataType.MULTILINE_VARCHAR,		None,								"Publication from where the information was first found OR technical sheet given by the manufacturer", None],
	["XMLCOMMENTS", 					"Comments",				"Comments List",						DataType.XML,					None,								"Several comments can be added by different users", commentsScriptName],
	["ANNOTATIONS_STATE",				"Comments",				"Annotations State",					DataType.XML,					None,								"Annotations State", annotationsScriptName]
]);

createSampleTypeWithProperties("GENERAL_PROTOCOL", "", [
	["NAME", 					"General",			"Name",						DataType.MULTILINE_VARCHAR,		None,				"Name", None],
	["FOR_WHAT", 				"General",			"For what",					DataType.MULTILINE_VARCHAR,		None,				"For what kind of experimental application/readout this sample is used in the lab", None],
	["PROTOCOL_TYPE", 			"General",			"Protocol type",			DataType.CONTROLLEDVOCABULARY,	"PROTOCOL_TYPE",	"Category a protocol belongs", None],
	["MATERIALS", 				"Materials",		"Materials",				DataType.MULTILINE_VARCHAR,		None,				"Machines (and relative set up), special labware required for the protocol.", None],
	["TIME_REQUIREMENT", 		"Method",			"Time requirement",			DataType.MULTILINE_VARCHAR,		None,				"Time required to complete a protocol", None],
	["PROCEDURE",				"Method", 			"Procedure",				DataType.MULTILINE_VARCHAR,		None,				"Procedure required by the protocol by points (1,2,3,...)", None],
	["PROTOCOL_EVALUATION", 	"Method",			"Protocol evaluation",		DataType.MULTILINE_VARCHAR,		None,				"Parameters and observations to meet the minimal efficiency of the protocol", None],
	["SUGGESTIONS", 			"Comments",			"Suggestions",				DataType.MULTILINE_VARCHAR,		None,				"Suggestions for the protocol", None],
	["PROTOCOL_MODIFICATIONS", 	"Comments",			"Protocol modifications",	DataType.MULTILINE_VARCHAR,		None,				"Alternative procedures used to make protocol variations", None],
	["PUBLICATION", 			"Comments",			"Publication",				DataType.MULTILINE_VARCHAR,		None,				"Publication from where the information was first found OR technical sheet given by the manufacturer", None],
	["XMLCOMMENTS", 			"Comments",			"Comments List",			DataType.XML,					None,				"Several comments can be added by different users", commentsScriptName],
	["ANNOTATIONS_STATE",		"Comments",			"Annotations State",		DataType.XML,					None,				"Annotations State", annotationsScriptName]
]);

createSampleTypeWithProperties("PCR_PROTOCOL", "", [
	["NAME", 					"General",			"Name",						DataType.MULTILINE_VARCHAR,		None,				"Name", None],
	["FOR_WHAT", 				"General",			"For what",					DataType.MULTILINE_VARCHAR,		None,				"For what kind of experimental application/readout this sample is used in the lab", None],
	["TEMPLATE", 				"General",			"Template",					DataType.CONTROLLEDVOCABULARY,	"TEMPLATE",			"Type of template used in the PCR protocol", None],
	["REACTION_MIX", 			"Materials",		"Reaction mix",				DataType.MULTILINE_VARCHAR,		None,				"Reaction mix recipe for the PCR", None],
	["THERMOCYCLER_PROTOCOL", 	"Method",			"Thermocycler protocol",	DataType.MULTILINE_VARCHAR,		None,				"Thermocycler protocol for PCR", None],
	["PROTOCOL_EVALUATION", 	"Method",			"Protocol evaluation",		DataType.MULTILINE_VARCHAR,		None,				"Parameters and observations to meet the minimal efficiency of the protocol", None],
	["SUGGESTIONS", 			"Comments",			"Suggestions",				DataType.MULTILINE_VARCHAR,		None,				"Suggestions for the protocol", None],
	["PROTOCOL_MODIFICATIONS", 	"Comments",			"Protocol modifications",	DataType.MULTILINE_VARCHAR,		None,				"Alternative procedures used to make protocol variations", None],
	["PUBLICATION", 			"Comments",			"Publication",				DataType.MULTILINE_VARCHAR,		None,				"Publication from where the information was first found OR technical sheet given by the manufacturer", None],
	["XMLCOMMENTS", 			"Comments",			"Comments List",			DataType.XML,					None,				"Several comments can be added by different users", commentsScriptName],
	["ANNOTATIONS_STATE",		"Comments",			"Annotations State",		DataType.XML,					None,				"Annotations State", annotationsScriptName]
]);

createSampleTypeWithProperties("WESTERN_BLOTTING_PROTOCOL", "", [
	["NAME", 					"General",			"Name",						DataType.MULTILINE_VARCHAR,		None,				"Name", None],
	["FOR_WHAT", 				"General",			"For what",					DataType.MULTILINE_VARCHAR,		None,				"For what kind of experimental application/readout this sample is used in the lab", None],
	["STORAGE", 				"General", 			"Storage",					DataType.CONTROLLEDVOCABULARY,	"STORAGE",			"Storage conditions of the product", None],
	["MEMBRANE", 				"Materials", 		"Membrane",					DataType.CONTROLLEDVOCABULARY,	"MEMBRANE",			"Membrane used for western blotting", None],
	["PUBLICATION", 			"Comments", 		"Publication",				DataType.MULTILINE_VARCHAR,		None,				"Publication from where the information was first found OR technical sheet given by the manufacturer", None],
	["NOTES", 					"Comments", 		"Notes",					DataType.MULTILINE_VARCHAR,		None,				"Notes", None],
	["XMLCOMMENTS", 			"Comments",			"Comments List",			DataType.XML,					None,				"Several comments can be added by different users", commentsScriptName],
	["ANNOTATIONS_STATE",		"Comments",			"Annotations State",		DataType.XML,					None,				"Annotations State", annotationsScriptName]
]);