#
# Copyright 2014 ETH Zuerich, Scientific IT Services
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# MasterDataRegistrationTransaction Class
import os
import ch.systemsx.cisd.openbis.generic.server.jython.api.v1.DataType as DataType

##
## Globals
##
vocabulariesCache = {};
propertiesCache = {};
samplesCache = {};
tr = service.transaction()

##
## API Facade
##
def createVocabularyWithTerms(vocabularyCode, terms):
    vocabulary = tr.createNewVocabulary(vocabularyCode);
    addTerms(vocabulary, terms);
    vocabulariesCache[vocabularyCode] = vocabulary;
    
def addTerms(vocabulary, terms):
    for term in terms:
        addTermWithLabel(vocabulary, term[0], term[1])
    
def addTermWithLabel(vocabulary, termCode, termLabel):
    newTerm = tr.createNewVocabularyTerm(termCode);
    newTerm.setLabel(termLabel);
    vocabulary.addTerm(newTerm);
    
def createSampleTypeWithProperties(sampleTypeCode, description, properties):
    newSampleType = tr.getOrCreateNewSampleType(sampleTypeCode);
    newSampleType.setDescription(description);
    newSampleType.setShowParents(True);
    newSampleType.setAutoGeneratedCode(True);
    newSampleType.setGeneratedCodePrefix(sampleTypeCode[:3]);
    addProperties(newSampleType, properties);
    samplesCache[sampleTypeCode] = newSampleType;
    
def createDataSetTypeWithProperties(dataSetCode, kind, description, properties):
    newDataSet = tr.getOrCreateNewDataSetType(dataSetCode);
    newDataSet.setDataSetKind(kind);
    newDataSet.setDescription(description);
    addProperties(newDataSet, properties);
    
def createExperimentTypeWithProperties(experimentTypeCode, description, properties):
    newExperiment = tr.getOrCreateNewExperimentType(experimentTypeCode);
    newExperiment.setDescription(description);
    addProperties(newExperiment, properties);

def addPropertiesToSamples(sampleTypeCodes, properties):
    for sampleTypeCode in sampleTypeCodes:
        sampleType = samplesCache[sampleTypeCode];
        addProperties(sampleType, properties);
    
def addProperties(entity, properties):
    for property in properties:
        addProperty(entity, property[0], property[1], property[2], property[3], property[4], property[5], property[6]);
    
def addProperty(entity, propertyCode, section, propertyLabel, dataType, vocabularyCode, propertyDescription, managedScript):
    property = None;
    
    if propertyCode in propertiesCache:
        property = propertiesCache[propertyCode];
    else:
        property = createProperty(propertyCode, dataType, propertyLabel, propertyDescription, vocabularyCode);
    
    propertyAssignment = tr.assignPropertyType(entity, property);
    propertyAssignment.setSection(section);
    if managedScript != None:
        propertyAssignment.setManaged(True);
        propertyAssignment.setShownEdit(True);
        propertyAssignment.setScriptName(managedScript);

def createProperty(propertyCode, dataType, propertyLabel, propertyDescription, vocabularyCode):
    property = tr.getOrCreateNewPropertyType(propertyCode, dataType);
    property.setDescription(propertyDescription);
    property.setLabel(propertyLabel);
    propertiesCache[propertyCode] = property;
    if dataType == DataType.CONTROLLEDVOCABULARY:
        property.setVocabulary(vocabulariesCache[vocabularyCode]);
    return property;

##
## Vocabulary Types
##
createVocabularyWithTerms("HOST", [
                                        ["MOUSE", "mouse"],
                                        ["RAT", "rat"],
                                        ["GUINEA_PIG", "guinea pig"],
                                        ["RABBIT", "rabbit"],
                                        ["DONKEY", "donkey"]
                                    ]);

##
## Experiment Types
##
createExperimentTypeWithProperties("ANTIBODY", "BOX TO HOLD SAMPLES OF THIS TYPE FOR ORGANIZATIONAL PURPOSES", []);

createExperimentTypeWithProperties("DEFAULT_EXPERIMENT", "Default Experiment", [
    ["NAME",                 "General", "Name",                     DataType.VARCHAR,             None,    "Name", None],
    ["EXPERIMENTAL_GOALS",     "General", "Experimental goals",     DataType.MULTILINE_VARCHAR, None,    "Goal of the experiment", None],
    ["GRANT",                 "General", "Grant",                 DataType.VARCHAR,            None,    "grant name", None],
    ["START_DATE",             "General", "Start Date",             DataType.TIMESTAMP,         None,    "Start Date", None],
    ["END_DATE",             "General", "End Date",                 DataType.TIMESTAMP,            None,    "End Date", None],
    ["EXPERIMENTAL_RESULTS","General", "Experimental results",     DataType.MULTILINE_VARCHAR, None,    "Brief summary of the results obtained", None],
    ["XMLCOMMENTS",            "Comments","Comments List",            DataType.XML,                None,    "Several comments can be added by different users", commentsScriptName]
]);

##
## Sample Types
##
createSampleTypeWithProperties("ANTIBODY", "", [
    ["NAME",                           "General",                "antibody ID",                        DataType.VARCHAR,                    None,  "", None],
    ["ANTIBODY_ID_NR",                 "General",                "antibody_id_nr",                     DataType.VARCHAR,                    None,  "", None],
    ["ANTIGEN",                        "General",                "antigen",                            DataType.VARCHAR,                    None,  "", None],
    ["BARCODE",                        "General",                "barcode",                            DataType.VARCHAR,                    None,  "", None],
    ["BARCODE_LABEL",                  "General",                "barcode label",                      DataType.VARCHAR,                    None,  "", None],
    ["ANTIBODY_FACS_BLOCK",            "General",                "block facs",                         DataType.CONTROLLEDVOCABULARY,       None,  "", None],
    ["ANTIBODY_IF_BLOCK",              "General",                "block IFF",                          DataType.CONTROLLEDVOCABULARY,       None,  "", None],
    ["ANTIBODY_WB_BLOCK",              "General",                "block western",                      DataType.CONTROLLEDVOCABULARY,       None,  "", None],
    ["BOX",                            "General",                "box",                                DataType.VARCHAR,                    None,  "", None],
    ["CATALOGUE_NUMBER",               "General",                "catalog id #",                       DataType.VARCHAR,                    None,  "", None],
    ["CLASS",                          "General",                "class",                              DataType.CONTROLLEDVOCABULARY,       None,  "", None],
    ["CLONE",                          "General",                "clone",                              DataType.VARCHAR,                    None,  "", None],
    ["COMPANY",                        "General",                "company",                            DataType.CONTROLLEDVOCABULARY,       None,  "", None],
    ["ANTIBODY_FACS_CONC",             "General",                "conc facs",                          DataType.CONTROLLEDVOCABULARY,       None,  "", None],
    ["ANTIBODY_IF_CONC",               "General",                "conc IFF",                           DataType.CONTROLLEDVOCABULARY,       None,  "", None],
    ["ANTIBODY_IP_CONC",               "General",                "conc ip",                            DataType.CONTROLLEDVOCABULARY,       None,  "", None],
    ["ANTIBODY_WB_CONC",               "General",                "conc western",                       DataType.CONTROLLEDVOCABULARY,       None,  "", None],
    ["ANTIBODY_CONCENTRATION",         "General",                "concentration",                      DataType.VARCHAR,                    None,  "", None],
    ["ANTIBODY_CROSSREACTIVITY",       "General",                "crossreactivity",                    DataType.VARCHAR,                    None,  "", None],
    ["ANTIBODY_FACS_FIX",              "General",                "fix facs",                           DataType.CONTROLLEDVOCABULARY,       None,  "", None],
    ["ANTIBODY_IF_FIX",                "General",                "fix IFF",                            DataType.CONTROLLEDVOCABULARY,       None,  "", None],
    ["ANTIBODY_WB_FIX",                "General",                "fix western",                        DataType.CONTROLLEDVOCABULARY,       None,  "", None],
    ["COMMENTS",                       "General",                "info",                               DataType.VARCHAR,                    None,  "", None],
    ["INVESTIGATOR",                   "General",                "investigator",                       DataType.CONTROLLEDVOCABULARY,       None,  "", None],
    ["LABEL",                          "General",                "label",                              DataType.CONTROLLEDVOCABULARY,       None,  "", None],
    ["LOTNUMBER",                      "General",                "lotnumber",                          DataType.VARCHAR,                    None,  "", None],
    ["MODIFIED_BY",                    "General",                "modified by",                        DataType.CONTROLLEDVOCABULARY,       None,  "", None],
    ["MONO_POLYCLONAL",                "General",                "mono/polyclonal",                    DataType.CONTROLLEDVOCABULARY,       None,  "", None],
    ["ANTIBODY_FACS_NOTES",            "General",                "notes FACS",                         DataType.VARCHAR,                    None,  "", None],
    ["ANTIBODY_IF_NOTES",              "General",                "notes IFF",                          DataType.VARCHAR,                    None,  "", None],
    ["ANTIBODY_IP_NOTES",              "General",                "notes IP",                           DataType.VARCHAR,                    None,  "", None],
    ["ANTIBODY_WB_NOTES",              "General",                "notes western",                      DataType.VARCHAR,                    None,  "", None],
    ["RACK",                           "General",                "rack",                               DataType.VARCHAR,                    None,  "", None],
    ["PUBLISHED_IN",                   "General",                "reference",                          DataType.VARCHAR,                    None,  "", None],
    ["SERIAL_NUMBER",                  "General",                "serial number",                      DataType.INTEGER,                    None,  "", None],
    ["ANTIGEN_SIZE",                   "General",                "size",                               DataType.VARCHAR,                    None,  "", None],
    ["SOURCE",                         "General",                "source",                             DataType.CONTROLLEDVOCABULARY,       None,  "", None],
    ["CREATION_DATE",                  "General",                "creation date",                      DataType.TIMESTAMP,                  None,  "", None],
    ["MODIFICATION_DATE",              "General",                "modification date",                  DataType.TIMESTAMP,                  None,  "", None],
    ["FROZEN",                         "General",                "frozen",                             DataType.TIMESTAMP,                  None,  "", None],
    ["BOX_NUMBER",                     "General",                "antibody ID data box::box label",    DataType.VARCHAR,                    None,  "", None],
    ["FROZEN_BY",                      "General",                "antibody ID data box::frozen by",    DataType.CONTROLLEDVOCABULARY,       None,  "", None],
    ["FREEZER_NAME",                   "General",                "antibody ID data box::location",     DataType.CONTROLLEDVOCABULARY,       None,  "", None],
    ["BOX_POSITION",                   "General",                "antibody ID data box::position",     DataType.VARCHAR,                    None,  "", None]
]);