#
# Copyright 2014 ETH Zuerich, Scientific IT Services
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# MasterDataRegistrationTransaction Class
import os
import ch.systemsx.cisd.openbis.generic.server.jython.api.v1.DataType as DataType

##
## Globals
##
vocabulariesCache = {};
propertiesCache = {};
samplesCache = {};
tr = service.transaction()

##
## API Facade
##
def createVocabularyWithTerms(vocabularyCode, terms):
    vocabulary = tr.createNewVocabulary(vocabularyCode);
    addTerms(vocabulary, terms);
    vocabulariesCache[vocabularyCode] = vocabulary;
    
def addTerms(vocabulary, terms):
    for term in terms:
        addTermWithLabel(vocabulary, term[0], term[1])
    
def addTermWithLabel(vocabulary, termCode, termLabel):
    newTerm = tr.createNewVocabularyTerm(termCode);
    newTerm.setLabel(termLabel);
    vocabulary.addTerm(newTerm);
    
def createSampleTypeWithProperties(sampleTypeCode, description, properties):
    newSampleType = tr.getOrCreateNewSampleType(sampleTypeCode);
    newSampleType.setDescription(description);
    newSampleType.setShowParents(True);
    newSampleType.setAutoGeneratedCode(True);
    newSampleType.setGeneratedCodePrefix(sampleTypeCode[:3]);
    addProperties(newSampleType, properties);
    samplesCache[sampleTypeCode] = newSampleType;
    
def createDataSetTypeWithProperties(dataSetCode, kind, description, properties):
    newDataSet = tr.getOrCreateNewDataSetType(dataSetCode);
    newDataSet.setDataSetKind(kind);
    newDataSet.setDescription(description);
    addProperties(newDataSet, properties);
    
def createExperimentTypeWithProperties(experimentTypeCode, description, properties):
    newExperiment = tr.getOrCreateNewExperimentType(experimentTypeCode);
    newExperiment.setDescription(description);
    addProperties(newExperiment, properties);

def addPropertiesToSamples(sampleTypeCodes, properties):
    for sampleTypeCode in sampleTypeCodes:
        sampleType = samplesCache[sampleTypeCode];
        addProperties(sampleType, properties);
    
def addProperties(entity, properties):
    for property in properties:
        addProperty(entity, property[0], property[1], property[2], property[3], property[4], property[5], property[6]);
    
def addProperty(entity, propertyCode, section, propertyLabel, dataType, vocabularyCode, propertyDescription, managedScript):
    property = None;
    
    if propertyCode in propertiesCache:
        property = propertiesCache[propertyCode];
    else:
        property = createProperty(propertyCode, dataType, propertyLabel, propertyDescription, vocabularyCode);
    
    propertyAssignment = tr.assignPropertyType(entity, property);
    propertyAssignment.setSection(section);
    if managedScript != None:
        propertyAssignment.setManaged(True);
        propertyAssignment.setShownEdit(True);
        propertyAssignment.setScriptName(managedScript);

def createProperty(propertyCode, dataType, propertyLabel, propertyDescription, vocabularyCode):
    property = tr.getOrCreateNewPropertyType(propertyCode, dataType);
    property.setDescription(propertyDescription);
    property.setLabel(propertyLabel);
    propertiesCache[propertyCode] = property;
    if dataType == DataType.CONTROLLEDVOCABULARY:
        property.setVocabulary(vocabulariesCache[vocabularyCode]);
    return property;

##
## Vocabulary Types
##
createVocabularyWithTerms("HOST", [
                                        ["MOUSE", "mouse"],
                                        ["RAT", "rat"],
                                        ["GUINEA_PIG", "guinea pig"],
                                        ["RABBIT", "rabbit"],
                                        ["DONKEY", "donkey"]
                                    ]);

##
## Experiment Types
##
createExperimentTypeWithProperties("ANTIBODY", "BOX TO HOLD SAMPLES OF THIS TYPE FOR ORGANIZATIONAL PURPOSES", []);

createExperimentTypeWithProperties("DEFAULT_EXPERIMENT", "Default Experiment", [
    ["NAME",                 "General", "Name",                     DataType.VARCHAR,             None,    "Name", None],
    ["EXPERIMENTAL_GOALS",     "General", "Experimental goals",     DataType.MULTILINE_VARCHAR, None,    "Goal of the experiment", None],
    ["GRANT",                 "General", "Grant",                 DataType.VARCHAR,            None,    "grant name", None],
    ["START_DATE",             "General", "Start Date",             DataType.TIMESTAMP,         None,    "Start Date", None],
    ["END_DATE",             "General", "End Date",                 DataType.TIMESTAMP,            None,    "End Date", None],
    ["EXPERIMENTAL_RESULTS","General", "Experimental results",     DataType.MULTILINE_VARCHAR, None,    "Brief summary of the results obtained", None],
    ["XMLCOMMENTS",            "Comments","Comments List",            DataType.XML,                None,    "Several comments can be added by different users", commentsScriptName]
]);

##
## Sample Types
##
createSampleTypeWithProperties("ANTIBODY", "", [
    ["FLY_STRAIN_NAME",                 "General",                "Fly strain name",                        DataType.VARCHAR,                None,                                "Fly strain name", None],
    ["OWNER",                             "General",                "Owner",                                DataType.CONTROLLEDVOCABULARY,    "OWNER",                            "Who produced/owned the sample", None],
    ["OWNER_NUMBER",                     "General",                "Owner number",                            DataType.MULTILINE_VARCHAR,        None,                                "Owner number", None],
    ["FLY_GENOTYPE",                     "Genotype",                "Genotype",                                DataType.VARCHAR,                None,                                "Genotype of the fly", None],
    ["ASSOCIATED_GENE",                 "Genotype",                "Associated gene",                        DataType.VARCHAR,                None,                                "The transgene may contain regulatory or coding sequences from an endogenous gene", None],
    ["MARKERS",                         "Genotype",                "Markers",                                DataType.VARCHAR,                None,                                "Markers available in the strain for further genetic modifications", None],
    ["ORIGIN",                             "Origin",                "Origin",                                DataType.CONTROLLEDVOCABULARY,    "ORIGIN",                            "How the strain/cell line was produced", None],
    ["STRAIN_CHECK",                     "Origin",                "Strain Check",                            DataType.CONTROLLEDVOCABULARY,    "CHECK",                            "Check done to verify the modifications introduced in the strain", None],
    ["SOURCE",                             "Origin",                "Source",                                DataType.VARCHAR,                None,                                "Source from where the construct/strain/cell line obtained or purchased, if it was not produced in the lab", None],
    ["MATING_PARTNERS",                 "Comments",                "Mating partners",                        DataType.MULTILINE_VARCHAR,        None,                                "Features needed for the mating partners", None],
    ["PUBLICATION",                     "Comments",                "Publication",                            DataType.MULTILINE_VARCHAR,        None,                                "Publication from where the information was first found OR technical sheet given by the manufacturer", None],
    ["NOTES",                             "Comments",             "Notes",                                DataType.MULTILINE_VARCHAR,        None,                                "Notes", None],
    ["XMLCOMMENTS",                     "Comments",                "Comments List",                        DataType.XML,                    None,                                "Several comments can be added by different users", commentsScriptName],
    ["ANNOTATIONS_STATE",                "Comments",                "Annotations State",                    DataType.XML,                    None,                                "Annotations State", annotationsScriptName]
]);


'NAME'  : ('antibody ID', DataType.VARCHAR),
  'ANTIBODY_ID_NR': ('antibody_id_nr', DataType.VARCHAR),  
  'ANTIGEN ': ('antigen', DataType.VARCHAR),
  'BARCODE' : ('barcode', DataType.VARCHAR),
  'BARCODE_LABEL' : ('barcode label', DataType.VARCHAR),
  'ANTIBODY_FACS_BLOCK' : ('block facs', DataType.CONTROLLEDVOCABULARY),
  'ANTIBODY_IF_BLOCK' : ('block IFF', DataType.CONTROLLEDVOCABULARY),
  'ANTIBODY_WB_BLOCK' : ('block western', DataType.CONTROLLEDVOCABULARY),
  'BOX' : ('box', DataType.VARCHAR),
  'CATALOGUE_NUMBER' : ('catalog id #', DataType.VARCHAR),
  'CLASS' : ('class', DataType.CONTROLLEDVOCABULARY),
  'CLONE' : ('clone', DataType.VARCHAR),
  'COMPANY' : ('company', DataType.CONTROLLEDVOCABULARY),
  'ANTIBODY_FACS_CONC' : ('conc facs', DataType.CONTROLLEDVOCABULARY), 
  'ANTIBODY_IF_CONC'  : ('conc IFF', DataType.CONTROLLEDVOCABULARY),
  'ANTIBODY_IP_CONC' : ('conc ip', DataType.CONTROLLEDVOCABULARY),
  'ANTIBODY_WB_CONC' : ('conc western', DataType.CONTROLLEDVOCABULARY), 
  'ANTIBODY_CONCENTRATION' : ('concentration', DataType.VARCHAR),   
  'ANTIBODY_CROSSREACTIVITY'  : ('crossreactivity', DataType.VARCHAR),  
  'ANTIBODY_FACS_FIX' : ('fix facs', DataType.CONTROLLEDVOCABULARY),
  'ANTIBODY_IF_FIX' : ('fix IFF', DataType.CONTROLLEDVOCABULARY),
  'ANTIBODY_WB_FIX' : ('fix western', DataType.CONTROLLEDVOCABULARY),
  'COMMENTS'  : ('info', DataType.VARCHAR),
  'INVESTIGATOR' : ('investigator', DataType.CONTROLLEDVOCABULARY),
  'LABEL' : ('label', DataType.CONTROLLEDVOCABULARY),
  'LOTNUMBER' : ('lotnumber', DataType.VARCHAR),
  'MODIFIED_BY': ('modified by', DataType.CONTROLLEDVOCABULARY), 
  'MONO_POLYCLONAL' : ('mono/polyclonal', DataType.CONTROLLEDVOCABULARY),
  'ANTIBODY_FACS_NOTES' : ('notes FACS', DataType.VARCHAR),
  'ANTIBODY_IF_NOTES' : ('notes IFF', DataType.VARCHAR),
  'ANTIBODY_IP_NOTES': ('notes IP', DataType.VARCHAR),
  'ANTIBODY_WB_NOTES' : ('notes western', DataType.VARCHAR),
  'RACK' : ('rack', DataType.VARCHAR),
  'PUBLISHED_IN' : ('reference', DataType.VARCHAR),
  'SERIAL_NUMBER' : ('serial number', DataType.INTEGER),
  'ANTIGEN_SIZE'  : ('size', DataType.VARCHAR),
  'SOURCE' : ('source', DataType.CONTROLLEDVOCABULARY),
  'CREATION_DATE' : ('creation date', DataType.TIMESTAMP),
  'MODIFICATION_DATE' : ('modification date', DataType.TIMESTAMP),  
  'FROZEN' : ('frozen', DataType.TIMESTAMP),
  'BOX_NUMBER' : ('antibody ID data box::box label', DataType.VARCHAR),
  'FROZEN_BY' : ('antibody ID data box::frozen by', DataType.CONTROLLEDVOCABULARY),
  'FREEZER_NAME'  : ('antibody ID data box::location', DataType.CONTROLLEDVOCABULARY),
  'BOX_POSITION': ('antibody ID data box::position', DataType.VARCHAR)
