# Unique code of this Data Store Server. Not more than 40 characters.
data-store-server-code = DSS1

# The root directory of the data store
storeroot-dir = data/store

# The directory where the command queue file is located; defaults to storeroot-dir 
commandqueue-dir =

# Port
port = 8444

# Session timeout in minutes
session-timeout = 720

# Path to the keystore
keystore.path = etc/openBIS.keystore

# Password of the keystore
keystore.password = changeit

# Key password of the keystore
keystore.key-password = changeit

# The check interval (in seconds)
check-interval = 60

# The time-out for clean up work in the shutdown sequence (in seconds).
# Note that that the maximal time for the shutdown sequence to complete can be as large 
# as twice this time.
# Remark: On a network file system, it is not recommended to turn this value to something 
# lower than 180.
shutdown-timeout = 180

# If free disk space goes below value defined here, a notification email will be sent.
# Value must be specified in kilobytes (1048576 = 1024 * 1024 = 1GB). If no high water mark is
# specified or if value is negative, the system will not be watching.
highwater-mark = -1

# If a data set is successfully registered it sends out an email to the registrator. 
# If this property is not specified, no email is sent to the registrator. This property
# does not affect the mails which are sent, when the data set could not be registered.
notify-successful-registration = false

# The URL of the openBIS server
server-url = https://localhost:8443/

# The username to use when contacting the openBIS server
username = etlserver_csb

# The password to use when contacting the openBIS server
password = etlserver_csb

# The base URL for Web client access.
download-url = https://localhost:8444

# SMTP properties (must start with 'mail' to be considered). 
# mail.smtp.host = localhost
# mail.from = datastore_server@localhost

# ---------------- Timing parameters for file system operations on remote shares.

# Time (in seconds) to wait for any file system operation to finish. Operations exceeding this 
# timeout will be terminated. 
timeout = 60
# Number of times that a timed out operation will be tried again (0 means: every file system 
# operation will only ever be performed once).
max-retries = 11
# Time (in seconds) to wait after an operation has been timed out before re-trying.  
failure-interval = 10 

# The period of no write access that needs to pass before an incoming data item is considered 
# complete and ready to be processed (in seconds) [default: 300]. 
# Valid only when auto-detection method is used to determine if an incoming data are ready to be processed.
quiet-period = 10


# Comma separated names of processing threads. Each thread should have configuration properties prefixed with its name.
# E.g. 'code-extractor' property for the thread 'my-etl' should be specified as 'my-etl.code-extractor'
inputs = main-thread,cifex

# ---------------------------------------------------------------------------
# main thread configuration
# ---------------------------------------------------------------------------
# The directory to watch for incoming data.
main-thread.incoming-dir = data/incoming

# Determines when the incoming data should be considered complete and ready to be processed.
# Allowed values: 
#  - auto-detection - when no write access will be detected for a specified 'quite-period'
#  - marker-file		- when an appropriate marker file for the data exists. 
# The default value is 'marker-file'.
main-thread.incoming-data-completeness-condition = auto-detection
# ---------------- Plugin properties
# The extractor class to use for code extraction
main-thread.data-set-info-extractor = ch.systemsx.cisd.etlserver.DataSetInfoExtractorWithFileNameProperty
main-thread.data-set-info-extractor.extractor = ch.ethz.bsse.cisd.plasmid.dss.ParentDirectoryDataSetInfoExtractor
main-thread.data-set-info-extractor.extractor.extractor = ch.systemsx.cisd.etlserver.DefaultDataSetInfoExtractor
main-thread.data-set-info-extractor.extractor.extractor.space-code = YEAST_LAB

# The extractor class to use for type extraction
main-thread.type-extractor = ch.ethz.bsse.cisd.plasmid.dss.PlasmidTypeExtractor
main-thread.type-extractor.dataset-types = SEQ_FILE: gb fasta xdna, RAW_DATA: ab1
main-thread.type-extractor.file-types = GB: gb, FASTA: fasta, XDNA: xdna, AB1: ab1
main-thread.type-extractor.default-file-type = PROPRIETARY
main-thread.type-extractor.directory-file-type = DIRECTORY

# The storage processor (IStorageProcessor implementation)
main-thread.storage-processor = ch.ethz.bsse.cisd.plasmid.dss.PlasmidStorageProcessor
main-thread.storage-processor.processor = ch.systemsx.cisd.etlserver.DefaultStorageProcessor
# path to the root directory of the server where PlasMapper is deployed (webapps in jetty)
main-thread.storage-processor.plasmapper-root-dir = /local0/openbis/sprint/openBIS-server/jetty/webapps
# the base URL of PlasMapper web application
main-thread.storage-processor.plasmapper-base-url = ${server-url}/PlasMapper

# The dataset handler (IDataSetHandler implementation)
main-thread.dataset-handler = ch.ethz.bsse.cisd.plasmid.dss.PlasmidDataSetHandler

# ---------------------------------------------------------------------------
# 'cifex' thread configuration
# ---------------------------------------------------------------------------
cifex.incoming-dir = data/incoming-cifex
cifex.incoming-data-completeness-condition = auto-detection
cifex.delete-unidentified = true
cifex.data-set-info-extractor = ch.systemsx.cisd.etlserver.DataSetInfoExtractorWithFileNameProperty
cifex.data-set-info-extractor.strip-extension = true
cifex.data-set-info-extractor.extractor = ch.systemsx.cisd.etlserver.cifex.CifexDataSetInfoExtractor
cifex.type-extractor = ch.systemsx.cisd.etlserver.cifex.CifexTypeExtractor
cifex.storage-processor = ch.systemsx.cisd.etlserver.CifexStorageProcessor
cifex.storage-processor.processor = ch.systemsx.cisd.etlserver.DefaultStorageProcessor
cifex.storage-processor.keep-file-regex = .*(?<!request\.properties)$