apply from: 'http://svncisd.ethz.ch/repos/cisd/gradle/trunk/javaproject.gradle'

configurations.create('clients')
configurations.create('clients_partial')


dependencies {
	compile project(':common'),
			project(':openbis-common'),
			project(':openbis'),
			// authentication and dbmigration are required as they contain later versions of 
			// some classes than cisd-cifex.jar. They need to be in classpath before cisd-cifex.jar
			project(':authentication'),
			project(':dbmigration')
			
	
	compile 'apache:ftpserver-core:+',
			'apache:sshd-core:+',
			'jfree:jfreechart:+',
			'cisd:cisd-cifex:+',
			'shriop:javacsv:+',
			'cisd:cisd-image-readers:+',
			'hjg:pngj:+',
			'apache:commons-fileupload:+'

	runtime 'sun:jai:+'
				
	testCompile project(path: ':common', configuration: 'tests'),
				project(path: ':openbis-common', configuration: 'tests'),
				project(path: ':openbis', configuration: 'tests')
				
	clients	'cglib:cglib-nodep:+',
			'cisd:cisd-args4j:+',
			'cisd:cisd-base:+',
			'apache:poi-ooxml:+',
			'springframework:spring-context:+',
			'python:jython:+',
			'apache:commons-httpclient:+',
			'marathon:marathon-spring-util:+',
			'apache:log4j:+',
			'dom4j:dom4j:+'
			
	clients_partial 'google:gwt-user:2.4'			
}

sourceSets { 
	test {
		resources {
			srcDirs = ['source/java']
		}
	}
}


task dssClient(type: Jar) {
	baseName 'dss_client'
	
	from (project(':common').sourceSets.main.output.getAsFileTree().plus(
		  project(':openbis-common').sourceSets.main.output.getAsFileTree().plus(
		  project(':openbis_api').sourceSets.main.output.getAsFileTree().plus(
		  project(':openbis').sourceSets.main.output.getAsFileTree().plus(
		  sourceSets.main.output.getAsFileTree())))).matching {
		include 'ch/systemsx/cisd/common/**/*.class'	
      	include 'ch/systemsx/cisd/openbis/common/**/*.class'
      	include 'ch/systemsx/cisd/openbis/generic/shared/**/*.class'
      	include 'ch/systemsx/cisd/openbis/plugin/query/shared/**/*.class'
        include 'ch/systemsx/cisd/openbis/dss/client/**/*.class'
      	include 'ch/systemsx/cisd/openbis/dss/generic/shared/api/**/*.class'
      	include 'ch/systemsx/cisd/openbis/dss/generic/shared/utils/**/*.class'
      	include 'org/python/core/SyspathArchiveHack.class'
	})
	
	from zipTree(configurations.clients_partial.files.iterator().next()).matching {
			include '**/com/google/gwt/user/client/rpc/IsSerializable.class'
			include '**/com/google/gwt/user/client/rpc/SerializableException.class'
	}
	
    manifest {
        def manifestClasspath = configurations.clients.collect { it.getName() }.join(',') 
		attributes("Main-Class": "ch.systemsx.cisd.openbis.dss.client.api.cli.DssClient",
                   "Version": versionNumber,
                   "Build-Number": "${versionNumber} (r${revisionNumber},${cleanFlag})",
                   "Class-Path": manifestClasspath )
    }
}	
dssClient.dependsOn compileJava


task dssGui(type: Jar) {
	baseName 'dss_gui'
	
	from (project(':common').sourceSets.main.output.getAsFileTree().plus(
		  project(':openbis-common').sourceSets.main.output.getAsFileTree().plus(
		  project(':openbis_api').sourceSets.main.output.getAsFileTree().plus(
		  project(':openbis').sourceSets.main.output.getAsFileTree().plus(
		  sourceSets.main.output.getAsFileTree())))).matching {
		include 'ch/systemsx/cisd/common/**/*.class'	
      	include 'ch/systemsx/cisd/openbis/common/**/*.class'
      	include 'ch/systemsx/cisd/openbis/generic/shared/**/*.class'
      	include 'ch/systemsx/cisd/openbis/plugin/query/shared/**/*.class'
        include 'ch/systemsx/cisd/openbis/dss/client/**/*.class'
      	include 'ch/systemsx/cisd/openbis/dss/generic/shared/api/**/*.class'
      	include 'ch/systemsx/cisd/openbis/dss/generic/shared/utils/**/*.class'
      	include 'org/python/core/SyspathArchiveHack.class'
	})
	
	from (fileTree(dir: 'resource', includes: ['ok.png', 'wrong.png', 'wait.gif']))
	
	from zipTree(configurations.clients_partial.files.iterator().next()).matching {
			include '**/com/google/gwt/user/client/rpc/IsSerializable.class'
			include '**/com/google/gwt/user/client/rpc/SerializableException.class'
	}
	
    manifest {
        def manifestClasspath = configurations.clients.collect { it.getName() }.join(',') 
		attributes("Main-Class": "ch.systemsx.cisd.openbis.dss.client.api.gui.DataSetUploadClient",
                   "Version": versionNumber,
                   "Build-Number": "${versionNumber} (r${revisionNumber},${cleanFlag})",
                   "Class-Path": manifestClasspath)                   
    }	
}	
dssGui.dependsOn compileJava

task dssClientZip(type: Zip) {
	baseName 'dss_client'

	from (configurations.clients) {
		into 'dss_client/lib'
	}
	
	from (dssClient.archivePath) {
		into 'dss_client/lib'
	}
	
	from('dist/dss_client.sh') {
		into 'dss_client'
	}
}
dssClientZip.dependsOn dssClient

task dssGuiZip(type: Zip) {
	baseName 'dss_upload_gui'

	from (configurations.clients) {
		into 'dss_upload_gui/lib'
	}
	
	from (dssGui.archivePath) {
		into 'dss_upload_gui/lib'
	}
}
dssGuiZip.dependsOn dssGui


build.dependsOn dssClientZip
build.dependsOn dssGuiZip

