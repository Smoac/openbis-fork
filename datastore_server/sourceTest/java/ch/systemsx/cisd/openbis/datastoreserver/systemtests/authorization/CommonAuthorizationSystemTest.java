/*
 * Copyright 2017 ETH Zuerich, CISD
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ch.systemsx.cisd.openbis.datastoreserver.systemtests.authorization;

import java.lang.reflect.Method;
import java.util.UUID;

import org.apache.log4j.Level;
import org.testng.Assert;
import org.testng.annotations.AfterGroups;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeGroups;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.DataProvider;

import ch.systemsx.cisd.common.exceptions.AuthorizationFailureException;
import ch.systemsx.cisd.common.exceptions.UserFailureException;
import ch.systemsx.cisd.common.logging.BufferedAppender;
import ch.systemsx.cisd.openbis.datastoreserver.systemtests.SystemTestCase;
import ch.systemsx.cisd.openbis.generic.server.authorization.project.TestAuthSessionProvider;
import ch.systemsx.cisd.openbis.generic.shared.authorization.IAuthorizationConfig;
import ch.systemsx.cisd.openbis.generic.shared.basic.dto.RoleWithHierarchy.RoleCode;
import ch.systemsx.cisd.openbis.generic.shared.dto.ExperimentPE;
import ch.systemsx.cisd.openbis.generic.shared.dto.ExperimentTypePE;
import ch.systemsx.cisd.openbis.generic.shared.dto.IAuthSessionProvider;
import ch.systemsx.cisd.openbis.generic.shared.dto.PersonPE;
import ch.systemsx.cisd.openbis.generic.shared.dto.ProjectPE;
import ch.systemsx.cisd.openbis.generic.shared.dto.RoleAssignmentPE;
import ch.systemsx.cisd.openbis.generic.shared.dto.SamplePE;
import ch.systemsx.cisd.openbis.generic.shared.dto.SampleTypePE;
import ch.systemsx.cisd.openbis.generic.shared.dto.SimpleSession;
import ch.systemsx.cisd.openbis.generic.shared.dto.SpacePE;
import ch.systemsx.cisd.openbis.generic.shared.dto.properties.EntityKind;
import ch.systemsx.cisd.openbis.systemtest.authorization.CommonAuthorizationSystemTestService;
import ch.systemsx.cisd.openbis.util.LogRecordingUtils;

/**
 * @author pkupczyk
 */
public class CommonAuthorizationSystemTest extends SystemTestCase
{

    protected static final String PERSON_OTHER = "test_user_other";

    protected static final String PERSON_WITH_PA_OFF = "test_user_pa_off";

    protected static final String PERSON_WITH_PA_ON = "test_user_pa_on";

    protected static final String PERSON_AND_PARAM_PROVIDER = "personAndParamProvider";

    protected static final String GROUP_PA_TESTS = "paTestsGroup";

    private BufferedAppender logRecorder;

    @BeforeGroups(groups = GROUP_PA_TESTS)
    protected void initData()
    {
        operationLog.info("==== Test data initialized ====");

        getCommonService().recordCreatedObjects();

        PersonPE personOther = new PersonPE();
        personOther.setUserId(PERSON_OTHER);
        getCommonService().createPerson(personOther);

        PersonPE personPaOff = new PersonPE();
        personPaOff.setUserId(PERSON_WITH_PA_OFF);
        getCommonService().createPerson(personPaOff);

        PersonPE personPaOn = new PersonPE();
        personPaOn.setUserId(PERSON_WITH_PA_ON);
        getCommonService().createPerson(personPaOn);

        ExperimentTypePE experimentType = new ExperimentTypePE();
        experimentType.setCode("AUTH-EXPERIMENT-TYPE");
        getCommonService().createType(experimentType, EntityKind.EXPERIMENT);

        SampleTypePE sampleType = new SampleTypePE();
        sampleType.setCode("AUTH-SAMPLE-TYPE");
        sampleType.setGeneratedCodePrefix("AUTH-SAMPLE-GENCODE-");
        sampleType.setListable(true);
        sampleType.setGeneratedFromHierarchyDepth(0);
        sampleType.setContainerHierarchyDepth(0);
        sampleType.setAutoGeneratedCode(false);
        sampleType.setSubcodeUnique(false);
        sampleType.setShowParentMetadata(false);
        getCommonService().createType(sampleType, EntityKind.SAMPLE);

        for (int sa = 1; sa <= 2; sa++)
        {
            SamplePE sharedSample = new SamplePE();
            sharedSample.setSampleType(sampleType);
            sharedSample.setCode(getSharedSampleCode(sa));
            sharedSample.setPermId(UUID.randomUUID().toString());
            sharedSample.setRegistrator(personOther);
            getCommonService().createSample(sharedSample);
        }

        for (int s = 1; s <= 2; s++)
        {
            SpacePE space = new SpacePE();
            space.setCode("AUTH-SPACE-" + s);
            space.setRegistrator(personOther);
            getCommonService().createSpace(space);

            for (int sa = 1; sa <= 2; sa++)
            {
                SamplePE spaceSample = new SamplePE();
                spaceSample.setSampleType(sampleType);
                spaceSample.setCode(getSpaceSampleCode(space, sa));
                spaceSample.setPermId(UUID.randomUUID().toString());
                spaceSample.setSpace(space);
                spaceSample.setRegistrator(personOther);
                getCommonService().createSample(spaceSample);

                SamplePE spaceContainedSample = new SamplePE();
                spaceContainedSample.setSampleType(sampleType);
                spaceContainedSample.setCode(getSpaceContainedSampleCode(space, sa));
                spaceContainedSample.setContainer(spaceSample);
                spaceContainedSample.setPermId(UUID.randomUUID().toString());
                spaceContainedSample.setSpace(space);
                spaceContainedSample.setRegistrator(personOther);
                getCommonService().createSample(spaceContainedSample);
            }

            for (int p = 1; p <= 2; p++)
            {
                ProjectPE project = new ProjectPE();
                project.setCode("AUTH-PROJECT-" + p);
                project.setPermId(UUID.randomUUID().toString());
                project.setSpace(space);
                project.setRegistrator(personOther);
                getCommonService().createProject(project);

                if (SamplePE.projectSamplesEnabled)
                {
                    for (int sa = 1; sa <= 2; sa++)
                    {
                        SamplePE projectSample = new SamplePE();
                        projectSample.setSampleType(sampleType);
                        projectSample.setCode(getProjectSampleCode(project, sa));
                        projectSample.setPermId(UUID.randomUUID().toString());
                        projectSample.setSpace(space);
                        projectSample.setProject(project);
                        projectSample.setRegistrator(personOther);
                        getCommonService().createSample(projectSample);
                    }
                }

                ExperimentPE experimentEmpty = new ExperimentPE();
                experimentEmpty.setExperimentType(experimentType);
                experimentEmpty.setCode("AUTH-EXPERIMENT-EMPTY");
                experimentEmpty.setPermId(UUID.randomUUID().toString());
                experimentEmpty.setProject(project);
                experimentEmpty.setRegistrator(personOther);
                getCommonService().createExperiment(experimentEmpty);

                for (int e = 1; e <= 2; e++)
                {
                    ExperimentPE experiment = new ExperimentPE();
                    experiment.setExperimentType(experimentType);
                    experiment.setCode("AUTH-EXPERIMENT-" + e);
                    experiment.setPermId(UUID.randomUUID().toString());
                    experiment.setProject(project);
                    experiment.setRegistrator(personOther);
                    getCommonService().createExperiment(experiment);

                    for (int sa = 1; sa <= 2; sa++)
                    {
                        SamplePE experimentSample = new SamplePE();
                        experimentSample.setSampleType(sampleType);
                        experimentSample.setCode(getExperimentSampleCode(experiment, sa));
                        experimentSample.setPermId(UUID.randomUUID().toString());
                        experimentSample.setSpace(space);
                        experimentSample.setExperiment(experiment);
                        experimentSample.setRegistrator(personOther);
                        getCommonService().createSample(experimentSample);
                    }
                }
            }
        }
    }

    @AfterGroups(groups = GROUP_PA_TESTS)
    protected void removeData()
    {
        getCommonService().removeCreatedObjects();

        operationLog.info("==== Test data removed ====");
    }

    @BeforeMethod
    public void beforeMethod(Method method)
    {
        logRecorder = LogRecordingUtils.createRecorder("%-5p %c - %m%n", Level.DEBUG);
        System.out.println(">>>>>>>>> BEFORE METHOD: " + method.getName());
    }

    @AfterMethod
    public void afterMethod(Method method)
    {
        logRecorder.reset();
        System.out.println("<<<<<<<<< AFTER METHOD: " + method.getName());
    }

    @DataProvider(name = PERSON_AND_PARAM_PROVIDER)
    public Object[][] providePersonsAndParams()
    {
        PersonPE[] persons = providePersons();
        Object[] params = provideParams();

        Object[][] personsAndParams = new Object[persons.length * params.length][2];
        int index = 0;

        for (PersonPE person : persons)
        {
            for (Object param : params)
            {
                personsAndParams[index][0] = person;
                personsAndParams[index][1] = param;
                index++;
            }
        }

        return personsAndParams;
    }

    public PersonPE[] providePersons()
    {
        PersonPE userWithPAOff = new PersonPE();
        userWithPAOff.setUserId(PERSON_WITH_PA_OFF);

        PersonPE userWithPAOn = new PersonPE();
        userWithPAOn.setUserId(PERSON_WITH_PA_ON);

        return new PersonPE[] { userWithPAOff, userWithPAOn };
    }

    public Object[] provideParams()
    {
        return new Object[] { null };
    }

    public Object[] provideSampleKinds(SampleKind sharedSampleKind)
    {
        if (SamplePE.projectSamplesEnabled)
        {
            return new Object[] { SampleKind.PROJECT };
        } else
        {
            if (false == SampleKind.SHARED_READ.equals(sharedSampleKind) && false == SampleKind.SHARED_READ_WRITE.equals(sharedSampleKind))
            {
                throw new RuntimeException("Incorrect shared sample kind: " + sharedSampleKind);
            }

            return new Object[] { sharedSampleKind, SampleKind.SPACE, SampleKind.SPACE_CONTAINED, SampleKind.EXPERIMENT };
        }
    }

    protected IAuthSessionProvider createSessionProvider(PersonPE person)
    {
        SimpleSession session = new SimpleSession();
        session.setPerson(person);
        return new TestAuthSessionProvider(session);
    }

    protected RoleAssignmentPE createInstanceRole(RoleCode roleCode)
    {
        RoleAssignmentPE ra = new RoleAssignmentPE();
        ra.setRole(roleCode);
        return ra;
    }

    protected RoleAssignmentPE createSpaceRole(RoleCode roleCode, SpacePE space)
    {
        RoleAssignmentPE ra = new RoleAssignmentPE();
        ra.setRole(roleCode);
        ra.setSpace(space);
        return ra;
    }

    protected RoleAssignmentPE createProjectRole(RoleCode roleCode, ProjectPE project)
    {
        RoleAssignmentPE ra = new RoleAssignmentPE();
        ra.setRole(roleCode);
        ra.setProject(project);
        return ra;
    }

    public CommonAuthorizationSystemTestService getCommonService()
    {
        return applicationContext.getBean(CommonAuthorizationSystemTestService.class);
    }

    public IAuthorizationConfig getAuthorizationConfig()
    {
        return applicationContext.getBean(IAuthorizationConfig.class);
    }

    public SpacePE getSpace1()
    {
        return getCommonService().tryFindSpace("AUTH-SPACE-1");
    }

    public SpacePE getSpace2()
    {
        return getCommonService().tryFindSpace("AUTH-SPACE-2");
    }

    public ProjectPE getProject11()
    {
        return getCommonService().tryFindProject(getSpace1().getCode(), "AUTH-PROJECT-1");
    }

    public ProjectPE getProject12()
    {
        return getCommonService().tryFindProject(getSpace1().getCode(), "AUTH-PROJECT-2");
    }

    public ProjectPE getProject21()
    {
        return getCommonService().tryFindProject(getSpace2().getCode(), "AUTH-PROJECT-1");
    }

    public ProjectPE getProject22()
    {
        return getCommonService().tryFindProject(getSpace2().getCode(), "AUTH-PROJECT-2");
    }

    public ExperimentPE getExperiment(SpacePE spacePE, ProjectPE projectPE)
    {
        return getCommonService().tryFindExperiment(projectPE, "AUTH-EXPERIMENT-1");
    }

    public ExperimentPE getExperimentEmpty(SpacePE spacePE, ProjectPE projectPE)
    {
        return getCommonService().tryFindExperiment(projectPE, "AUTH-EXPERIMENT-EMPTY");
    }

    public SamplePE getSample(SpacePE spacePE, ProjectPE projectPE, SampleKind sampleKind)
    {
        switch (sampleKind)
        {
            case SHARED_READ:
            case SHARED_READ_WRITE:
                return getSharedSample1();
            case SPACE:
                return getSpaceSample(spacePE);
            case SPACE_CONTAINED:
                return getSpaceContainedSample(spacePE);
            case PROJECT:
                return getProjectSample(projectPE);
            case EXPERIMENT:
                return getExperimentSample(spacePE, projectPE);
            default:
                throw new RuntimeException();
        }
    }

    private String getSharedSampleCode(int index)
    {
        return "AUTH-SAMPLE-" + index;
    }

    public SamplePE getSharedSample1()
    {
        return getCommonService().tryFindSharedSample(getSharedSampleCode(1));
    }

    public SamplePE getSharedSample2()
    {
        return getCommonService().tryFindSharedSample(getSharedSampleCode(2));
    }

    private String getSpaceSampleCode(SpacePE spacePE, int index)
    {
        return spacePE.getCode() + "-SAMPLE-" + index;
    }

    public SamplePE getSpaceSample(SpacePE spacePE)
    {
        return getCommonService().tryFindSpaceSample(spacePE, getSpaceSampleCode(spacePE, 1));
    }

    private String getSpaceContainedSampleCode(SpacePE spacePE, int index)
    {
        return spacePE.getCode() + "-CONTAINED-SAMPLE-" + index;
    }

    public SamplePE getSpaceContainedSample(SpacePE spacePE)
    {
        return getCommonService().tryFindSpaceSample(spacePE, getSpaceContainedSampleCode(spacePE, 1));
    }

    private String getProjectSampleCode(ProjectPE projectPE, int index)
    {
        return projectPE.getSpace().getCode() + "-" + projectPE.getCode() + "-SAMPLE-" + index;
    }

    public SamplePE getProjectSample(ProjectPE projectPE)
    {
        if (false == SamplePE.projectSamplesEnabled)
        {
            throw new RuntimeException("Cannot get a project sample as the project samples feature is disabled");
        }
        return getCommonService().tryFindProjectSample(projectPE, getProjectSampleCode(projectPE, 1));
    }

    private String getExperimentSampleCode(ExperimentPE experimentPE, int index)
    {
        return experimentPE.getProject().getSpace().getCode() + "-" + experimentPE.getProject().getCode() + "-" + experimentPE.getCode() + "-SAMPLE-"
                + index;
    }

    public SamplePE getExperimentSample(SpacePE spacePE, ProjectPE projectPE)
    {
        if (SamplePE.projectSamplesEnabled)
        {
            throw new RuntimeException("Cannot get an experiment sample as the project samples feature is enabled");
        }
        ExperimentPE experimentPE = getExperiment(spacePE, projectPE);
        return getCommonService().tryFindSpaceSample(spacePE, getExperimentSampleCode(experimentPE, 1));
    }

    public static void assertAuthorizationFailureExceptionThatNotEnoughPrivileges(Throwable t)
    {
        assertException(t, AuthorizationFailureException.class, ".*does not have enough privileges.*");
    }

    public static void assertAuthorizationFailureExceptionThatNoRoles(Throwable t)
    {
        assertException(t, AuthorizationFailureException.class, ".*No role assignments could be found for user.*");
    }

    public static void assertUserFailureExceptionThatProjectDoesNotExist(Throwable t)
    {
        assertException(t, UserFailureException.class, "Project with ID .* does not exist. Maybe someone has just deleted it.");
    }

    public static void assertUserFailureExceptionThatExperimentDoesNotExist(Throwable t)
    {
        assertException(t, UserFailureException.class, "Experiment with ID .* does not exist. Maybe someone has just deleted it.");
    }

    public static void assertUserFailureExceptionThatSampleDoesNotExist(Throwable t)
    {
        assertException(t, UserFailureException.class, "Sample with ID .* does not exist. Maybe someone has just deleted it.");
    }

    public static void assertNoException(Throwable actualException)
    {
        if (actualException != null)
        {
            actualException.printStackTrace(System.err);
            Assert.fail("Unexpected exception '" + actualException.getClass().getName() + "'.");
        }
    }

    public static void assertException(Throwable actualException, Class<?> expectedClass, String expectedMessageRegexp)
    {
        if (actualException == null)
        {
            Assert.fail("Expected exception '" + expectedClass.getName() + "' but got null");
        } else
        {
            if (actualException.getClass().equals(expectedClass))
            {
                actualException.printStackTrace(System.out);

                if (expectedMessageRegexp != null)
                {
                    if (actualException.getMessage() == null || false == actualException.getMessage().matches(expectedMessageRegexp))
                    {
                        Assert.fail(
                                "Error message was expected to match '" + expectedMessageRegexp + "' regexp but got '" + actualException.getMessage()
                                        + "'.");
                    }
                }
            } else
            {
                actualException.printStackTrace(System.err);
                Assert.fail("Expected exception '" + expectedClass.getName() + "' but got '" + actualException.getClass().getName() + "'.");
            }
        }
    }

    public enum SampleKind
    {

        SHARED_READ, SHARED_READ_WRITE, SPACE, SPACE_CONTAINED, PROJECT, EXPERIMENT

    }

}