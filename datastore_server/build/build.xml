<project name="datastore_server" default="dist" basedir="..">
	<import file="../../build_resources/ant/build-common.xml" />
	<project-classpath name="ecp" classes="${classes}" />

	<property name="dss.original.dist" value="../datastore_server/dist" />
	<property name="dss" value="datastore_server" />
	<property name="dist.datastore_server" value="${dist}/${dss}" />
	<property name="dist.datastore_server.lib" value="${dist.datastore_server}/lib" />
	<property name="dss-jar.file" value="${dist.datastore_server.lib}/datastore_server.jar" />
	<property name="dist.file.prefix" value="${dist}/datastore_server" />
	
	<property name="dss_client" value="dss_client" />
	<property name="dist.dss_client" value="${dist}/dss_client" />
	<property name="dist.dss_client.lib" value="${dist.dss_client}/lib" />
  <property name="dss-client-jar.file" value="${dist.dss_client.lib}/dss_client.jar" />
  <property name="dist.client.file.prefix" value="${dist}/dss_client" />
	
	<property name="nativesrc" value="${lib}/unix/native" />
	<property name="nativeroot" value="${targets}/ant" />
	<property name="native" value="${nativeroot}/native" />

	<target name="clean">
		<delete dir="${dist}" />
	</target>

	<target name="compile" depends="build-common.compile, clean" />

	<target name="run-tests">
		<antcall target="build-common.run-tests">
			<param name="test.suite" value="tests.xml" />
		</antcall>
	</target>

	<target name="dss-jar" depends="compile">
		<mkdir dir="${dist.datastore_server.lib}" />
		<delete dir="tmp/test"/><!-- remove this directory in order to get a clean clean-flag -->
		<build-info revision="revision.number" version="version.number" clean="clean.flag" />
		<echo file="${build.info.file}">${version.number}:${revision.number}:${clean.flag}</echo>
		<copy todir="${native}">
			<fileset dir="${nativesrc}">
				<include name="**/unix.so" />
			</fileset>
		</copy>
		<recursive-jar destfile="${dss-jar.file}">
			<fileset dir="${classes}">
				<include name="**/*.class" />
				<include name="**/*.xsd" />
				<include name="${build.info.filename}" />
			</fileset>
			<fileset dir="${nativeroot}">
				<include name="**/unix.so" />
			</fileset>
			<manifest>
				<attribute name="Main-Class" value="ch.systemsx.cisd.openbis.dss.generic.DataStoreServer" />
				<attribute name="Class-Path"
				           value="datastore_server-plugins.jar cisd-args4j.jar cisd-base.jar cifex.jar jetty.jar jetty-util.jar 
                	          servlet-api-2.5.jar log4j.jar activation.jar mail.jar spring.jar fast-md5.jar
                                  commons-codec.jar commons-lang.jar commons-io.jar commons-logging.jar 
                	          commons-httpclient.jar commons-pool.jar commons-dbcp.jar eodsql.jar postgresql.jar
					               		ij.jar jaxb-api.jar jaxb-impl.jar jsr173_1-0_api.jar csv.jar
					               		jcommon-1.0.16.jar jfreechart-1.0.13.jar" />
				<attribute name="Version" value="${version.number}" />
				<attribute name="Build-Number"
				           value="${version.number} (r${revision.number},${clean.flag})" />
			</manifest>
		</recursive-jar>
		<jar update="true" destfile="${dss-jar.file}">
			<fileset dir="../datastore_server/${sources}">
				<include name="**/*.xml" />
				<include name="**/*.xsd" />
			</fileset>
      <fileset dir="${sources}">
        <include name="**/*.xml" />
        <include name="**/*.xsd" />
      </fileset>
			<fileset dir="../${ant.project.name}/${classes}" includes="ch/systemsx/cisd/openbis/dss/BuildAndEnvironmentInfo.class"/>
			<zipfileset src="${lib}/gwt2.0/gwt-user.jar"
			            includes="com/google/gwt/user/client/rpc/IsSerializable.class, com/google/gwt/user/client/rpc/SerializableException.class" />
		</jar>
	</target>

	<target name="dist">
		<antcall target="make-dist">
			<param name="variant" value="" />
		</antcall>
	</target>

	<!-- parameters: 
					variant - will be used in the distribution file name  
		-->
	<target name="make-dist" depends="dss-jar, dist-client">
		<copy file="${dss-jar.file}" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/cisd-base/cisd-base.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/cisd-args4j/cisd-args4j.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/cifex/cifex.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/jetty/jetty.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/jetty/jetty-util.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/jetty/servlet-api-2.5.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/activation/activation.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/mail/mail.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/log4j/log4j.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/fast-md5/fast-md5.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/commons-codec/commons-codec.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/commons-io/commons-io.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/commons-lang/commons-lang.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/commons-dbcp/commons-dbcp.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/commons-pool/commons-pool.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/postgresql/postgresql.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/commons-logging/commons-logging.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/commons-httpclient/commons-httpclient.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/eodsql/eodsql.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/imagej/ij.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/jaxb/jaxb-api.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/jaxb/jaxb-impl.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/jaxb/jsr173_1.0_api.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/spring/spring.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/fast-md5/fast-md5.jar" todir="${dist.datastore_server.lib}" />
		<copy file="${lib}/csv/csv.jar" todir="${dist.datastore_server.lib}" />
    <copy file="${lib}/jfreechart/jcommon-1.0.16.jar" todir="${dist.datastore_server.lib}" />
    <copy file="${lib}/jfreechart/jfreechart-1.0.13.jar" todir="${dist.datastore_server.lib}" />

		<property name="dist.file"
		          value="${dist.file.prefix}${variant}-${version.number}-r${revision.number}.zip" />
		<zip basedir="${dist}" destfile="${dist.file}" excludes="*.zip *.jar">
			<zipfileset dir="${dss.original.dist}" 
				    excludes="**/datastore_server.sh, **/dss_client.sh, **/service.properties, **/log.xml" 
				    prefix="${dss}" />
			<zipfileset dir="dist" 
				    includes="**/service.properties, **/log.xml" 
				    prefix="${dss}" />
			<zipfileset file="${dss.original.dist}/datastore_server.sh"
			            filemode="755"
			            prefix="${dss}" />
		</zip>
		<delete dir="${dist.datastore_server}" />
	</target>
  
  <!--  
    dss-client-jar is designed to be called from make-dist. Thus, it does not depend on compile, but
    should be called after dss-jar. -->
  <target name="dss-client-jar" depends="">
    <mkdir dir="${dist.dss_client.lib}" />
    <build-info revision="revision.number" version="version.number" clean="clean.flag" />
    <echo file="${build.info.file}">${version.number}:${revision.number}:${clean.flag}</echo>
    <recursive-jar destfile="${dss-client-jar.file}">
      <fileset dir="${classes}">
      	<include name="ch/systemsx/cisd/common/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/generic/shared/**/*.class" />
        <include name="ch/systemsx/cisd/openbis/dss/component/**/*.class" />
        <include name="ch/systemsx/cisd/openbis/dss/rpc/**/*.class" />
        <include name="${build.info.filename}" />
      </fileset>
      <manifest>
        <attribute name="Main-Class" value="ch.systemsx.cisd.openbis.dss.rpc.client.cli.DssClient" />
        <attribute name="Class-Path"
                   value="cisd-base.jar cisd-args4j.jar stream-supporting-httpinvoker.jar log4j.jar commons-lang.jar commons-io.jar commons-logging.jar 
 commons-codec.jar commons-httpclient.jar spring.jar" />
        <attribute name="Version" value="${version.number}" />
        <attribute name="Build-Number"
                   value="${version.number} (r${revision.number},${clean.flag})" />
      </manifest>
    </recursive-jar>
    <jar update="true" destfile="${dss-client-jar.file}">
      <fileset dir="../${ant.project.name}/${classes}" includes="ch/systemsx/cisd/openbis/dss/BuildAndEnvironmentInfo.class"/>
    	<zipfileset src="${lib}/gwt2.0/gwt-user.jar"
    				            includes="com/google/gwt/user/client/rpc/IsSerializable.class, com/google/gwt/user/client/rpc/SerializableException.class" />
    </jar>
  </target>
	
	<target name="dist-client">
		<antcall target="make-dist-client">
			<param name="variant" value="" />
		</antcall>
	</target>
  
  <target name="make-dist-client" depends="dss-client-jar">
    <copy file="${dss-client-jar.file}" todir="${dist.dss_client.lib}" />
    <copy file="${lib}/cisd-base/cisd-base.jar" todir="${dist.dss_client.lib}" />
    <copy file="${lib}/cisd-args4j/cisd-args4j.jar" todir="${dist.dss_client.lib}" />
  	<copy file="${lib}/spring/third-party/stream-supporting-httpinvoker.jar" todir="${dist.dss_client.lib}" />
    <copy file="${lib}/log4j/log4j.jar" todir="${dist.dss_client.lib}" />
    <copy file="${lib}/commons-lang/commons-lang.jar" todir="${dist.dss_client.lib}" />
    <copy file="${lib}/commons-io/commons-io.jar" todir="${dist.dss_client.lib}" />
    <copy file="${lib}/commons-logging/commons-logging.jar" todir="${dist.dss_client.lib}" />
    <copy file="${lib}/commons-codec/commons-codec.jar" todir="${dist.dss_client.lib}" />
    <copy file="${lib}/commons-httpclient/commons-httpclient.jar" todir="${dist.dss_client.lib}" />
    <copy file="${lib}/spring/spring.jar" todir="${dist.dss_client.lib}" />
    <property name="dist.file"
              value="${dist.client.file.prefix}${variant}-${version.number}-r${revision.number}.zip" />
    
    <zip destfile="${dist.file}">
      <zipfileset dir="${dist.dss_client.lib}"
                  prefix="${dss_client}/lib" />
      <zipfileset file="${dss.original.dist}/dss_client.sh"
                  filemode="755"
                  prefix="${dss_client}" />
    </zip>
    <delete dir="${dist.dss_client}" />
    
  </target>

	<target name="ci" depends="run-tests, check-dependencies, dist">
	</target>
  
  <target name="api-doc">
    <javadoc 
      destdir="targets/docs/api" 
      access="public" 
      author="true" 
      version="true" 
      classpath="${ecp}:../common/targets/classes">
    	<fileset dir="${sources}">
        <include name="ch/systemsx/cisd/openbis/dss/component/*.java" />
        <include name="ch/systemsx/cisd/openbis/dss/rpc/client/*.java" />
        <include name="ch/systemsx/cisd/openbis/dss/rpc/shared/*.java" />
        <exclude name="ch/systemsx/cisd/openbis/dss/rpc/shared/FileInfoDssBuilder.java" />
      </fileset>
    </javadoc>
  </target>

</project>