/*
 * Copyright ETH 2017 - 2023 ZÃ¼rich, Scientific IT Services
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ch.ethz.sis.openbis.generic.server.asapi.v3.executor.sample;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import ch.ethz.sis.openbis.generic.asapi.v3.dto.sample.create.SampleTypeCreation;
import ch.ethz.sis.openbis.generic.server.asapi.v3.executor.IOperationContext;
import ch.ethz.sis.openbis.generic.server.asapi.v3.executor.entity.AbstractCreateEntityTypeExecutor;
import ch.systemsx.cisd.common.exceptions.UserFailureException;
import ch.systemsx.cisd.openbis.generic.server.business.bo.IEntityTypeBO;
import ch.systemsx.cisd.openbis.generic.shared.basic.dto.SampleType;
import ch.systemsx.cisd.openbis.generic.shared.dto.SampleTypePE;
import ch.systemsx.cisd.openbis.generic.shared.dto.properties.EntityKind;

/**
 * @author pkupczyk
 */
@Component
public class CreateSampleTypesExecutor extends AbstractCreateEntityTypeExecutor<SampleTypeCreation, SampleType, SampleTypePE>
        implements ICreateSampleTypeExecutor
{

    @Autowired
    private ISampleTypeAuthorizationExecutor authorizationExecutor;

    @Override
    protected ch.systemsx.cisd.openbis.generic.shared.basic.dto.EntityKind getPEEntityKind()
    {
        return ch.systemsx.cisd.openbis.generic.shared.basic.dto.EntityKind.SAMPLE;
    }

    @Override
    protected EntityKind getDAOEntityKind()
    {
        return EntityKind.SAMPLE;
    }

    @Override
    protected SampleType newType()
    {
        return new SampleType();
    }

    @Override
    protected void checkTypeSpecificFields(SampleTypeCreation creation)
    {
        if (creation.getGeneratedCodePrefix() == null)
        {
            throw new UserFailureException("GeneratedCodePrefix cannot be null.");
        }
    }

    @Override
    protected void fillTypeSpecificFields(SampleType type, SampleTypeCreation creation)
    {
        type.setAutoGeneratedCode(creation.isAutoGeneratedCode());
        type.setGeneratedCodePrefix(creation.getGeneratedCodePrefix());
        type.setSubcodeUnique(creation.isSubcodeUnique());
        type.setListable(creation.isListable());
        type.setShowContainer(creation.isShowContainer());
        type.setShowParents(creation.isShowParents());
        type.setShowParentMetadata(creation.isShowParentMetadata());
    }

    @Override
    protected void defineType(IOperationContext context, SampleType type)
    {
        IEntityTypeBO typeBO = businessObjectFactory.createEntityTypeBO(context.getSession());
        typeBO.define(type);
        typeBO.save();
    }

    @Override
    protected void checkAccess(IOperationContext context)
    {
        authorizationExecutor.canCreate(context);
    }

}
