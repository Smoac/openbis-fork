/*
 * Copyright ETH 2011 - 2023 ZÃ¼rich, Scientific IT Services
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ch.systemsx.cisd.openbis.generic.client.web.server.resultset;

import static ch.systemsx.cisd.openbis.generic.client.web.client.dto.SampleTypeGridColumnIDs.AUTO_GENERATE_CODES_LABEL;
import static ch.systemsx.cisd.openbis.generic.client.web.client.dto.SampleTypeGridColumnIDs.GENERATED_CODE_PREFIX;
import static ch.systemsx.cisd.openbis.generic.client.web.client.dto.SampleTypeGridColumnIDs.IS_LISTABLE;
import static ch.systemsx.cisd.openbis.generic.client.web.client.dto.SampleTypeGridColumnIDs.IS_SHOW_CONTAINER;
import static ch.systemsx.cisd.openbis.generic.client.web.client.dto.SampleTypeGridColumnIDs.IS_SHOW_PARENTS;
import static ch.systemsx.cisd.openbis.generic.client.web.client.dto.SampleTypeGridColumnIDs.SHOW_PARENT_METADATA_LABEL;
import static ch.systemsx.cisd.openbis.generic.client.web.client.dto.SampleTypeGridColumnIDs.SUBCODE_UNIQUE_LABEL;

import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import ch.ethz.sis.openbis.generic.asapi.v3.IApplicationServerApi;
import ch.ethz.sis.openbis.generic.asapi.v3.dto.common.search.SearchResult;
import ch.ethz.sis.openbis.generic.asapi.v3.dto.sample.fetchoptions.SampleTypeFetchOptions;
import ch.ethz.sis.openbis.generic.asapi.v3.dto.sample.search.SampleTypeSearchCriteria;
import ch.ethz.sis.openbis.generic.asapi.v3.dto.semanticannotation.SemanticAnnotation;
import ch.systemsx.cisd.openbis.generic.shared.ICommonServer;
import ch.systemsx.cisd.openbis.generic.shared.basic.SimpleYesNoRenderer;
import ch.systemsx.cisd.openbis.generic.shared.basic.dto.DataSetType;
import ch.systemsx.cisd.openbis.generic.shared.basic.dto.SampleType;
import ch.systemsx.cisd.openbis.generic.shared.util.TypedTableModelBuilder;

/**
 * Provider of {@link DataSetType} instances.
 * 
 * @author Franz-Josef Elmer
 */
public class SampleTypeProvider extends EntityTypeProvider<SampleType>
{

    private IApplicationServerApi applicationServerApi;

    private Map<String, List<SemanticAnnotation>> annotationsMap;

    public SampleTypeProvider(ICommonServer commonServer, IApplicationServerApi applicationServerApi, String sessionToken)
    {
        super(commonServer, sessionToken);
        this.applicationServerApi = applicationServerApi;
    }

    @Override
    protected List<SampleType> listTypes()
    {
        List<SampleType> sampleTypes = commonServer.listSampleTypes(sessionToken);

        annotationsMap = createAnnotationsMap(sampleTypes);

        return sampleTypes;
    }

    @Override
    protected void addMoreColumns(TypedTableModelBuilder<SampleType> builder)
    {
        builder.addColumn(IS_LISTABLE).hideByDefault();
        builder.addColumn(IS_SHOW_CONTAINER).withDefaultWidth(200).hideByDefault();
        builder.addColumn(IS_SHOW_PARENTS).withDefaultWidth(200).hideByDefault();
        builder.addColumn(SUBCODE_UNIQUE_LABEL).hideByDefault();
        builder.addColumn(AUTO_GENERATE_CODES_LABEL).hideByDefault();
        builder.addColumn(SHOW_PARENT_METADATA_LABEL).hideByDefault();
        builder.addColumn(GENERATED_CODE_PREFIX).hideByDefault();

        new SemanticAnnotationProvider().addMoreColumns(builder, false);
    }

    @Override
    protected void addMoreCells(TypedTableModelBuilder<SampleType> builder, SampleType type)
    {
        builder.column(IS_LISTABLE).addString(SimpleYesNoRenderer.render(type.isListable()));
        builder.column(IS_SHOW_CONTAINER).addString(
                SimpleYesNoRenderer.render(type.isShowContainer()));
        builder.column(IS_SHOW_PARENTS).addString(SimpleYesNoRenderer.render(type.isShowParents()));
        builder.column(SUBCODE_UNIQUE_LABEL).addString(
                SimpleYesNoRenderer.render(type.isSubcodeUnique()));
        builder.column(AUTO_GENERATE_CODES_LABEL).addString(
                SimpleYesNoRenderer.render(type.isAutoGeneratedCode()));
        builder.column(SHOW_PARENT_METADATA_LABEL).addString(
                SimpleYesNoRenderer.render(type.isShowParentMetadata()));
        builder.column(GENERATED_CODE_PREFIX).addString(type.getGeneratedCodePrefix());

        List<SemanticAnnotation> annotations = annotationsMap.get(type.getCode());
        new SemanticAnnotationProvider().addMoreCells(builder, annotations, null);
    }

    private Map<String, List<SemanticAnnotation>> createAnnotationsMap(Collection<SampleType> sampleTypes)
    {
        Collection<String> codes = new HashSet<String>();

        for (SampleType sampleType : sampleTypes)
        {
            codes.add(sampleType.getCode());
        }

        SampleTypeSearchCriteria criteria = new SampleTypeSearchCriteria();
        criteria.withCodes().thatIn(codes);

        SampleTypeFetchOptions fo = new SampleTypeFetchOptions();
        fo.withSemanticAnnotations();

        SearchResult<ch.ethz.sis.openbis.generic.asapi.v3.dto.sample.SampleType> result =
                applicationServerApi.searchSampleTypes(sessionToken, criteria, fo);
        Map<String, List<SemanticAnnotation>> map = new HashMap<String, List<SemanticAnnotation>>();

        for (ch.ethz.sis.openbis.generic.asapi.v3.dto.sample.SampleType sampleType : result.getObjects())
        {
            map.put(sampleType.getCode(), sampleType.getSemanticAnnotations());
        }

        return map;
    }

}
