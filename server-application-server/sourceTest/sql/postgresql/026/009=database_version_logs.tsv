007	source/sql/postgresql/007/schema-007.sql	SUCCESS	2008-01-05 14:51:36.56	-- D:\\\\DDL\\\\postgresql\\\\schema-007.sql\\012--\\012-- Generated for ANSI SQL92 on Thu Aug 23  19:02:15 2007 by Server Generator 10.1.2.6.18\\012-- Post generation PostgreSQL specific Changes:\\012-- \\012--  1. change domain FILE from BIT(32000) to BYTEA\\012--  2. change domain TECH_ID from NUMERIC(20) to BIGINT\\012--  3. Put single quotes around the default value NOW in the create domain statement for the domain TIME_STAMP\\012--     i.e. change CREATE DOMAIN TIME_STAMP AS TIMESTAMP DEFAULT now; to CREATE DOMAIN TIME_STAMP AS TIMESTAMP DEFAULT 'now';\\012--  4. Temporarily not created, due to data quality issues with the master plate layout data\\012--\\012-- ALTER TABLE MOLECULES ADD CONSTRAINT MOLE_BK_UK UNIQUE(SEQUENCE);\\012\\012\\012\\012CREATE DOMAIN DESCRIPTION_80 AS VARCHAR(80);\\012CREATE DOMAIN USER_ID AS VARCHAR(20);\\012CREATE DOMAIN DOUBLE_PRECISION_VALUE AS DOUBLE PRECISION;\\012CREATE DOMAIN FILE_NAME AS VARCHAR(100);\\012CREATE DOMAIN TECH_ID AS BIGINT;\\012CREATE DOMAIN OBJECT_NAME AS VARCHAR(50);\\012CREATE DOMAIN TIME_STAMP AS TIMESTAMP DEFAULT CURRENT_TIMESTAMP;\\012CREATE DOMAIN REAL_VALUE AS REAL;\\012CREATE DOMAIN FILE AS BYTEA;\\012CREATE DOMAIN CODE AS VARCHAR(20);\\012CREATE DOMAIN DESCRIPTION_250 AS VARCHAR(250);\\012CREATE TABLE EXPERIMENT_PROPERTIES  (ID TECH_ID NOT NULL,EXPE_ID TECH_ID NOT NULL,FILE_NAME FILE_NAME NOT NULL,REGISTRATION_TIMESTAMP TIME_STAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,VALUE FILE NOT NULL,VERSION INTEGER NOT NULL,PERS_ID_REGISTERER TECH_ID NOT NULL) ;\\012CREATE TABLE EXPERIMENT_TYPES  (ID TECH_ID NOT NULL,CODE CODE NOT NULL,DESCRIPTION DESCRIPTION_80) ;\\012CREATE TABLE DATA_VALUES  (ID TECH_ID NOT NULL,DATA_ID TECH_ID NOT NULL,SACO_ID TECH_ID NOT NULL,VALUE DOUBLE_PRECISION_VALUE NOT NULL) ;\\012CREATE TABLE PERSONS  (ID TECH_ID NOT NULL,FIRST_NAME VARCHAR(30),LAST_NAME VARCHAR(30),USER_ID USER_ID,EMAIL OBJECT_NAME) ;\\012CREATE TABLE FILE_FORMAT_TYPES  (ID TECH_ID NOT NULL,CODE CODE NOT NULL,DESCRIPTION DESCRIPTION_80) ;\\012CREATE TABLE SAMPLE_INPUTS  (ID TECH_ID NOT NULL,SAMP_ID TECH_ID NOT NULL,PROC_ID TECH_ID NOT NULL) ;\\012CREATE TABLE OBSERVABLE_TYPES  (ID TECH_ID NOT NULL,CODE CODE NOT NULL,DESCRIPTION DESCRIPTION_80) ;\\012CREATE TABLE LOCATOR_TYPES  (ID TECH_ID NOT NULL,CODE CODE NOT NULL,DESCRIPTION DESCRIPTION_80) ;\\012CREATE TABLE SAMPLE_COMPONENTS  (ID TECH_ID NOT NULL,CODE CODE NOT NULL,SAMP_ID TECH_ID NOT NULL) ;\\012CREATE TABLE SAMPLE_TYPES  (ID TECH_ID NOT NULL,CODE CODE NOT NULL,DESCRIPTION DESCRIPTION_80) ;\\012CREATE TABLE ORGANIZATIONS  (ID TECH_ID NOT NULL,CODE CODE NOT NULL) ;\\012CREATE TABLE PROCEDURES  (ID TECH_ID NOT NULL,REGISTRATION_TIMESTAMP TIME_STAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,EXPE_ID TECH_ID NOT NULL,PCTY_ID TECH_ID NOT NULL,PERS_ID TECH_ID) ;\\012CREATE TABLE PROCEDURE_TYPES  (ID TECH_ID NOT NULL,CODE CODE NOT NULL,DESCRIPTION DESCRIPTION_80 NOT NULL) ;\\012CREATE TABLE PROJECTS  (ID TECH_ID NOT NULL,CODE CODE NOT NULL,ORGA_ID TECH_ID NOT NULL) ;\\012CREATE TABLE SAMPLE_COMPONENT_MATERIALS  (ID TECH_ID NOT NULL,SACO_ID TECH_ID NOT NULL,MABA_ID TECH_ID NOT NULL) ;\\012CREATE TABLE EXTERNAL_DATA  (DATA_ID TECH_ID NOT NULL,LOCATION VARCHAR(200) NOT NULL,LOTY_ID TECH_ID NOT NULL,FFTY_ID TECH_ID NOT NULL) ;\\012CREATE TABLE DATA  (ID TECH_ID NOT NULL,REGISTRATION_TIMESTAMP TIME_STAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,OBTY_ID TECH_ID NOT NULL,PROC_ID_ACQUIRED_BY TECH_ID NOT NULL,SAMP_ID_ACQUIRED_FROM TECH_ID,SAMP_ID_DERIVED_FROM TECH_ID) ;\\012CREATE TABLE SAMPLES  (ID TECH_ID NOT NULL,CODE CODE NOT NULL,CONT_ID TECH_ID,PROC_ID TECH_ID,SAMP_ID_TOP TECH_ID,SAMP_ID_GENERATED_FROM TECH_ID,SATY_ID TECH_ID NOT NULL,REGISTRATION_TIMESTAMP TIME_STAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,PERS_ID_REGISTERER TECH_ID NOT NULL) ;\\012CREATE TABLE MATERIAL_TYPES  (ID TECH_ID NOT NULL,CODE CODE NOT NULL,DESCRIPTION DESCRIPTION_80) ;\\012CREATE TABLE MATERIAL_BATCHES  (ID TECH_ID NOT NULL,CODE CODE NOT NULL,AMOUNT REAL_VALUE,MATE_ID TECH_ID NOT NULL,CONT_ID TECH_ID,PROC_ID TECH_ID,REGISTRATION_TIMESTAMP TIME_STAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,PERS_ID_REGISTERER TECH_ID NOT NULL) ;\\012CREATE TABLE MATERIALS  (ID TECH_ID NOT NULL,CODE CODE NOT NULL,DESCRIPTION DESCRIPTION_250,MATY_ID TECH_ID NOT NULL,REGISTRATION_TIMESTAMP TIME_STAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,PERS_ID_REGISTERER TECH_ID NOT NULL) ;\\012CREATE TABLE MOLECULES  (MATE_ID TECH_ID NOT NULL,SEQUENCE VARCHAR(100),ACCESSION_NUMBER OBJECT_NAME,OFF_SET VARCHAR(20),MOLE_ID_INHIBITOR_OF TECH_ID,GENE_SYMBOL CODE) ;\\012CREATE TABLE EXPERIMENTS  (ID TECH_ID NOT NULL,CODE CODE NOT NULL,EXTY_ID TECH_ID NOT NULL,MATE_ID_STUDY_OBJECT TECH_ID,PERS_ID_REGISTERER TECH_ID,REGISTRATION_TIMESTAMP TIME_STAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,DESCRIPTION DESCRIPTION_250,PROJ_ID TECH_ID NOT NULL) ;\\012\\012ALTER TABLE EXPERIMENT_PROPERTIES ADD CONSTRAINT EXPR_PK PRIMARY KEY(ID);\\012ALTER TABLE EXPERIMENT_TYPES ADD CONSTRAINT EXTY_PK PRIMARY KEY(ID);\\012ALTER TABLE DATA_VALUES ADD CONSTRAINT DAVA_PK PRIMARY KEY(ID);\\012ALTER TABLE PERSONS ADD CONSTRAINT PERS_PK PRIMARY KEY(ID);\\012ALTER TABLE FILE_FORMAT_TYPES ADD CONSTRAINT FFTY_PK PRIMARY KEY(ID);\\012ALTER TABLE SAMPLE_INPUTS ADD CONSTRAINT SAIN_PK PRIMARY KEY(ID);\\012ALTER TABLE OBSERVABLE_TYPES ADD CONSTRAINT OBTY_PK PRIMARY KEY(ID);\\012ALTER TABLE LOCATOR_TYPES ADD CONSTRAINT LOTY_PK PRIMARY KEY(ID);\\012ALTER TABLE SAMPLE_COMPONENTS ADD CONSTRAINT SACO_PK PRIMARY KEY(ID);\\012ALTER TABLE SAMPLE_TYPES ADD CONSTRAINT SATY_PK PRIMARY KEY(ID);\\012ALTER TABLE ORGANIZATIONS ADD CONSTRAINT ORGA_PK PRIMARY KEY(ID);\\012ALTER TABLE PROCEDURES ADD CONSTRAINT PROC_PK PRIMARY KEY(ID);\\012ALTER TABLE PROCEDURE_TYPES ADD CONSTRAINT PCTY_PK PRIMARY KEY(ID);\\012ALTER TABLE PROJECTS ADD CONSTRAINT PROJ_PK PRIMARY KEY(ID);\\012ALTER TABLE SAMPLE_COMPONENT_MATERIALS ADD CONSTRAINT SCMA_PK PRIMARY KEY(ID);\\012ALTER TABLE EXTERNAL_DATA ADD CONSTRAINT EXDA_PK PRIMARY KEY(DATA_ID);\\012ALTER TABLE DATA ADD CONSTRAINT DATA_PK PRIMARY KEY(ID);\\012ALTER TABLE SAMPLES ADD CONSTRAINT SAMP_PK PRIMARY KEY(ID);\\012ALTER TABLE MATERIAL_TYPES ADD CONSTRAINT MATY_PK PRIMARY KEY(ID);\\012ALTER TABLE MATERIAL_BATCHES ADD CONSTRAINT MABA_PK PRIMARY KEY(ID);\\012ALTER TABLE MATERIALS ADD CONSTRAINT MATE_PK PRIMARY KEY(ID);\\012ALTER TABLE MOLECULES ADD CONSTRAINT MOLE_PK PRIMARY KEY(MATE_ID);\\012ALTER TABLE EXPERIMENTS ADD CONSTRAINT EXPE_PK PRIMARY KEY(ID);\\012ALTER TABLE EXPERIMENT_PROPERTIES ADD CONSTRAINT EXPR_BK_UK UNIQUE(EXPE_ID,FILE_NAME,VERSION);\\012ALTER TABLE EXPERIMENT_TYPES ADD CONSTRAINT EXTY_BK_UK UNIQUE(CODE);\\012ALTER TABLE DATA_VALUES ADD CONSTRAINT DAVA_BK_UK UNIQUE(DATA_ID,SACO_ID);\\012ALTER TABLE PERSONS ADD CONSTRAINT PERS_BK_UK UNIQUE(USER_ID);\\012ALTER TABLE FILE_FORMAT_TYPES ADD CONSTRAINT FFTY_BK_UK UNIQUE(CODE);\\012ALTER TABLE SAMPLE_INPUTS ADD CONSTRAINT SAIN_BK_UK UNIQUE(SAMP_ID,PROC_ID);\\012ALTER TABLE OBSERVABLE_TYPES ADD CONSTRAINT OBTY_BK_UK UNIQUE(CODE);\\012ALTER TABLE LOCATOR_TYPES ADD CONSTRAINT LOTY_BK_UK UNIQUE(CODE);\\012ALTER TABLE SAMPLE_COMPONENTS ADD CONSTRAINT SACO_BK_UK UNIQUE(CODE,SAMP_ID);\\012ALTER TABLE SAMPLE_TYPES ADD CONSTRAINT SATY_BK_UK UNIQUE(CODE);\\012ALTER TABLE ORGANIZATIONS ADD CONSTRAINT ORGA_BK_UK UNIQUE(CODE);\\012ALTER TABLE PROCEDURE_TYPES ADD CONSTRAINT PCTY_BK_UK UNIQUE(CODE);\\012ALTER TABLE PROJECTS ADD CONSTRAINT PROJ_BK_UK UNIQUE(CODE,ORGA_ID);\\012ALTER TABLE SAMPLE_COMPONENT_MATERIALS ADD CONSTRAINT SCMA_BK_UK UNIQUE(MABA_ID,SACO_ID);\\012ALTER TABLE EXTERNAL_DATA ADD CONSTRAINT EXDA_BK_UK UNIQUE(LOCATION);\\012ALTER TABLE SAMPLES ADD CONSTRAINT SAMP_BK_UK UNIQUE(CODE);\\012ALTER TABLE MATERIAL_TYPES ADD CONSTRAINT MATY_UK UNIQUE(CODE);\\012ALTER TABLE MATERIAL_TYPES ADD CONSTRAINT MATY_BK_UK UNIQUE(CODE);\\012ALTER TABLE MATERIALS ADD CONSTRAINT MATE_BK_UK UNIQUE(CODE);\\012--\\012--  Temporarily not created, due to data quality issues with the master plate layout data\\012--\\012-- ALTER TABLE MOLECULES ADD CONSTRAINT MOLE_BK_UK UNIQUE(SEQUENCE);\\012ALTER TABLE EXPERIMENTS ADD CONSTRAINT EXPE_BK_UK UNIQUE(CODE,PROJ_ID);\\012\\012ALTER TABLE DATA ADD CONSTRAINT DATA_SAMP_ARC_CK CHECK ((samp_id_acquired_from IS NOT NULL \\012and samp_id_derived_from IS NULL) \\012or (samp_id_acquired_from IS NULL \\012and samp_id_derived_from IS NOT NULL)) ;\\012ALTER TABLE EXPERIMENT_PROPERTIES ADD CONSTRAINT EXPR_PERS_FK FOREIGN KEY (PERS_ID_REGISTERER)REFERENCES PERSONS(ID);\\012ALTER TABLE EXPERIMENT_PROPERTIES ADD CONSTRAINT EXPR_EXPE_FK FOREIGN KEY (EXPE_ID)REFERENCES EXPERIMENTS(ID);\\012ALTER TABLE DATA_VALUES ADD CONSTRAINT DAVA_DATA_FK FOREIGN KEY (DATA_ID)REFERENCES DATA(ID);\\012ALTER TABLE DATA_VALUES ADD CONSTRAINT DAVA_SACO_FK FOREIGN KEY (SACO_ID)REFERENCES SAMPLE_COMPONENTS(ID);\\012ALTER TABLE SAMPLE_INPUTS ADD CONSTRAINT SAIN_PROC_FK FOREIGN KEY (PROC_ID)REFERENCES PROCEDURES(ID);\\012ALTER TABLE SAMPLE_INPUTS ADD CONSTRAINT SAIN_SAMP_FK FOREIGN KEY (SAMP_ID)REFERENCES SAMPLES(ID);\\012ALTER TABLE SAMPLE_COMPONENTS ADD CONSTRAINT SACO_SAMP_FK FOREIGN KEY (SAMP_ID)REFERENCES SAMPLES(ID);\\012ALTER TABLE PROCEDURES ADD CONSTRAINT PROC_PCTY_FK FOREIGN KEY (PCTY_ID)REFERENCES PROCEDURE_TYPES(ID);\\012ALTER TABLE PROCEDURES ADD CONSTRAINT PROC_PERS_FK FOREIGN KEY (PERS_ID)REFERENCES PERSONS(ID);\\012ALTER TABLE PROCEDURES ADD CONSTRAINT PROC_EXPE_FK FOREIGN KEY (EXPE_ID)REFERENCES EXPERIMENTS(ID);\\012ALTER TABLE PROJECTS ADD CONSTRAINT PROJ_ORGA_FK FOREIGN KEY (ORGA_ID)REFERENCES ORGANIZATIONS(ID);\\012ALTER TABLE SAMPLE_COMPONENT_MATERIALS ADD CONSTRAINT SCMA_MABA_FK FOREIGN KEY (MABA_ID)REFERENCES MATERIAL_BATCHES(ID);\\012ALTER TABLE SAMPLE_COMPONENT_MATERIALS ADD CONSTRAINT SCMA_SACO_FK FOREIGN KEY (SACO_ID)REFERENCES SAMPLE_COMPONENTS(ID);\\012ALTER TABLE EXTERNAL_DATA ADD CONSTRAINT EXDA_DATA_FK FOREIGN KEY (DATA_ID)REFERENCES DATA(ID);\\012ALTER TABLE EXTERNAL_DATA ADD CONSTRAINT EXDA_LOTY_FK FOREIGN KEY (LOTY_ID)REFERENCES LOCATOR_TYPES(ID);\\012ALTER TABLE EXTERNAL_DATA ADD CONSTRAINT EXDA_FFTY_FK FOREIGN KEY (FFTY_ID)REFERENCES FILE_FORMAT_TYPES(ID);\\012ALTER TABLE DATA ADD CONSTRAINT DATA_SAMP_DERIVED_FROM_FK FOREIGN KEY (SAMP_ID_DERIVED_FROM)REFERENCES SAMPLES(ID);\\012ALTER TABLE DATA ADD CONSTRAINT DATA_SAMP_FK FOREIGN KEY (SAMP_ID_ACQUIRED_FROM)REFERENCES SAMPLES(ID);\\012ALTER TABLE DATA ADD CONSTRAINT DATA_PROC_FK FOREIGN KEY (PROC_ID_ACQUIRED_BY)REFERENCES PROCEDURES(ID);\\012ALTER TABLE DATA ADD CONSTRAINT DATA_OBTY_FK FOREIGN KEY (OBTY_ID)REFERENCES OBSERVABLE_TYPES(ID);\\012ALTER TABLE SAMPLES ADD CONSTRAINT SAMP_PERS_FK FOREIGN KEY (PERS_ID_REGISTERER)REFERENCES PERSONS(ID);\\012ALTER TABLE SAMPLES ADD CONSTRAINT SAMP_PROC_FK FOREIGN KEY (PROC_ID)REFERENCES PROCEDURES(ID);\\012ALTER TABLE SAMPLES ADD CONSTRAINT SAMP_SAMP_FK_GENERATED_FROM FOREIGN KEY (SAMP_ID_GENERATED_FROM)REFERENCES SAMPLES(ID);\\012ALTER TABLE SAMPLES ADD CONSTRAINT SAMP_SAMP_FK_TOP FOREIGN KEY (SAMP_ID_TOP)REFERENCES SAMPLES(ID);\\012ALTER TABLE SAMPLES ADD CONSTRAINT SAMP_SATY_FK FOREIGN KEY (SATY_ID)REFERENCES SAMPLE_TYPES(ID);\\012ALTER TABLE MATERIAL_BATCHES ADD CONSTRAINT MABA_PERS_FK FOREIGN KEY (PERS_ID_REGISTERER)REFERENCES PERSONS(ID);\\012ALTER TABLE MATERIAL_BATCHES ADD CONSTRAINT MABA_MATE_FK FOREIGN KEY (MATE_ID)REFERENCES MATERIALS(ID);\\012ALTER TABLE MATERIAL_BATCHES ADD CONSTRAINT MABA_PROC_FK FOREIGN KEY (PROC_ID)REFERENCES PROCEDURES(ID);\\012ALTER TABLE MATERIALS ADD CONSTRAINT MATE_MATY_FK FOREIGN KEY (MATY_ID)REFERENCES MATERIAL_TYPES(ID);\\012ALTER TABLE MATERIALS ADD CONSTRAINT MATE_PERS_FK FOREIGN KEY (PERS_ID_REGISTERER)REFERENCES PERSONS(ID);\\012ALTER TABLE MOLECULES ADD CONSTRAINT MOLE_MATE_FK FOREIGN KEY (MATE_ID)REFERENCES MATERIALS(ID);\\012ALTER TABLE MOLECULES ADD CONSTRAINT MOLE_MOLE_FK FOREIGN KEY (MOLE_ID_INHIBITOR_OF)REFERENCES MOLECULES(MATE_ID);\\012ALTER TABLE EXPERIMENTS ADD CONSTRAINT EXPE_MATE_FK FOREIGN KEY (MATE_ID_STUDY_OBJECT)REFERENCES MATERIALS(ID);\\012ALTER TABLE EXPERIMENTS ADD CONSTRAINT EXPE_EXTY_FK FOREIGN KEY (EXTY_ID)REFERENCES EXPERIMENT_TYPES(ID);\\012ALTER TABLE EXPERIMENTS ADD CONSTRAINT EXPE_PERS_FK FOREIGN KEY (PERS_ID_REGISTERER)REFERENCES PERSONS(ID);\\012ALTER TABLE EXPERIMENTS ADD CONSTRAINT EXPE_PROJ_FK FOREIGN KEY (PROJ_ID)REFERENCES PROJECTS(ID);\\012\\012\\012\\012--  Creating Sequences\\012\\012CREATE SEQUENCE EXPERIMENT_PROPERTY_ID_SEQ;\\012\\012CREATE SEQUENCE PROCEDURE_TYPE_ID_SEQ;\\012\\012CREATE SEQUENCE SAMPLE_INPUT_ID_SEQ;\\012\\012CREATE SEQUENCE SAMPLE_TYPE_ID_SEQ;\\012\\012CREATE SEQUENCE LOCATOR_TYPE_ID_SEQ;\\012\\012CREATE SEQUENCE SAMPLE_ID_SEQ;\\012\\012CREATE SEQUENCE EXPERIMENT_ID_SEQ;\\012\\012CREATE SEQUENCE MATERIAL_BATCH_ID_SEQ;\\012\\012CREATE SEQUENCE OBSERVABLE_TYPE_ID_SEQ;\\012\\012CREATE SEQUENCE SAMPLE_COMPONENT_ID_SEQ;\\012\\012CREATE SEQUENCE MATERIAL_ID_SEQ;\\012\\012CREATE SEQUENCE DATA_ID_SEQ;\\012\\012--  Creating Sequence for the SAMPLE_COMPONENT_MATERIALS table (standard naming convention was too long)\\012CREATE SEQUENCE SCMA_ID_SEQ;\\012\\012CREATE SEQUENCE PROCEDURE_ID_SEQ;\\012\\012CREATE SEQUENCE FILE_FORMAT_TYPE_ID_SEQ;\\012\\012CREATE SEQUENCE MATERIAL_TYPE_ID_SEQ;\\012\\012CREATE SEQUENCE EXPERIMENT_TYPE_ID_SEQ;\\012\\012CREATE SEQUENCE PERSON_ID_SEQ;\\012\\012CREATE SEQUENCE ORGANIZATION_ID_SEQ;\\012\\012CREATE SEQUENCE PROJECT_ID_SEQ;\\012\\012CREATE SEQUENCE DATA_VALUE_ID_SEQ;\\012\\012\\012\\012/*\\012   Trigger Section\\012   ===============*/\\012\\012CREATE OR REPLACE FUNCTION br001_crtl_plate_chk() RETURNS trigger AS $br001_crtl_plate_chk$\\012DECLARE\\012   cnt           INTEGER;\\012   v_cell_plate  CODE;\\012BEGIN\\012\\012   select code into v_cell_plate from sample_types where id  = NEW.saty_id;\\012\\012   -- Check if the sample is of type "Cell Plate"\\012   if v_cell_plate = 'CELL PLATE' then\\012\\012      -- Check that a Control Plate exists before registering the Cell Plate\\012      select count(*) into cnt from samples s, sample_types st where s.saty_id = st.id and st.code = 'CONTROL LAYOUT';\\011 \\012      IF cnt = 0 THEN\\012\\011\\011 -- Doens't make sense, so comment it out\\012         -- RAISE EXCEPTION 'A Control Plate must exist before you can register Cell Plate: %', NEW.code;\\012      END IF;\\012\\012   end if;\\012\\012   RETURN NEW;\\012\\012END;\\012$br001_crtl_plate_chk$ LANGUAGE plpgsql;\\012\\012\\012CREATE TRIGGER br001_crtl_plate_chk BEFORE INSERT ON samples\\012    FOR EACH ROW EXECUTE PROCEDURE br001_crtl_plate_chk();\\012	\N
007	source/sql/postgresql/007/data-007.sql	SUCCESS	2008-01-05 14:51:36.63	\\011----------------------------------------------------------------------\\012--  Purpose:  Insert an initial data set into the table MATERIAL_TYPES\\012--\\012--  Authors: Randy Ramin-Wright (CRW)\\012--\\012--  Change History:\\012--\\012--  Date          Author       Description\\012--  21-May-2007   CRW          First Draft\\012--\\012-----------------------------------------------------------------------\\012\\012insert into persons\\012(id\\012,first_name\\012,last_name\\012,user_id\\012,email)\\012values\\012(nextval('PERSON_ID_SEQ')\\012,''\\012,'System User'\\012,'system'\\012,''\\012);\\012\\012insert into material_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('MATERIAL_TYPE_ID_SEQ')\\012,'VIRUS'\\012,'Virus'\\012);\\012\\012insert into material_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('MATERIAL_TYPE_ID_SEQ')\\012,'CELLLINE'\\012,'Cell Line or Cell Culture. The growing of cells under controlled conditions.'\\012);\\012\\012insert into material_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('MATERIAL_TYPE_ID_SEQ')\\012,'CELLNUCL'\\012,'Cell Nucleus'\\012);\\012\\012insert into material_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('MATERIAL_TYPE_ID_SEQ')\\012,'GENE'\\012,'Gene'\\012);\\012insert into material_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('MATERIAL_TYPE_ID_SEQ')\\012,'OLIGO'\\012,'Oligo nucleotide'\\012);\\012insert into material_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('MATERIAL_TYPE_ID_SEQ')\\012,'CONTROL'\\012,'Control of a control layout'\\012);\\012\\012----------------------------------------------------------------------\\012--  Purpose:  Insert an initial data set into the table MATERIALS\\012--\\012--  Authors: Randy Ramin-Wright (CRW)\\012--\\012--  Change History:\\012--\\012--  Date          Author       Description\\012--  21-May-2007   CRW          First Draft\\012--  20-Jun-2007   CRW          Added the virus list received from Berend\\012-----------------------------------------------------------------------\\012\\012insert into materials\\012(  id\\012  ,code\\012  ,maty_id\\012  ,description\\012  ,pers_id_registerer\\012  )\\012values \\012(nextval('MATERIAL_ID_SEQ')\\012,'SV40'\\012,1\\012,'Simian Virus 40'\\012,1\\012);\\012\\012insert into materials\\012(  id\\012  ,code\\012  ,maty_id\\012  ,description\\012  ,pers_id_registerer\\012  )\\012values \\012(nextval('MATERIAL_ID_SEQ')\\012,'VSV'\\012,1\\012,'Vesicular Stomatitis Virus'\\012,1\\012);\\012\\012insert into materials\\012(  id\\012  ,code\\012  ,maty_id\\012  ,description\\012  ,pers_id_registerer\\012  )\\012values \\012(nextval('MATERIAL_ID_SEQ')\\012,'SFV'\\012,1\\012,'Semliki Forest Virus'\\012,1\\012);\\012\\012insert into materials\\012(  id\\012  ,code\\012  ,maty_id\\012  ,description\\012  ,pers_id_registerer\\012  )\\012values \\012(nextval('MATERIAL_ID_SEQ')\\012,'ROTAV'\\012,1\\012,'Rotavirus'\\012,1\\012);\\012\\012insert into materials\\012(  id\\012  ,code\\012  ,maty_id\\012  ,description\\012  ,pers_id_registerer\\012  )\\012values \\012(nextval('MATERIAL_ID_SEQ')\\012,'RRV'\\012,1\\012,'Rhesus Rotavirus'\\012,1\\012);\\012\\012insert into materials\\012(  id\\012  ,code\\012  ,maty_id\\012  ,description\\012  ,pers_id_registerer\\012  )\\012values \\012(nextval('MATERIAL_ID_SEQ')\\012,'HSV1'\\012,1\\012,'Herpes Simplex Virus 1'\\012,1\\012);\\012\\012insert into materials\\012(  id\\012  ,code\\012  ,maty_id\\012  ,description\\012  ,pers_id_registerer\\012  )\\012values \\012(nextval('MATERIAL_ID_SEQ')\\012,'EV1'\\012,1\\012,'Echovirus 1'\\012,1\\012);\\012\\012insert into materials\\012(  id\\012  ,code\\012  ,maty_id\\012  ,description\\012  ,pers_id_registerer\\012  )\\012values \\012(nextval('MATERIAL_ID_SEQ')\\012,'MHV'\\012,1\\012,'Mouse Hepatitis Virus'\\012,1\\012);\\012\\012insert into materials\\012(  id\\012  ,code\\012  ,maty_id\\012  ,description\\012  ,pers_id_registerer\\012  )\\012values \\012(nextval('MATERIAL_ID_SEQ')\\012,'FLU'\\012,1\\012,'Influenza A virus'\\012,1\\012);\\012\\012insert into materials\\012(  id\\012  ,code\\012  ,maty_id\\012  ,description\\012  ,pers_id_registerer\\012  )\\012values \\012(nextval('MATERIAL_ID_SEQ')\\012,'Ad3'\\012,1\\012,'Adenovirus 3'\\012,1\\012);\\012\\012insert into materials\\012(  id\\012  ,code\\012  ,maty_id\\012  ,description\\012  ,pers_id_registerer\\012  )\\012values \\012(nextval('MATERIAL_ID_SEQ')\\012,'Ad5'\\012,1\\012,'Adenovirus 5'\\012,1\\012);\\012\\012insert into materials\\012(  id\\012  ,code\\012  ,maty_id\\012  ,description\\012  ,pers_id_registerer\\012  )\\012values \\012(nextval('MATERIAL_ID_SEQ')\\012,'VV'\\012,1\\012,'Vaccinia Virus'\\012,1\\012);\\012\\012insert into materials\\012(  id\\012  ,code\\012  ,maty_id\\012  ,description\\012  ,pers_id_registerer\\012  )\\012values \\012(nextval('MATERIAL_ID_SEQ')\\012,'YFV'\\012,1\\012,'Yellow Fever Virus'\\012,1\\012);\\012\\012insert into materials\\012(  id\\012  ,code\\012  ,maty_id\\012  ,description\\012  ,pers_id_registerer\\012  )\\012values \\012(nextval('MATERIAL_ID_SEQ')\\012,'DV'\\012,1\\012,'Dengue Virus 1'\\012,1\\012);\\012\\012insert into materials\\012(  id\\012  ,code\\012  ,maty_id\\012  ,description\\012  ,pers_id_registerer\\012  )\\012values \\012(nextval('MATERIAL_ID_SEQ')\\012,'HRV2'\\012,1\\012,'Human respiratory virus'\\012,1\\012);\\012\\012insert into materials\\012(  id\\012  ,code\\012  ,maty_id\\012  ,description\\012  ,pers_id_registerer\\012  )\\012values \\012(nextval('MATERIAL_ID_SEQ')\\012,'RV'\\012,(select id from material_types where code = 'VIRUS')\\012,'Rhinovirus'\\012,1\\012);\\012\\012insert into materials\\012(  id\\012  ,code\\012  ,maty_id\\012  ,description\\012  ,pers_id_registerer\\012  )\\012values \\012(nextval('MATERIAL_ID_SEQ')\\012,'RSV'\\012,(select id from material_types where code = 'VIRUS')\\012,'Respiratory Syncytial Virus'\\012,1\\012);\\012\\012----------------------------------------------------------------------\\012--  Purpose:  Insert an initial data set into the table EXPERIMENT_TYPES\\012--\\012--  Authors: Randy Ramin-Wright (CRW)\\012--\\012--  Change History:\\012--\\012--  Date          Author       Description\\012--  21-May-2007   CRW          First Draft\\012--\\012-----------------------------------------------------------------------\\012\\012insert into experiment_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('EXPERIMENT_TYPE_ID_SEQ')\\012,'SIRNAHCS'\\012,'Small Interfering RNA High Content Screening'\\012);\\012\\012----------------------------------------------------------------------\\012--  Purpose:  Insert an initial data set into the table PROCEDURE_TYPES\\012--\\012--  Authors: Randy Ramin-Wright (CRW)\\012--\\012--  Change History:\\012--\\012--  Date          Author       Description\\012--  14-Jun-2007   CRW          First Draft\\012--  26-Jun-2007   CRW          Add Experiment Sample Registration\\012--\\012-----------------------------------------------------------------------\\012\\012insert into procedure_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('PROCEDURE_TYPE_ID_SEQ')\\012,'DATA ACQUISITION'\\012,'Data Acquisition'\\012);\\012\\012insert into procedure_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('PROCEDURE_TYPE_ID_SEQ')\\012,'IMAGE ANALYSIS'\\012,'Image Analysis'\\012);\\012\\012----------------------------------------------------------------------\\012--  Purpose:  Insert an initial data set into the table OBSERVABLE_TYPES\\012--\\012--  Authors: Randy Ramin-Wright (CRW)\\012--\\012--  Change History:\\012--\\012--  Date          Author       Description\\012--  14-Jun-2007   CRW          First Draft\\012--\\012-----------------------------------------------------------------------\\012\\012insert into observable_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('OBSERVABLE_TYPE_ID_SEQ')\\012,'IMAGE'\\012,'Image'\\012);\\012\\012insert into observable_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('OBSERVABLE_TYPE_ID_SEQ')\\012,'IMAGE ANALYSIS'\\012,'Image Analysis'\\012);\\012\\012----------------------------------------------------------------------\\012--  Purpose:  Insert an initial data set into the table FILE_FORMAT_TYPES\\012--\\012--  Authors: Randy Ramin-Wright (CRW)\\012--\\012--  Change History:\\012--\\012--  Date          Author       Description\\012--  14-Jun-2007   CRW          First Draft\\012--\\012-----------------------------------------------------------------------\\012\\012insert into file_format_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('FILE_FORMAT_TYPE_ID_SEQ')\\012,'TIFF'\\012,'TIFF File'\\012);\\012\\012insert into file_format_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('FILE_FORMAT_TYPE_ID_SEQ')\\012,'3VPROPRIETARY'\\012,'Data Analysis 3V proprietary format'\\012);\\012\\012insert into file_format_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('FILE_FORMAT_TYPE_ID_SEQ')\\012,'PLKPROPRIETARY'\\012,'Data Analysis Pelkmans group proprietary format'\\012);\\012\\012----------------------------------------------------------------------\\012--  Purpose:  Insert an initial data set into the table LOCATOR_TYPES\\012--\\012--  Authors: Randy Ramin-Wright (CRW)\\012--\\012--  Change History:\\012--\\012--  Date          Author       Description\\012--  27-Jun-2007   CRW          First Draft\\012--\\012-----------------------------------------------------------------------\\012\\012insert into locator_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('LOCATOR_TYPE_ID_SEQ')\\012,'RELATIVE LOCATION'\\012,'Relative Location'\\012);\\012\\012----------------------------------------------------------------------\\012--  Purpose:  Insert an initial data set into the table SAMPLE_TYPES\\012--\\012--  Authors: Randy Ramin-Wright (CRW)\\012--\\012--  Change History:\\012--\\012--  Date          Author       Description\\012--  26-Jun-2007   CRW          First Draft\\012--\\012-----------------------------------------------------------------------\\012\\012insert into sample_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('SAMPLE_TYPE_ID_SEQ')\\012,'MASTER PLATE'\\012,'Master Plate'\\012);\\012\\012insert into sample_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('SAMPLE_TYPE_ID_SEQ')\\012,'DILUTION PLATE'\\012,'Dilution Plate'\\012);\\012\\012insert into sample_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('SAMPLE_TYPE_ID_SEQ')\\012,'CELL PLATE'\\012,'Cell Plate'\\012);\\012\\012insert into sample_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('SAMPLE_TYPE_ID_SEQ')\\012,'REINFECT PLATE'\\012,'Reinfection Plate'\\012);\\012\\012insert into sample_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('SAMPLE_TYPE_ID_SEQ')\\012,'CONTROL LAYOUT'\\012,'Control layout'\\012);\\012\\012-- add default organization and project to simplify refactoring phase\\012\\012insert into organizations\\012(id\\012,code)\\012values\\012(nextval('ORGANIZATION_ID_SEQ')\\012,'DEFAULT'\\012);\\012\\012insert into organizations\\012(id\\012,code)\\012values\\012(nextval('ORGANIZATION_ID_SEQ')\\012,'3V'\\012);\\012\\012insert into organizations\\012(id\\012,code)\\012values\\012(nextval('ORGANIZATION_ID_SEQ')\\012,'IMSB'\\012);\\012\\012insert into projects\\012(id\\012,code\\012,orga_id)\\012values\\012(nextval('PROJECT_ID_SEQ')\\012,'DEFAULT'\\012,1\\012);\\012	\N
008	source/sql/postgresql/migration/migration-007-008.sql	SUCCESS	2008-05-09 10:10:51.73	----------------------------------------------------------------------------------------------\\012--  File: migration-007-008.sql\\012--\\012-- \\012--  This script enables the migration of the database schema from 007 to 008.\\012-- \\012--  Update History\\012--\\012--\\012--\\011Who\\011\\011\\011\\011\\011\\011When\\011\\011\\011\\011What\\012--\\011---\\011\\011\\011\\011\\011\\011----\\011\\011\\011\\011----\\012--\\011Randy (CRW)\\011\\01126-10-2007\\011Initial Version\\012--\\011Randy (CRW)\\011\\01131-10-2007\\0111. Added data migration of the MOLE_ID_INHIBITOR_OF column\\012--                            2. Removed the first drop column DESCRIPTION command as it was\\012--                               before the data migration of the DESCRIPTION\\012--  \\012----------------------------------------------------------------------------------------------\\012\\012\\012--------------\\012-- New Domains\\012--------------\\012\\012CREATE DOMAIN GENERIC_VALUE AS VARCHAR(1024);\\012CREATE DOMAIN COLUMN_LABEL AS VARCHAR(40);\\012\\012\\012-------------\\012-- New Tables\\012-------------\\012\\012CREATE TABLE DATA_TYPES  (ID TECH_ID NOT NULL,CODE CODE NOT NULL,DESCRIPTION DESCRIPTION_80 NOT NULL) ;\\012\\012CREATE TABLE PROPERTY_TYPES  (ID TECH_ID NOT NULL,CODE CODE NOT NULL,DESCRIPTION DESCRIPTION_80 NOT NULL,LABEL COLUMN_LABEL NOT NULL,DATY_ID TECH_ID NOT NULL) ;\\012\\012CREATE TABLE MATERIAL_PROPERTIES  (ID TECH_ID NOT NULL,MATE_ID TECH_ID NOT NULL,PRTY_ID TECH_ID NOT NULL,VALUE GENERIC_VALUE NOT NULL,DISPLAY_ORDER INTEGER) ;\\012\\012\\012----------------\\012-- Table Columns\\012----------------\\012\\012alter table MATERIALS add column MATE_ID_INHIBITOR_OF TECH_ID;\\012\\012\\012\\012--------------------------\\012-- Key Constraints\\012--------------------------\\012\\012ALTER TABLE DATA_TYPES ADD CONSTRAINT DATY_PK PRIMARY KEY(ID);\\012ALTER TABLE DATA_TYPES ADD CONSTRAINT DATY_BK_UK UNIQUE(CODE);\\012\\012\\012ALTER TABLE PROPERTY_TYPES ADD CONSTRAINT PRTY_PK PRIMARY KEY(ID);\\012ALTER TABLE PROPERTY_TYPES ADD CONSTRAINT PRTY_BK_UK UNIQUE(CODE);\\012ALTER TABLE PROPERTY_TYPES ADD CONSTRAINT PRTY_DATY_FK FOREIGN KEY (DATY_ID)REFERENCES DATA_TYPES(ID);\\012\\012\\012ALTER TABLE MATERIAL_PROPERTIES ADD CONSTRAINT MAPR_PK PRIMARY KEY(ID);\\012ALTER TABLE MATERIAL_PROPERTIES ADD CONSTRAINT MAPR_BK_UK UNIQUE(MATE_ID,PRTY_ID);\\012ALTER TABLE MATERIAL_PROPERTIES ADD CONSTRAINT MAPR_PRTY_FK FOREIGN KEY (PRTY_ID)REFERENCES PROPERTY_TYPES(ID);\\012ALTER TABLE MATERIAL_PROPERTIES ADD CONSTRAINT MAPR_MATE_FK FOREIGN KEY (MATE_ID)REFERENCES MATERIALS(ID);\\012\\012\\012ALTER TABLE MATERIALS DROP CONSTRAINT MATE_BK_UK;\\012ALTER TABLE MATERIALS ADD  CONSTRAINT MATE_BK_UK UNIQUE(CODE,MATY_ID);\\012ALTER TABLE MATERIALS ADD  CONSTRAINT MATE_MATE_FK FOREIGN KEY (MATE_ID_INHIBITOR_OF)REFERENCES MATERIALS(ID);\\012\\012\\012-------------\\012--  Sequences\\012-------------\\012\\012CREATE SEQUENCE DATA_TYPE_ID_SEQ;\\012\\012CREATE SEQUENCE PROPERTY_TYPE_ID_SEQ;\\012\\012CREATE SEQUENCE MATERIAL_PROPERTY_ID_SEQ;\\012\\012\\012\\012---------------------------------------------------------------\\012-- Add the master data to tables: DATA_TYPES and PROPERTY_TYPES\\012---------------------------------------------------------------\\012\\012----------------------------------------------------------------------\\012--  Purpose:  Insert an initial data set into the table DATA_TYPES\\012--\\012--  Authors: Randy Ramin-Wright (CRW)\\012--\\012--  Change History:\\012--\\012--  Date          Author       Description\\012--  25-Oct-2007   CRW          First Draft\\012--\\012-----------------------------------------------------------------------\\012\\012insert into data_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('DATA_TYPE_ID_SEQ')\\012,'VARCHAR'\\012,'Variable length character'\\012);\\012\\012insert into data_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('DATA_TYPE_ID_SEQ')\\012,'INTEGER'\\012,'Integer'\\012);\\012\\012insert into data_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('DATA_TYPE_ID_SEQ')\\012,'REAL'\\012,'Real number, i.e. an inexact, variable-precision numeric type'\\012);\\012\\012\\012----------------------------------------------------------------------\\012--  Purpose:  Insert an initial data set into the table PROPERTY_TYPES\\012--\\012--  Authors: Randy Ramin-Wright (CRW)\\012--\\012--  Change History:\\012--\\012--  Date          Author       Description\\012--  25-Oct-2007   CRW          First Draft\\012--\\012-----------------------------------------------------------------------\\012\\012insert into property_types\\012(id\\012,code\\012,description\\012,label\\012,daty_id)\\012values \\012(nextval('PROPERTY_TYPE_ID_SEQ')\\012,'DESCRIPTION'\\012,'A Description'\\012,'description'\\012,(select id from data_types where code ='VARCHAR')\\012);\\012\\012insert into property_types\\012(id\\012,code\\012,description\\012,label\\012,daty_id)\\012values \\012(nextval('PROPERTY_TYPE_ID_SEQ')\\012,'GENE SYMBOL'\\012,'Gene Symbol, e.g. BMP15'\\012,'geneSymbol'\\012,(select id from data_types where code ='VARCHAR')\\012);\\012\\012insert into property_types\\012(id\\012,code\\012,description\\012,label\\012,daty_id)\\012values \\012(nextval('PROPERTY_TYPE_ID_SEQ')\\012,'NUCLEOTIDE SEQUENCE'\\012,'A sequence of nucleotides'\\012,'sequence'\\012,(select id from data_types where code ='VARCHAR')\\012);\\012\\012insert into property_types\\012(id\\012,code\\012,description\\012,label\\012,daty_id)\\012values \\012(nextval('PROPERTY_TYPE_ID_SEQ')\\012,'ACCESSION NUMBER'\\012,'Accession Number of the material'\\012,'accessionNumber'\\012,(select id from data_types where code ='VARCHAR')\\012);\\012\\012insert into property_types\\012(id\\012,code\\012,description\\012,label\\012,daty_id)\\012values \\012(nextval('PROPERTY_TYPE_ID_SEQ')\\012,'OFFSET'\\012,'Offset from the start of the sequence'\\012,'offset'\\012,(select id from data_types where code ='VARCHAR')\\012);\\012\\012\\012\\012\\012\\012\\012---------------------------------------------------------------------------------------\\012--  Migrate the data associated with the DESCRIPTION column of the MATERIALS table\\012--  to the MATERIAL_PROPERTIES table.\\012---------------------------------------------------------------------------------------\\012\\012insert into MATERIAL_PROPERTIES ( id, mate_id, prty_id, value, display_order ) \\012       select nextval('MATERIAL_PROPERTY_ID_SEQ')\\012               , ID\\012               , (select id from property_types where code = 'DESCRIPTION')\\012               , DESCRIPTION\\012               , 50\\012       from materials \\012       where DESCRIPTION is not null;\\012\\012\\012---------------------------------------------------------------------------------------\\012--  Migrate the data associated with the columns of the MOLECULES table\\012--  to the MATERIAL_PROPERTIES table.\\012---------------------------------------------------------------------------------------\\012\\012-- Column: GENE_SYMBOL\\012----------------------\\012insert into MATERIAL_PROPERTIES ( id, mate_id, prty_id, value, display_order ) \\012       select nextval('MATERIAL_PROPERTY_ID_SEQ')\\012               , MATE_ID\\012               , (select id from property_types where code = 'GENE SYMBOL')\\012               , GENE_SYMBOL\\012               , 2\\012       from MOLECULES \\012       where GENE_SYMBOL is not null;\\012\\012\\012-- Column: SEQUENCE \\012----------------------\\012\\012insert into MATERIAL_PROPERTIES ( id, mate_id, prty_id, value, display_order ) \\012       select nextval('MATERIAL_PROPERTY_ID_SEQ')\\012               , MATE_ID\\012               , (select id from property_types where code = 'NUCLEOTIDE SEQUENCE')\\012               , SEQUENCE\\012               , 4\\012       from MOLECULES \\012       where SEQUENCE is not null;\\012\\012\\012-- Column: ACCESSION_NUMBER\\012---------------------------\\012\\012insert into MATERIAL_PROPERTIES ( id, mate_id, prty_id, value, display_order ) \\012       select nextval('MATERIAL_PROPERTY_ID_SEQ')\\012               , MATE_ID\\012               , (select id from property_types where code = 'ACCESSION NUMBER')\\012               , ACCESSION_NUMBER\\012               , 6\\012       from MOLECULES \\012       where ACCESSION_NUMBER is not null;\\012\\012-- Column: OFF_SET\\012----------------------\\012\\012insert into MATERIAL_PROPERTIES ( id, mate_id, prty_id, value, display_order ) \\012       select nextval('MATERIAL_PROPERTY_ID_SEQ')\\012               , MATE_ID\\012               , (select id from property_types where code = 'OFFSET')\\012               , OFF_SET\\012               , 8\\012       from MOLECULES \\012       where OFF_SET is not null;\\012\\012\\012-------------------------------\\012-- Column: MOLE_ID_INHIBITOR_OF\\012-------------------------------\\012\\012\\012update MATERIALS mate\\012set MATE_ID_INHIBITOR_OF = \\012(select MOLE_ID_INHIBITOR_OF\\012 from MOLECULES mole\\012 where mate.ID = mole.MATE_ID \\012 and   MOLE_ID_INHIBITOR_OF is not null)\\012;\\012\\012\\012---------------------\\012-- Drop Tables\\012---------------------\\012\\012drop table MOLECULES;\\012\\012\\012---------------------\\012-- Drop Columns\\012---------------------\\012\\012alter table MATERIALS drop column DESCRIPTION;\\012\\012\\012-- ===================================================================================================\\012-- Data Migration to enable activation of the unique key constraint MABA_BK_UK\\012\\012-- Steps\\012\\012--   0. Create the TEMP_MATERIAL_BATCHES table.\\012\\012--   1. Insert a record into TEMP_MATERIAL_BATCHES for each material batch that is duplicated\\012--      in the MATERIAL_BATCHES table. The record with the minimum material batch id of\\012--      each set of duplicate material batches is selected and inserted into TEMP_MATERIAL_BATCHES.\\012\\012--   2. Insert records into SAMPLE_COMPONENT_MATERIALS for each record that is linked to \\012--      a material batch that is duplicated, but insert it with the material batch id\\012--      created in Step 1.\\012   \\012--   3. Delete all records in the SAMPLE_COMPONENT_MATERIALS table that are linked to \\012--      duplicates in the MATERIAL_BATCHES table, but are not in the TEMP_MATERIAL_BATCHES\\012--      table.\\012   \\012--   4. Delete all records in the MATERIAL_BATCHES table that are duplicates, \\012--      but are not in the TEMP_MATERIAL_BATCHES table.\\012   \\012--   5. Create the unique key constraint MABA_BK_UK\\012\\012--   6. Drop the TEMP_MATERIAL_BATCHES table.\\012\\012-- ===================================================================================================\\012\\012---------\\012-- Step 0\\012---------\\012\\012\\012CREATE TABLE TEMP_MATERIAL_BATCHES (ID TECH_ID NOT NULL, MATE_ID TECH_ID NOT NULL,CODE CODE NOT NULL) ;\\012\\012ALTER TABLE TEMP_MATERIAL_BATCHES ADD CONSTRAINT U_MABA_PK PRIMARY KEY(ID);\\012\\012ALTER TABLE TEMP_MATERIAL_BATCHES ADD CONSTRAINT U_MABA_BK_UK UNIQUE(CODE, MATE_ID);\\012\\012\\012---------\\012-- Step 1\\012---------\\012\\012\\012insert into TEMP_MATERIAL_BATCHES ( id, mate_id, code ) \\012   select min(id), mate_id, code\\012   from material_batches\\012   where (mate_id, code) in (select mate_id, code\\012                             from material_batches\\012                             group by mate_id, code having count(*) > 1)\\012   group by mate_id, code \\012;\\012\\012---------\\012-- Step 2\\012---------\\012\\012insert into sample_component_materials (id, maba_id, saco_id)\\012   select nextval('SCMA_ID_SEQ')\\012         ,(select id from temp_material_batches temp_maba where temp_maba.mate_id = maba.mate_id and temp_maba.code = maba.code) as temp_maba_id\\012         ,scma.saco_id\\012   from material_batches maba\\012      , sample_component_materials scma\\012   where (maba.mate_id, maba.code) in (select mate_id, code\\012                             from material_batches\\012                             group by mate_id, code having count(*) > 1)\\012   and maba.id not in (select id from temp_material_batches )\\012   and maba.id = scma.maba_id\\012;\\012\\012\\012---------\\012-- Step 3\\012---------\\012\\012delete from sample_component_materials\\012where (maba_id, saco_id) in (\\012   select  maba.id\\012         , scma.saco_id\\012   from material_batches maba\\012      , sample_component_materials scma\\012   where (maba.mate_id, maba.code) in (select mate_id, code\\012                             from material_batches\\012                             group by mate_id, code having count(*) > 1)\\012   and scma.maba_id not in (select id from temp_material_batches)\\012   and maba.id = scma.maba_id )\\012;\\012\\012\\012---------\\012-- Step 4\\012---------\\012\\012delete from material_batches\\012where (id, mate_id, code) in (\\012   select  id\\012         , mate_id\\012         , code\\012   from material_batches maba\\012   where (maba.mate_id, maba.code) in (select mate_id, code\\012                             from material_batches\\012                             group by mate_id, code having count(*) > 1)\\012   and maba.id not in (select id from temp_material_batches)\\012   )\\012;\\012\\012\\012---------\\012-- Step 5\\012---------\\012\\012ALTER TABLE MATERIAL_BATCHES ADD CONSTRAINT MABA_BK_UK UNIQUE(CODE,MATE_ID);\\012\\012\\012---------\\012-- Step 6\\012---------\\012\\012drop table TEMP_MATERIAL_BATCHES;\\012\\012	\N
009	source/sql/postgresql/migration/migration-008-009.sql	SUCCESS	2008-05-09 10:10:51.773	----------------------------------------------------------------------------------------------\\012--  File: migration-008-009.sql\\012--\\012-- \\012--  This script enables the migration of the database schema from 008 to 009.\\012-- \\012--  Update History\\012--\\012--\\012--\\011Who\\011\\011\\011\\011\\011\\011\\011When\\011\\011\\011\\011What\\012--\\011---\\011\\011\\011\\011\\011\\011\\011----\\011\\011\\011\\011----\\012--\\011Tomasz Pylak\\011\\01109-11-2007\\011Initial Version - updated property types labels and codes \\012--  \\012----------------------------------------------------------------------------------------------\\012----------------------------------------------------------------------\\012--  Purpose:  Insert an initial data set into the table PROPERTY_TYPES\\012--\\012--  Authors: Tomasz Pylak\\012--\\012--  Change History:\\012--\\012--  Date          Author       Description\\012--  09-11-2007   Tomasz Pylak  First Draft\\012--\\012-----------------------------------------------------------------------\\012\\012update PROPERTY_TYPES\\012set code = 'NUCLEOTIDE_SEQUENCE',\\012\\011\\011label = 'Nucleotide Sequence'\\012where code = 'NUCLEOTIDE SEQUENCE';\\012\\012update PROPERTY_TYPES\\012set code = 'GENE_SYMBOL',\\012\\011\\011label = 'Gene Symbol'\\012where code = 'GENE SYMBOL';\\012\\012update PROPERTY_TYPES\\012set code = 'ACCESSION_NUMBER',\\012\\011\\011label = 'Accession Number'\\012where code = 'ACCESSION NUMBER';\\012\\012update PROPERTY_TYPES\\012set label = 'Description'\\012where code = 'DESCRIPTION';\\012\\012update PROPERTY_TYPES\\012set label = 'Offset'\\012where code = 'OFFSET';\\012	\N
010	source/sql/postgresql/migration/migration-009-010.sql	SUCCESS	2008-05-09 10:10:56.924	----------------------------------------------------------------------------------------------\\012--  File: migration-009-010.sql\\012--\\012-- \\012--  This script enables the migration of the database schema from 009 to 010.\\012-- \\012--  Update History\\012--\\012--\\012--\\011Who\\011\\011\\011\\011\\011\\011When\\011\\011\\011\\011What\\012--\\011---\\011\\011\\011\\011\\011\\011----\\011\\011\\011\\011----\\012--\\011Randy (CRW)\\011\\01116-11-2007\\011Initial Version\\012--  \\012----------------------------------------------------------------------------------------------\\012\\012\\012-- ##############################################################\\012-- #      C R E A T E     N E W     Structures\\012-- ##############################################################\\012\\012\\012--------------\\012-- New Domains\\012--------------\\012\\012CREATE DOMAIN BOOLEAN_CHAR AS BOOLEAN DEFAULT FALSE;\\012\\012\\012-------------\\012-- New Tables\\012-------------\\012\\012CREATE TABLE MATERIAL_TYPE_PROPERTY_TYPES  (ID TECH_ID NOT NULL,MATY_ID TECH_ID NOT NULL,PRTY_ID TECH_ID NOT NULL,IS_MANDATORY BOOLEAN_CHAR NOT NULL DEFAULT 'F') ;\\012\\012\\012---------------------\\012-- New Table Columns\\012---------------------\\012\\012\\012--------------------------\\012-- New Key Constraints\\012--------------------------\\012\\012ALTER TABLE MATERIAL_TYPE_PROPERTY_TYPES ADD CONSTRAINT MTPT_PK PRIMARY KEY(ID);\\012ALTER TABLE MATERIAL_TYPE_PROPERTY_TYPES ADD CONSTRAINT MTPT_BK_UK UNIQUE(MATY_ID,PRTY_ID);\\012ALTER TABLE MATERIAL_TYPE_PROPERTY_TYPES ADD CONSTRAINT MTPT_MATY_FK FOREIGN KEY (MATY_ID)REFERENCES MATERIAL_TYPES(ID);\\012ALTER TABLE MATERIAL_TYPE_PROPERTY_TYPES ADD CONSTRAINT MTPT_PRTY_FK FOREIGN KEY (PRTY_ID)REFERENCES PROPERTY_TYPES(ID);\\012\\012\\012------------------\\012--  New Sequences\\012------------------\\012\\012--  Creating Sequence for the MATERIAL_TYPE_PROPERTY_TYPES table (standard naming convention was too long)\\012CREATE SEQUENCE MTPT_ID_SEQ;\\012\\012\\012-- ##############################################################\\012-- #      MIGRATE EXISTING Structures and Data\\012-- ##############################################################\\012\\012------------------------------------\\012-- Drop Table Column DISPLAY_ORDER\\012------------------------------------\\012\\012ALTER TABLE MATERIAL_PROPERTIES DROP DISPLAY_ORDER;\\012\\012\\012\\012-- ======================================================\\012-- Migrate the data in the MATERIAL_PROPERTIES table \\012-- from the old to the new structure, i.e. "switch FKs"\\012-- ======================================================\\012\\012------------------------------\\012-- 1. Add Table Column MTPT_ID\\012------------------------------\\012\\012ALTER TABLE MATERIAL_PROPERTIES ADD MTPT_ID TECH_ID;\\012\\012---------------------------------------------------------\\012-- 2. Insert distinct Material Type - Property Type combinations into \\012--    the MATERIAL_TYPE_PROPERTY_TYPES table\\012--    \\012--    Insert all occurrences as NOT Mandatory, initially.\\012---------------------------------------------------------\\012insert into material_type_property_types\\012(   id\\012   ,maty_id\\012   ,prty_id\\012   ,is_mandatory\\012   )\\012select nextval('MTPT_ID_SEQ'), maty.id, prty.id, false \\012from material_types maty\\012, materials mate\\012, material_properties mapr\\012, property_types prty \\012where maty.id      = mate.maty_id\\012and   mate.id      = mapr.mate_id\\012and   mapr.prty_id = prty.id\\012group by maty.id,prty.id\\012;\\012\\012---------------------------------------------------------\\012-- 3. Change certain combinations to IS_MANDATORY = TRUE\\012--    in the MATERIAL_TYPE_PROPERTY_TYPES table\\012--    \\012---------------------------------------------------------\\012update MATERIAL_TYPE_PROPERTY_TYPES\\012set is_Mandatory = true\\012where maty_id = (select id from material_types where code = 'VIRUS')\\012and   prty_id = (select id from property_types where code = 'DESCRIPTION');\\012\\012update MATERIAL_TYPE_PROPERTY_TYPES\\012set is_Mandatory = true\\012where maty_id = (select id from material_types where code = 'GENE')\\012and   prty_id = (select id from property_types where code = 'GENE_SYMBOL');\\012\\012update MATERIAL_TYPE_PROPERTY_TYPES\\012set is_Mandatory = true\\012where maty_id = (select id from material_types where code = 'OLIGO')\\012and   prty_id = (select id from property_types where code = 'NUCLEOTIDE_SEQUENCE');\\012\\012\\012\\012---------------------------------------------------------\\012-- 4. Link the records in the MATERIAL_PROPERTIES table\\012--    to the MATERIAL_TYPE_PROPERTY_TYPES table\\012--    via the new column MTPT_ID\\012---------------------------------------------------------\\012update material_properties mapr\\012set mtpt_id = (select mtpt.id \\012   from material_type_property_types mtpt, property_types pt \\012   where mtpt.prty_id = pt.id\\012   and   pt.id        = mapr.prty_id\\012   and   mtpt.maty_id = (select mt.id \\012                        from material_types mt, materials mate \\012                        where mate.maty_id = mt.id\\012                        and   mate.id      = mapr.mate_id\\012                        group by mt.id)\\012);\\012\\012---------------------------------------------------------\\012-- 5. Make the column MTPT_ID mandatory\\012---------------------------------------------------------\\012ALTER TABLE MATERIAL_PROPERTIES ALTER MTPT_ID SET NOT NULL;\\012\\012---------------------------------------------------------\\012-- 6. Add New foreign key constraint MAPR_MTPT_FK\\012---------------------------------------------------------\\012ALTER TABLE MATERIAL_PROPERTIES ADD CONSTRAINT MAPR_MTPT_FK FOREIGN KEY (MTPT_ID)REFERENCES MATERIAL_TYPE_PROPERTY_TYPES(ID);\\012\\012---------------------------------------------------------\\012-- 7. Drop the foreign key Constraint MAPR_PRTY_FK\\012---------------------------------------------------------\\012ALTER TABLE MATERIAL_PROPERTIES DROP CONSTRAINT MAPR_PRTY_FK;\\012\\012---------------------------------------------------------\\012-- 8. Drop Table Column PRTY_ID\\012---------------------------------------------------------\\012ALTER TABLE MATERIAL_PROPERTIES DROP PRTY_ID;\\012\\012-- ======================================================\\012--  Change the DATA TYPE associated with the PROPERTY TYPE \\012--  'OFFSET' from VARCHAR to INTEGER\\012-- ======================================================\\012update property_types\\012set daty_id = (select id from data_types where code ='INTEGER')\\012where code = 'OFFSET'\\012;\\012\\012\\012-- =========================================================\\012--  Change the value of the CODE of the MATERIAL TYPE VIRUS \\012--  to uppercase for the current values 'Ad3' and 'Ad5'. \\012-- =========================================================\\012update materials\\012set code = upper(code)\\012where maty_id = (select id from material_types where code = 'VIRUS')\\012and   code in ('Ad3', 'Ad5')\\012;\\012\\012-- =========================================================\\012--  Migrate the PROPERTY TYPE 'ACCESSION_NUMBER' to 'REFSEQ' \\012-- =========================================================\\012update property_types\\012set code = 'REFSEQ'\\012, description = 'NCBI Reference Sequence code, applicable to sequences of type: DNA, RNA, protein'\\012, label = 'RefSeq'\\012, daty_id = (select id from data_types where code ='VARCHAR')\\012where code = 'ACCESSION_NUMBER'\\012;\\012\\012\\012-- ##############################################################\\012-- #      Insert     N E W     Data\\012-- ##############################################################\\012\\012------------------------------------------------------------------------\\012-- Add three more MATERIAL TYPE PROPERTY TYPE pairs, namely:\\012--   1. GENE, GENE_SYMBOL, Mandatory\\012--   2. OLIGO, NUCLEOTIDE_SEQUENCE, Mandatory\\012--   3. OLIGO, OFFSET, Not Mandatory--\\012--\\012-- if the corresponding material type exists AND\\012-- if the corresponding property type exists AND\\012-- if the corresponding material type property type pair does NOT exists\\012------------------------------------------------------------------------\\012\\012insert into material_type_property_types\\012(   id\\012   ,maty_id\\012   ,prty_id\\012   ,is_mandatory\\012   )\\012select\\012    nextval('MTPT_ID_SEQ')\\012   ,(select id from material_types where code = 'GENE')\\012   ,(select id from property_types where code = 'GENE_SYMBOL')\\012   ,true \\012from material_types mt\\012where 1 = (select count(id) from material_types where code = 'GENE')\\012and   1 = (select count(id) from property_types where code = 'GENE_SYMBOL')\\012and   0 = (select count(id) from material_type_property_types\\012           where maty_id = (select id from material_types where code = 'GENE')\\012           and   prty_id = (select id from property_types where code = 'GENE_SYMBOL')\\012          )\\012and   mt.id = (select max(id) from material_types)\\012;\\012\\012insert into material_type_property_types\\012(   id\\012   ,maty_id\\012   ,prty_id\\012   ,is_mandatory\\012   )\\012select\\012    nextval('MTPT_ID_SEQ')\\012   ,(select id from material_types where code = 'OLIGO')\\012   ,(select id from property_types where code = 'NUCLEOTIDE_SEQUENCE')\\012   ,true \\012from material_types mt\\012where 1 = (select count(id) from material_types where code = 'OLIGO')\\012and   1 = (select count(id) from property_types where code = 'NUCLEOTIDE_SEQUENCE')\\012and   0 = (select count(id) from material_type_property_types\\012           where maty_id = (select id from material_types where code = 'OLIGO')\\012           and   prty_id = (select id from property_types where code = 'NUCLEOTIDE_SEQUENCE')\\012          )\\012and   mt.id = (select max(id) from material_types)\\012;\\012\\012\\012insert into material_type_property_types\\012(   id\\012   ,maty_id\\012   ,prty_id\\012   ,is_mandatory\\012   )\\012select\\012    nextval('MTPT_ID_SEQ')\\012   ,(select id from material_types where code = 'OLIGO')\\012   ,(select id from property_types where code = 'OFFSET')\\012   ,false \\012from material_types mt\\012where 1 = (select count(id) from material_types where code = 'OLIGO')\\012and   1 = (select count(id) from property_types where code = 'OFFSET')\\012and   0 = (select count(id) from material_type_property_types\\012           where maty_id = (select id from material_types where code = 'OLIGO')\\012           and   prty_id = (select id from property_types where code = 'OFFSET')\\012          )\\012and   mt.id = (select max(id) from material_types)\\012;\\012\\012\\012\\012\\012	\N
011	source/sql/postgresql/migration/migration-010-011.sql	SUCCESS	2008-05-09 10:11:08.967	----------------------------------------------------------------------------------------------\\012--  File: migration-010-011.sql\\012--\\012-- \\012--  This script enables the migration of the database schema from 010 to 011.\\012-- \\012--  Update History\\012--\\012--\\012--\\011Who\\011\\011\\011\\011\\011\\011When\\011\\011\\011\\011What\\012--\\011---\\011\\011\\011\\011\\011\\011----\\011\\011\\011\\011----\\012--\\011Randy (CRW)\\011\\01127-11-2007\\011\\011Initial Version\\012--  \\012----------------------------------------------------------------------------------------------\\012\\012\\012-- ##############################################################\\012-- #      C R E A T E     N E W     Structures\\012-- ##############################################################\\012\\012\\012--------------\\012-- New Domains\\012--------------\\012\\012\\012\\012-------------\\012-- New Tables\\012-------------\\012\\012\\012\\012---------------------\\012-- New Table Columns\\012---------------------\\012\\012ALTER TABLE MATERIAL_PROPERTIES ADD REGISTRATION_TIMESTAMP TIME_STAMP NOT NULL;\\012ALTER TABLE MATERIAL_PROPERTIES ADD PERS_ID_REGISTERER TECH_ID ;\\012\\012ALTER TABLE MATERIAL_TYPE_PROPERTY_TYPES ADD REGISTRATION_TIMESTAMP TIME_STAMP NOT NULL;\\012ALTER TABLE MATERIAL_TYPE_PROPERTY_TYPES ADD PERS_ID_REGISTERER TECH_ID ;\\012\\012ALTER TABLE PROPERTY_TYPES ADD REGISTRATION_TIMESTAMP TIME_STAMP NOT NULL;\\012ALTER TABLE PROPERTY_TYPES ADD PERS_ID_REGISTERER TECH_ID ;\\012\\012--------------------------\\012-- New Key Constraints\\012--------------------------\\012\\012ALTER TABLE MATERIAL_PROPERTIES ADD CONSTRAINT MAPR_PERS_FK FOREIGN KEY (PERS_ID_REGISTERER) REFERENCES PERSONS(ID);\\012\\012ALTER TABLE MATERIAL_TYPE_PROPERTY_TYPES ADD CONSTRAINT MTPT_PERS_FK FOREIGN KEY (PERS_ID_REGISTERER) REFERENCES PERSONS(ID);\\012\\012ALTER TABLE PROPERTY_TYPES ADD CONSTRAINT PRTY_PERS_FK FOREIGN KEY (PERS_ID_REGISTERER) REFERENCES PERSONS(ID);\\012\\012------------------\\012--  New Sequences\\012------------------\\012\\012\\012\\012-- ##############################################################\\012-- #      MIGRATE EXISTING Structures and Data\\012-- ##############################################################\\012\\012\\012-- ======================================================\\012--   Migrate the existing data to be compatible with the\\012--   new NOT NULL columns in the following tables:\\012--      material_type_property_types\\012--      material_properties\\012--      property_types\\012-- ======================================================\\012\\012-----------------------------------------------------------\\012--  1. Set the PERS_ID_REGISTERER column to a default value\\012--     associated with the 'system' PERSON. \\012-----------------------------------------------------------\\012update material_type_property_types\\012set pers_id_registerer = (select id from persons where user_id = 'system');\\012\\012update material_properties\\012set pers_id_registerer = (select id from persons where user_id = 'system');\\012\\012update property_types\\012set pers_id_registerer = (select id from persons where user_id = 'system');\\012\\012\\012---------------------------------------\\012-- 2. Set Table Columns to be MANDATORY\\012---------------------------------------\\012\\012ALTER TABLE MATERIAL_PROPERTIES ALTER PERS_ID_REGISTERER SET NOT NULL;\\012\\012ALTER TABLE MATERIAL_TYPE_PROPERTY_TYPES ALTER PERS_ID_REGISTERER SET NOT NULL;\\012\\012ALTER TABLE PROPERTY_TYPES ALTER PERS_ID_REGISTERER SET NOT NULL;\\012\\012\\012\\012-- ======================================================\\012--  Migrate the data asssociated with the foreign key \\012--  SAMP_PROC_FK data in the SAMPLES table to the \\012--  SAMPLE_INPUTS table.\\012-- ======================================================\\012\\012\\012---------------------------------------------------------\\012-- 1. Insert the records of the SAMPLES table into \\012--    the SAMPLE_INPUTS table\\012--    \\012---------------------------------------------------------\\012insert into sample_inputs\\012(  id\\012  ,samp_id \\012  ,proc_id\\012   )\\012select nextval('SAMPLE_INPUT_ID_SEQ')\\012  ,samp.id \\012  ,samp.proc_id \\012from samples samp\\012   , procedures proc\\012where proc.id      = samp.proc_id\\012;\\012\\012\\012---------------------------------------------------------\\012-- 2. Drop the foreign key Constraint SAMP_PROC_FK\\012---------------------------------------------------------\\012\\012ALTER TABLE SAMPLES DROP CONSTRAINT SAMP_PROC_FK;\\012\\012------------------------------------\\012-- 3. Drop Table Column PROC_ID\\012------------------------------------\\012\\012ALTER TABLE SAMPLES DROP PROC_ID;\\012\\012	\N
012	source/sql/postgresql/migration/migration-011-012.sql	SUCCESS	2008-05-09 10:11:18.685	------------------------------------------------------------------------------------\\012--  Purpose:  Remove the material type CELLNUCL\\012------------------------------------------------------------------------------------\\012\\012delete from material_types\\012where code = 'CELLNUCL';\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Rename the material type code\\012--            from 'CELLLINE' to 'CELL_LINE'\\012------------------------------------------------------------------------------------\\012\\012update material_types\\012set   code = 'CELL_LINE'\\012where code = 'CELLLINE';\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Remove all references to the foreign key column CONT_ID.\\012------------------------------------------------------------------------------------\\012\\012ALTER TABLE SAMPLES DROP CONT_ID;\\012\\012ALTER TABLE MATERIAL_BATCHES DROP CONT_ID;\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Add the ON DELETE CASCADE qualifier to the foreign key MAPR_MTPT_FK of\\012--            the MATERIAL_PROPERTIES table (forgotten from migration 10 -> 11).\\012------------------------------------------------------------------------------------\\012\\012ALTER TABLE MATERIAL_PROPERTIES DROP CONSTRAINT MAPR_MTPT_FK;\\012ALTER TABLE MATERIAL_PROPERTIES ADD CONSTRAINT MAPR_MTPT_FK FOREIGN KEY (MTPT_ID)REFERENCES MATERIAL_TYPE_PROPERTY_TYPES(ID) ON DELETE CASCADE;\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Add new data types to the DATA_TYPES table.\\012--            In particular: BOOLEAN and TIMESTAMP.\\012------------------------------------------------------------------------------------\\012\\012insert into data_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('DATA_TYPE_ID_SEQ')\\012,'BOOLEAN'\\012,'An enumerated type with values True and False'\\012);\\012\\012insert into data_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('DATA_TYPE_ID_SEQ')\\012,'TIMESTAMP'\\012,'Both date and time. Format: yyyy-mm-dd hh:mm:ss'\\012);\\012\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Rename the observable type code\\012--            from 'IMAGE ANALYSIS' to 'IMAGE_ANALYSIS_DATA'\\012------------------------------------------------------------------------------------\\012\\012update observable_types\\012set   code = 'IMAGE_ANALYSIS_DATA'\\012where code = 'IMAGE ANALYSIS';\\012\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Assign the property type DESCRIPTION to the existing material types,\\012--            except VIRUS, as an optional property type. VIRUS is not included as\\012--            it already possesses the property type DESCRIPTION, but as a\\012--            mandatory property type.\\012------------------------------------------------------------------------------------\\012\\012insert into material_type_property_types\\012select  nextval('MTPT_ID_SEQ')\\012   ,(select id from material_types where code = 'GENE')\\012   ,(select id from property_types where code = 'DESCRIPTION')\\012   ,false\\012   ,now()\\012   ,(select id from persons where user_id ='system')\\012from material_type_property_types\\012where id in (select min(id) from material_type_property_types)\\012and 0 = (select count(*) from material_type_property_types\\012         where  maty_id = (select id from material_types where code = 'GENE')\\012         and    prty_id = (select id from property_types where code = 'DESCRIPTION')\\012        )\\012;\\012\\012\\012insert into material_type_property_types\\012select  nextval('MTPT_ID_SEQ')\\012   ,(select id from material_types where code = 'OLIGO')\\012   ,(select id from property_types where code = 'DESCRIPTION')\\012   ,false\\012   ,now()\\012   ,(select id from persons where user_id ='system')\\012from material_type_property_types\\012where id in (select min(id) from material_type_property_types)\\012and 0 = (select count(*) from material_type_property_types\\012         where  maty_id = (select id from material_types where code = 'OLIGO')\\012         and    prty_id = (select id from property_types where code = 'DESCRIPTION')\\012        )\\012;\\012\\012\\012insert into material_type_property_types\\012select  nextval('MTPT_ID_SEQ')\\012   ,(select id from material_types where code = 'CONTROL')\\012   ,(select id from property_types where code = 'DESCRIPTION')\\012   ,false\\012   ,now()\\012   ,(select id from persons where user_id ='system')\\012from material_type_property_types\\012where id in (select min(id) from material_type_property_types)\\012and 0 = (select count(*) from material_type_property_types\\012         where  maty_id = (select id from material_types where code = 'CONTROL')\\012         and    prty_id = (select id from property_types where code = 'DESCRIPTION')\\012        )\\012;\\012\\012\\012insert into material_type_property_types\\012select  nextval('MTPT_ID_SEQ')\\012   ,(select id from material_types where code = 'CELL_LINE')\\012   ,(select id from property_types where code = 'DESCRIPTION')\\012   ,false\\012   ,now()\\012   ,(select id from persons where user_id ='system')\\012from material_type_property_types\\012where id in (select min(id) from material_type_property_types)\\012and 0 = (select count(*) from material_type_property_types\\012         where  maty_id = (select id from material_types where code = 'CELL_LINE')\\012         and    prty_id = (select id from property_types where code = 'DESCRIPTION')\\012        )\\012;\\012\\012\\012\\012-- Creating Indexes (forgotten from migration 10 -> 11)\\012\\012\\012-- Creating Index 'EXPR_PERS_FK_I'\\012CREATE INDEX EXPR_PERS_FK_I ON EXPERIMENT_PROPERTIES\\012 (PERS_ID_REGISTERER)\\012;\\012\\012-- Creating Index 'EXPR_EXPE_FK_I'\\012CREATE INDEX EXPR_EXPE_FK_I ON EXPERIMENT_PROPERTIES\\012 (EXPE_ID)\\012;\\012\\012-- Creating Index 'DAVA_SACO_FK_I'\\012CREATE INDEX DAVA_SACO_FK_I ON DATA_VALUES\\012 (SACO_ID)\\012;\\012\\012-- Creating Index 'DAVA_DATA_FK_I'\\012CREATE INDEX DAVA_DATA_FK_I ON DATA_VALUES\\012 (DATA_ID)\\012;\\012\\012-- Creating Index 'SAIN_SAMP_FK_I'\\012CREATE INDEX SAIN_SAMP_FK_I ON SAMPLE_INPUTS\\012 (SAMP_ID)\\012;\\012\\012-- Creating Index 'SAIN_PROC_FK_I'\\012CREATE INDEX SAIN_PROC_FK_I ON SAMPLE_INPUTS\\012 (PROC_ID)\\012;\\012\\012-- Creating Index 'SACO_SAMP_FK_I'\\012CREATE INDEX SACO_SAMP_FK_I ON SAMPLE_COMPONENTS\\012 (SAMP_ID)\\012;\\012\\012-- Creating Index 'PRTY_PERS_FK_I'\\012CREATE INDEX PRTY_PERS_FK_I ON PROPERTY_TYPES\\012 (PERS_ID_REGISTERER)\\012;\\012\\012-- Creating Index 'PRTY_DATY_FK_I'\\012CREATE INDEX PRTY_DATY_FK_I ON PROPERTY_TYPES\\012 (DATY_ID)\\012;\\012\\012-- Creating Index 'PROC_PCTY_FK_I'\\012CREATE INDEX PROC_PCTY_FK_I ON PROCEDURES\\012 (PCTY_ID)\\012;\\012\\012-- Creating Index 'PROC_PERS_FK_I'\\012CREATE INDEX PROC_PERS_FK_I ON PROCEDURES\\012 (PERS_ID)\\012;\\012\\012-- Creating Index 'PROC_EXPE_FK_I'\\012CREATE INDEX PROC_EXPE_FK_I ON PROCEDURES\\012 (EXPE_ID)\\012;\\012\\012-- Creating Index 'MAPR_PERS_FK_I'\\012CREATE INDEX MAPR_PERS_FK_I ON MATERIAL_PROPERTIES\\012 (PERS_ID_REGISTERER)\\012;\\012\\012-- Creating Index 'MAPR_MATE_FK_I'\\012CREATE INDEX MAPR_MATE_FK_I ON MATERIAL_PROPERTIES\\012 (MATE_ID)\\012;\\012\\012-- Creating Index 'MAPR_MTPT_FK_I'\\012CREATE INDEX MAPR_MTPT_FK_I ON MATERIAL_PROPERTIES\\012 (MTPT_ID)\\012;\\012\\012-- Creating Index 'PROJ_ORGA_FK_I'\\012CREATE INDEX PROJ_ORGA_FK_I ON PROJECTS\\012 (ORGA_ID)\\012;\\012\\012-- Creating Index 'MTPT_PERS_FK_I'\\012CREATE INDEX MTPT_PERS_FK_I ON MATERIAL_TYPE_PROPERTY_TYPES\\012 (PERS_ID_REGISTERER)\\012;\\012\\012-- Creating Index 'MTPT_PRTY_FK_I'\\012CREATE INDEX MTPT_PRTY_FK_I ON MATERIAL_TYPE_PROPERTY_TYPES\\012 (PRTY_ID)\\012;\\012\\012-- Creating Index 'MTPT_MATY_FK_I'\\012CREATE INDEX MTPT_MATY_FK_I ON MATERIAL_TYPE_PROPERTY_TYPES\\012 (MATY_ID)\\012;\\012\\012-- Creating Index 'SCMA_MABA_FK_I'\\012CREATE INDEX SCMA_MABA_FK_I ON SAMPLE_COMPONENT_MATERIALS\\012 (MABA_ID)\\012;\\012\\012-- Creating Index 'SCMA_SACO_FK_I'\\012CREATE INDEX SCMA_SACO_FK_I ON SAMPLE_COMPONENT_MATERIALS\\012 (SACO_ID)\\012;\\012\\012-- Creating Index 'EXDA_LOTY_FK_I'\\012CREATE INDEX EXDA_LOTY_FK_I ON EXTERNAL_DATA\\012 (LOTY_ID)\\012;\\012\\012-- Creating Index 'EXDA_FFTY_FK_I'\\012CREATE INDEX EXDA_FFTY_FK_I ON EXTERNAL_DATA\\012 (FFTY_ID)\\012;\\012\\012-- Creating Index 'DATA_PROC_FK_I'\\012CREATE INDEX DATA_PROC_FK_I ON DATA\\012 (PROC_ID_ACQUIRED_BY)\\012;\\012\\012-- Creating Index 'DATA_SAMP_DERIVED_FROM_FK_I'\\012CREATE INDEX DATA_SAMP_DERIVED_FROM_FK_I ON DATA\\012 (SAMP_ID_DERIVED_FROM)\\012;\\012\\012-- Creating Index 'DATA_SAMP_FK_I'\\012CREATE INDEX DATA_SAMP_FK_I ON DATA\\012 (SAMP_ID_ACQUIRED_FROM)\\012;\\012\\012-- Creating Index 'DATA_OBTY_FK_I'\\012CREATE INDEX DATA_OBTY_FK_I ON DATA\\012 (OBTY_ID)\\012;\\012\\012-- Creating Index 'SAMP_PERS_FK_I'\\012CREATE INDEX SAMP_PERS_FK_I ON SAMPLES\\012 (PERS_ID_REGISTERER)\\012;\\012\\012-- Creating Index 'SAMP_SAMP_FK_I_GENERATED_FROM'\\012CREATE INDEX SAMP_SAMP_FK_I_GENERATED_FROM ON SAMPLES\\012 (SAMP_ID_GENERATED_FROM)\\012;\\012\\012-- Creating Index 'SAMP_SAMP_FK_I_TOP'\\012CREATE INDEX SAMP_SAMP_FK_I_TOP ON SAMPLES\\012 (SAMP_ID_TOP)\\012;\\012\\012-- Creating Index 'SAMP_SATY_FK_I'\\012CREATE INDEX SAMP_SATY_FK_I ON SAMPLES\\012 (SATY_ID)\\012;\\012\\012-- Creating Index 'MABA_PERS_FK_I'\\012CREATE INDEX MABA_PERS_FK_I ON MATERIAL_BATCHES\\012 (PERS_ID_REGISTERER)\\012;\\012\\012-- Creating Index 'MABA_MATE_FK_I'\\012CREATE INDEX MABA_MATE_FK_I ON MATERIAL_BATCHES\\012 (MATE_ID)\\012;\\012\\012-- Creating Index 'MABA_PROC_FK_I'\\012CREATE INDEX MABA_PROC_FK_I ON MATERIAL_BATCHES\\012 (PROC_ID)\\012;\\012\\012-- Creating Index 'MATE_PERS_FK_I'\\012CREATE INDEX MATE_PERS_FK_I ON MATERIALS\\012 (PERS_ID_REGISTERER)\\012;\\012\\012-- Creating Index 'MATE_MATY_FK_I'\\012CREATE INDEX MATE_MATY_FK_I ON MATERIALS\\012 (MATY_ID)\\012;\\012\\012-- Creating Index 'MATE_MATE_FK_I'\\012CREATE INDEX MATE_MATE_FK_I ON MATERIALS\\012 (MATE_ID_INHIBITOR_OF)\\012;\\012\\012-- Creating Index 'EXPE_PERS_FK_I'\\012CREATE INDEX EXPE_PERS_FK_I ON EXPERIMENTS\\012 (PERS_ID_REGISTERER)\\012;\\012\\012-- Creating Index 'EXPE_EXTY_FK_I'\\012CREATE INDEX EXPE_EXTY_FK_I ON EXPERIMENTS\\012 (EXTY_ID)\\012;\\012\\012-- Creating Index 'EXPE_MATE_FK_I'\\012CREATE INDEX EXPE_MATE_FK_I ON EXPERIMENTS\\012 (MATE_ID_STUDY_OBJECT)\\012;\\012\\012-- Creating Index 'EXPE_PROJ_FK_I'\\012CREATE INDEX EXPE_PROJ_FK_I ON EXPERIMENTS\\012 (PROJ_ID)\\012;\\012	\N
013	source/sql/postgresql/migration/migration-012-013.sql	SUCCESS	2008-05-09 10:11:20.487	----------------------------------------------------------------------------------------------\\012--  File: migration-012-013.sql\\012--\\012-- \\012--  This script enables the migration of the database schema from 012 to 013.\\012-- \\012--  Update History\\012--\\012--\\012--\\011Who\\011\\011\\011\\011\\011\\011\\011When\\011\\011\\011\\011What\\012--\\011---\\011\\011\\011\\011\\011\\011\\011----\\011\\011\\011\\011----\\012--\\011Bernd Rinn\\011\\0112008-01-04\\011Initial Version - add support for invalidations and material type BACTERIUM \\012--\\011Bernd Rinn\\011\\0112008-01-05\\011Add material type COMPOUND and material type property type entries for the new material types \\012--  \\012----------------------------------------------------------------------------------------------\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Create function RENAME_SEQUENCE() that is required for renaming the sequences belonging to tables\\012------------------------------------------------------------------------------------\\012\\012CREATE FUNCTION RENAME_SEQUENCE(OLD_NAME VARCHAR, NEW_NAME VARCHAR) RETURNS INTEGER AS $$\\012DECLARE\\012  CURR_SEQ_VAL   INTEGER;\\012BEGIN\\012  SELECT INTO CURR_SEQ_VAL NEXTVAL(OLD_NAME);\\012  EXECUTE 'CREATE SEQUENCE ' || NEW_NAME || ' START WITH ' || CURR_SEQ_VAL;\\012  EXECUTE 'DROP SEQUENCE ' || OLD_NAME;\\012  RETURN CURR_SEQ_VAL;\\012END;\\012$$ LANGUAGE 'plpgsql';\\012\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Add table INVALIDATIONS to store invalidations\\012------------------------------------------------------------------------------------\\012\\012CREATE TABLE INVALIDATIONS (ID TECH_ID NOT NULL,PERS_ID_REGISTERER TECH_ID NOT NULL,REGISTRATION_TIMESTAMP TIME_STAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,REASON DESCRIPTION_250);\\012ALTER TABLE INVALIDATIONS ADD CONSTRAINT INVA_PK PRIMARY KEY(ID);\\012ALTER TABLE INVALIDATIONS ADD CONSTRAINT INVA_PERS_FK FOREIGN KEY (PERS_ID_REGISTERER) REFERENCES PERSONS(ID);\\012CREATE SEQUENCE INVALIDATION_ID_SEQ;\\012CREATE INDEX INVA_PERS_FK_I ON INVALIDATIONS (PERS_ID_REGISTERER);\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Add column INVA_ID to table SAMPLES in order to allow invalidation of samples  \\012------------------------------------------------------------------------------------\\012\\012ALTER TABLE SAMPLES ADD INVA_ID TECH_ID;\\012ALTER TABLE SAMPLES ADD CONSTRAINT SAMP_INVA_FK FOREIGN KEY (INVA_ID) REFERENCES INVALIDATIONS(ID);\\012CREATE INDEX SAMP_INVA_FK_I ON SAMPLES (INVA_ID);\\012\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Rename table EXPERIMENT_PROPERTIES TO EXPERIMENT_ATTACHMENTS  \\012------------------------------------------------------------------------------------\\012\\012ALTER TABLE EXPERIMENT_PROPERTIES DROP CONSTRAINT EXPR_PK;\\012ALTER TABLE EXPERIMENT_PROPERTIES DROP CONSTRAINT EXPR_BK_UK;\\012ALTER TABLE EXPERIMENT_PROPERTIES DROP CONSTRAINT EXPR_EXPE_FK;\\012ALTER TABLE EXPERIMENT_PROPERTIES DROP CONSTRAINT EXPR_PERS_FK;\\012\\012ALTER TABLE EXPERIMENT_PROPERTIES RENAME TO EXPERIMENT_ATTACHMENTS;\\012ALTER INDEX EXPR_EXPE_FK_I RENAME TO EXAT_EXPE_FK_I;\\012ALTER INDEX EXPR_PERS_FK_I RENAME TO EXAT_PERS_FK_I;\\012SELECT RENAME_SEQUENCE('EXPERIMENT_PROPERTY_ID_SEQ', 'EXPERIMENT_ATTACHMENT_ID_SEQ');\\012\\012ALTER TABLE EXPERIMENT_ATTACHMENTS ADD CONSTRAINT EXAT_PK PRIMARY KEY(ID);\\012ALTER TABLE EXPERIMENT_ATTACHMENTS ADD CONSTRAINT EXAT_BK_UK UNIQUE(EXPE_ID,FILE_NAME,VERSION);\\012ALTER TABLE EXPERIMENT_ATTACHMENTS ADD CONSTRAINT EXAT_EXPE_FK FOREIGN KEY (EXPE_ID) REFERENCES EXPERIMENTS(ID);\\012ALTER TABLE EXPERIMENT_ATTACHMENTS ADD CONSTRAINT EXAT_PERS_FK FOREIGN KEY (PERS_ID_REGISTERER) REFERENCES PERSONS(ID);\\012\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Add the material type BACTERIUM\\012------------------------------------------------------------------------------------\\012\\012insert into material_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('MATERIAL_TYPE_ID_SEQ')\\012,'BACTERIUM'\\012,'Bacterium'\\012);\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Add the material type COMPOUND\\012------------------------------------------------------------------------------------\\012\\012insert into material_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('MATERIAL_TYPE_ID_SEQ')\\012,'COMPOUND'\\012,'Compound'\\012);\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Insert an initial data set into the table MATERIAL_TYPE_PROPERTY_TYPES\\012------------------------------------------------------------------------------------\\012\\012   -----------------------\\012   --  Material Type BACTERIUM\\012   -----------------------\\012\\012insert into material_type_property_types\\012(   id\\012   ,maty_id\\012   ,prty_id\\012   ,is_mandatory\\012   ,pers_id_registerer\\012   )\\012values \\012   (nextval('MTPT_ID_SEQ')\\012   ,(select id from material_types where code = 'BACTERIUM')\\012   ,(select id from property_types where code = 'DESCRIPTION')\\012   ,true\\012   ,(select id from persons where user_id ='system')\\012);\\012\\012   -----------------------\\012   --  Material Type COMPOUND\\012   -----------------------\\012\\012insert into material_type_property_types\\012(   id\\012   ,maty_id\\012   ,prty_id\\012   ,is_mandatory\\012   ,pers_id_registerer\\012   )\\012values \\012   (nextval('MTPT_ID_SEQ')\\012   ,(select id from material_types where code = 'COMPOUND')\\012   ,(select id from property_types where code = 'DESCRIPTION')\\012   ,true\\012   ,(select id from persons where user_id ='system')\\012);\\012\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Change according to naming convention for CODEs\\012------------------------------------------------------------------------------------\\012\\012update procedure_types set code='DATA_ACQUISITION' where code='DATA ACQUISITION';\\012update procedure_types set code='IMAGE_ANALYSIS' where code='IMAGE ANALYSIS';\\012update locator_types set code='RELATIVE_LOCATION' where code='RELATIVE LOCATION';\\012update sample_types set code='MASTER_PLATE' where code='MASTER PLATE';\\012update sample_types set code='DILUTION_PLATE' where code='DILUTION PLATE';\\012update sample_types set code='CELL_PLATE' where code='CELL PLATE';\\012update sample_types set code='REINFECT_PLATE' where code='REINFECT PLATE';\\012update sample_types set description='Re-infection Plate' where code='REINFECT_PLATE';\\012update sample_types set code='CONTROL_LAYOUT' where code='CONTROL LAYOUT';\\012	\N
014	source/sql/postgresql/migration/migration-013-014.sql	SUCCESS	2008-05-09 10:11:22.523	----------------------------------------------------------------------------------------------\\012--  File: migration-013-014.sql\\012--\\012-- \\012--  This script enables the migration of the database schema from 013 to 014.\\012-- \\012--  Update History\\012--\\012--\\012--\\011Who\\011\\011\\011When\\011\\011What\\012--\\011---\\011\\011\\011----\\011\\011----\\012--\\011Charles Ramin-Wright\\0112008-01-29\\011Initial Version \\012--  \\012----------------------------------------------------------------------------------------------\\012\\012--=================================\\012-- New Tables and related objects\\012--=================================\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Add tables CONTROLLED_VOCABULARIES and CONTROLLED_VOCABULARY_TERMS\\012------------------------------------------------------------------------------------\\012\\012CREATE TABLE CONTROLLED_VOCABULARIES (ID TECH_ID NOT NULL,CODE CODE NOT NULL,DESCRIPTION DESCRIPTION_80,REGISTRATION_TIMESTAMP TIME_STAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,PERS_ID TECH_ID NOT NULL);\\012CREATE TABLE CONTROLLED_VOCABULARY_TERMS (ID TECH_ID NOT NULL,CODE OBJECT_NAME NOT NULL,REGISTRATION_TIMESTAMP TIME_STAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,COVO_ID TECH_ID NOT NULL,PERS_ID TECH_ID NOT NULL);\\012\\012\\012-- Creating primary key constraints\\012\\012ALTER TABLE CONTROLLED_VOCABULARIES ADD CONSTRAINT COVO_PK PRIMARY KEY(ID);\\012ALTER TABLE CONTROLLED_VOCABULARY_TERMS ADD CONSTRAINT CVTE_PK PRIMARY KEY(ID);\\012\\012-- Creating unique constraints\\012\\012ALTER TABLE CONTROLLED_VOCABULARIES ADD CONSTRAINT COVO_BK_UK UNIQUE(CODE);\\012ALTER TABLE CONTROLLED_VOCABULARY_TERMS ADD CONSTRAINT CVTE_BK_UK UNIQUE(CODE,COVO_ID);\\012\\012-- Creating foreign key constraints\\012\\012ALTER TABLE CONTROLLED_VOCABULARIES ADD CONSTRAINT COVO_PERS_FK FOREIGN KEY (PERS_ID) REFERENCES PERSONS(ID);\\012ALTER TABLE CONTROLLED_VOCABULARY_TERMS ADD CONSTRAINT CVTE_COVO_FK FOREIGN KEY (COVO_ID) REFERENCES CONTROLLED_VOCABULARIES(ID);\\012ALTER TABLE CONTROLLED_VOCABULARY_TERMS ADD CONSTRAINT CVTE_PERS_FK FOREIGN KEY (PERS_ID) REFERENCES PERSONS(ID);\\012\\012-- Creating sequences\\012\\012CREATE SEQUENCE CONTROLLED_VOCABULARY_ID_SEQ;\\012CREATE SEQUENCE CVTE_ID_SEQ;\\012\\012\\012-- Creating indexes\\012\\012CREATE INDEX COVO_PERS_FK_I ON CONTROLLED_VOCABULARIES (PERS_ID);\\012CREATE INDEX CVTE_COVO_FK_I ON CONTROLLED_VOCABULARY_TERMS (COVO_ID);\\012CREATE INDEX CVTE_PERS_FK_I ON CONTROLLED_VOCABULARY_TERMS (PERS_ID);\\012\\012\\012--====================================\\012-- Modifications of existing objects\\012--====================================\\012\\012---------------------------------------------------------------------------------------------------\\012--  Purpose:  Add column INVA_ID to table EXPERIMENTS in order to allow invalidation of experiments\\012---------------------------------------------------------------------------------------------------\\012\\012ALTER TABLE EXPERIMENTS ADD INVA_ID TECH_ID;\\012ALTER TABLE EXPERIMENTS ADD CONSTRAINT EXPE_INVA_FK FOREIGN KEY (INVA_ID) REFERENCES INVALIDATIONS(ID);\\012CREATE INDEX EXPE_INVA_FK_I ON EXPERIMENTS (INVA_ID);\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Add column SAMP_ID_CONTROL_LAYOUT to table SAMPLES in order to allow \\012--            the association of a sample of type CONTROL_LAYOUT to samples\\012------------------------------------------------------------------------------------\\012\\012ALTER TABLE SAMPLES ADD SAMP_ID_CONTROL_LAYOUT TECH_ID;\\012ALTER TABLE SAMPLES ADD CONSTRAINT SAMP_SAMP_FK_CONTROL_LAYOUT FOREIGN KEY (SAMP_ID_CONTROL_LAYOUT) REFERENCES SAMPLES(ID);\\012CREATE INDEX SAMP_SAMP_FK_I_CONTROL_LAYOUT ON SAMPLES (SAMP_ID_CONTROL_LAYOUT);\\012\\012\\012--------------------------------------------------------------\\012--  Purpose:  Add column CVTE_ID to table MATERIAL_PROPERTIES \\012--------------------------------------------------------------\\012ALTER TABLE MATERIAL_PROPERTIES ADD CVTE_ID TECH_ID;\\012ALTER TABLE MATERIAL_PROPERTIES ADD CONSTRAINT MAPR_CVTE_FK FOREIGN KEY (CVTE_ID) REFERENCES CONTROLLED_VOCABULARY_TERMS(ID);\\012CREATE INDEX MAPR_CVTE_FK_I ON MATERIAL_PROPERTIES (CVTE_ID);\\012\\012--------------------------------------------------------------\\012--  Purpose:  Change column VALUE from mandatory to optional\\012--------------------------------------------------------------\\012ALTER TABLE MATERIAL_PROPERTIES ALTER VALUE DROP NOT NULL;\\012\\012-- Creating check constraints\\012\\012ALTER TABLE MATERIAL_PROPERTIES ADD CONSTRAINT VALUE_OR_CVTE_ID CHECK ((value IS NOT NULL and cvte_id IS NULL) or (value IS NULL and cvte_id IS NOT NULL));\\012\\012\\012--------------------------------------------------------------\\012--  Purpose:  Add column COVO_ID to table PROPERTY_TYPES  \\012--------------------------------------------------------------\\012ALTER TABLE PROPERTY_TYPES ADD COVO_ID TECH_ID;\\012ALTER TABLE PROPERTY_TYPES ADD CONSTRAINT PRTY_COVO_FK FOREIGN KEY (COVO_ID) REFERENCES CONTROLLED_VOCABULARIES(ID);\\012CREATE INDEX PRTY_COVO_FK_I ON PROPERTY_TYPES (COVO_ID);\\012\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Create trigger CONTROLLED_VOCABULARY_CHECK \\012------------------------------------------------------------------------------------\\012\\012CREATE OR REPLACE FUNCTION CONTROLLED_VOCABULARY_CHECK() RETURNS trigger AS $$\\012DECLARE\\012   cnt     INTEGER;\\012   v_code  CODE;\\012BEGIN\\012\\012   select code into v_code from data_types where id  = NEW.daty_id;\\012\\012   -- Check if the data is of type "CONTROLLEDVOCABULARY"\\012   if v_code = 'CONTROLLEDVOCABULARY' then\\012      if NEW.covo_id IS NULL then\\012         RAISE EXCEPTION 'Insert/Update of Property Type (Code: %) failed, as its Data Type is CONTROLLEDVOCABULARY, but it is not linked to a Controlled Vocabulary.', NEW.code;\\012      end if;\\012   end if;\\012\\012   RETURN NEW;\\012\\012END;\\012$$ LANGUAGE 'plpgsql';\\012\\012\\012CREATE TRIGGER CONTROLLED_VOCABULARY_CHECK BEFORE INSERT OR UPDATE ON PROPERTY_TYPES\\012    FOR EACH ROW EXECUTE PROCEDURE CONTROLLED_VOCABULARY_CHECK();\\012\\012\\012--====================================\\012-- Deletion of existing objects\\012--====================================\\012\\012drop trigger br001_crtl_plate_chk on samples;\\012drop function br001_crtl_plate_chk();\\012\\012\\012--====================================\\012-- Add Master Data\\012--====================================\\012\\012-----------------------------------------------------------------------------------\\012--  Purpose:  Insert into the table DATA_TYPES\\012--\\012--            Create the data type CONTROLLEDVOCABULARY.\\012-----------------------------------------------------------------------------------\\012insert into data_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('DATA_TYPE_ID_SEQ')\\012,'CONTROLLEDVOCABULARY'\\012,'Controlled Vocabulary'\\012);\\012\\012--==========================================\\012--\\012--   Data Migration\\012--\\012--==========================================\\012\\012-----------------------------------------------------------------------------------\\012--  Purpose:  Migrate the CONTROL_LAYOUTs from the SAMPLE_INPUTS table \\012--            to the foreign key SAMP_SAMP_FK_CONTROL_LAYOUT in the SAMPLES table\\012--\\012--            This results in having all CONTROL_LAYOUTs being directly linked \\012--            to CELL_PLATEs.            \\012-----------------------------------------------------------------------------------\\012\\012UPDATE samples cell_plate\\012   SET samp_id_control_layout = \\012          (select control_layout.samp_id\\012           from   sample_inputs control_layout inner join samples s \\012           on     control_layout.samp_id = s.id\\012           where  s.saty_id = (select id from sample_types where code = 'CONTROL_LAYOUT')\\012           and    proc_id = (\\012              select  proc_id\\012              from sample_inputs cp\\012              where cp.samp_id = cell_plate.id))\\012   WHERE saty_id = (select id from sample_types where code = 'CELL_PLATE')\\012   and   id = (select distinct (samp_id)\\012                  from   sample_inputs sain inner join samples s2 \\012                  on  sain.samp_id = cell_plate.id)\\012;\\012\\012-----------------------------------------------------------------------------------\\012--   Delete the CONTROL LAYOUTs from the SAMPLE_INPUTS table\\012-----------------------------------------------------------------------------------\\012\\012delete from sample_inputs\\012where  id in (select si.id \\012              from   sample_inputs si inner join samples s \\012              on     si.samp_id = s.id\\012              where  s.saty_id = (select id from sample_types where code = 'CONTROL_LAYOUT')\\012              )\\012;\\012\\012	\N
015	source/sql/postgresql/migration/migration-014-015.sql	SUCCESS	2008-05-09 10:11:31.428	----------------------------------------------------------------------------------------------\\012--  File: migration-014-015.sql\\012--\\012-- \\012--  This script enables the migration of the database schema from 014 to 015.\\012-- \\012--  Update History\\012--\\012--\\012--\\011Who\\011\\011\\011When\\011\\011What\\012--\\011---\\011\\011\\011----\\011\\011----\\012--\\011Charles Ramin-Wright\\0112008-02-19\\011Initial Version \\012--  \\012----------------------------------------------------------------------------------------------\\012\\012--=================================\\012-- New Tables and related objects\\012--=================================\\012\\012------------------------------------------------------------------------------------\\012--\\012--      created table 'SAMPLE_TYPE_PROPERTY_TYPES' to implement entity 'SAMPLE TYPE PROPERTY TYPE'\\012--      created table 'SAMPLE_PROPERTIES' to implement entity 'SAMPLE PROPERTY'\\012--      created table 'EXPERIMENT_TYPE_PROPERTY_TYPES' to implement entity 'EXPERIMENT TYPE PROPERTY TYPE'\\012--      created table 'EXPERIMENT_PROPERTIES' to implement entity 'EXPERIMENT PROPERTY'\\012--\\012--      created primary key 'EXPERIMENT_PROPERTIES.EXPR_PK' for table 'EXPERIMENT_PROPERTIES'\\012--      created unique key 'EXPERIMENT_PROPERTIES.EXPR_BK_UK' for table 'EXPERIMENT_PROPERTIES'\\012--\\012--      created primary key 'EXPERIMENT_TYPE_PROPERTY_TYPES.ETPT_PK' for table 'EXPERIMENT_TYPE_PROPERTY_TYPES'\\012--      created unique key 'EXPERIMENT_TYPE_PROPERTY_TYPES.ETPT_BK_UK' for table 'EXPERIMENT_TYPE_PROPERTY_TYPES'\\012--\\012--      created primary key 'SAMPLE_PROPERTIES.SAPR_PK' for table 'SAMPLE_PROPERTIES'\\012--      created unique key 'SAMPLE_PROPERTIES.SAPR_BK_UK' for table 'SAMPLE_PROPERTIES'\\012--\\012--      created primary key 'SAMPLE_TYPE_PROPERTY_TYPES.STPT_PK' for table 'SAMPLE_TYPE_PROPERTY_TYPES'\\012--      created unique key 'SAMPLE_TYPE_PROPERTY_TYPES.STPT_BK_UK' for table 'SAMPLE_TYPE_PROPERTY_TYPES'\\012------------------------------------------------------------------------------------\\012\\012-- Creating tables\\012\\012CREATE TABLE EXPERIMENT_PROPERTIES (ID TECH_ID NOT NULL,VALUE GENERIC_VALUE,REGISTRATION_TIMESTAMP TIME_STAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,EXPE_ID TECH_ID NOT NULL,ETPT_ID TECH_ID NOT NULL,CVTE_ID TECH_ID,PERS_ID_REGISTERER TECH_ID NOT NULL);\\012CREATE TABLE EXPERIMENT_TYPE_PROPERTY_TYPES (ID TECH_ID NOT NULL,EXTY_ID TECH_ID NOT NULL,PRTY_ID TECH_ID NOT NULL,IS_MANDATORY BOOLEAN_CHAR NOT NULL DEFAULT 'F',IS_MANAGED_INTERNALLY BOOLEAN_CHAR NOT NULL DEFAULT 'F',PERS_ID_REGISTERER TECH_ID NOT NULL,REGISTRATION_TIMESTAMP TIME_STAMP NOT NULL DEFAULT CURRENT_TIMESTAMP);\\012CREATE TABLE SAMPLE_PROPERTIES (ID TECH_ID NOT NULL,SAMP_ID TECH_ID NOT NULL,STPT_ID TECH_ID NOT NULL,VALUE GENERIC_VALUE,CVTE_ID TECH_ID,PERS_ID_REGISTERER TECH_ID NOT NULL,REGISTRATION_TIMESTAMP TIME_STAMP NOT NULL DEFAULT CURRENT_TIMESTAMP);\\012CREATE TABLE SAMPLE_TYPE_PROPERTY_TYPES (ID TECH_ID NOT NULL,SATY_ID TECH_ID NOT NULL,PRTY_ID TECH_ID NOT NULL,IS_MANDATORY BOOLEAN_CHAR NOT NULL DEFAULT 'F',IS_MANAGED_INTERNALLY BOOLEAN_CHAR NOT NULL DEFAULT 'F',PERS_ID_REGISTERER TECH_ID NOT NULL,REGISTRATION_TIMESTAMP TIME_STAMP NOT NULL DEFAULT CURRENT_TIMESTAMP);\\012\\012-- Creating primary key constraints\\012\\012ALTER TABLE EXPERIMENT_PROPERTIES ADD CONSTRAINT EXPR_PK PRIMARY KEY(ID);\\012ALTER TABLE EXPERIMENT_TYPE_PROPERTY_TYPES ADD CONSTRAINT ETPT_PK PRIMARY KEY(ID);\\012ALTER TABLE SAMPLE_PROPERTIES ADD CONSTRAINT SAPR_PK PRIMARY KEY(ID);\\012ALTER TABLE SAMPLE_TYPE_PROPERTY_TYPES ADD CONSTRAINT STPT_PK PRIMARY KEY(ID);\\012\\012-- Creating unique constraints\\012\\012ALTER TABLE EXPERIMENT_PROPERTIES ADD CONSTRAINT EXPR_BK_UK UNIQUE(EXPE_ID,ETPT_ID);\\012ALTER TABLE EXPERIMENT_TYPE_PROPERTY_TYPES ADD CONSTRAINT ETPT_BK_UK UNIQUE(EXTY_ID,PRTY_ID);\\012ALTER TABLE SAMPLE_PROPERTIES ADD CONSTRAINT SAPR_BK_UK UNIQUE(SAMP_ID,STPT_ID);\\012ALTER TABLE SAMPLE_TYPE_PROPERTY_TYPES ADD CONSTRAINT STPT_BK_UK UNIQUE(SATY_ID,PRTY_ID);\\012\\012-- Creating foreign key constraints\\012\\012ALTER TABLE EXPERIMENT_PROPERTIES ADD CONSTRAINT EXPR_CVTE_FK FOREIGN KEY (CVTE_ID) REFERENCES CONTROLLED_VOCABULARY_TERMS(ID);\\012ALTER TABLE EXPERIMENT_PROPERTIES ADD CONSTRAINT EXPR_ETPT_FK FOREIGN KEY (ETPT_ID) REFERENCES EXPERIMENT_TYPE_PROPERTY_TYPES(ID) ON DELETE CASCADE;\\012ALTER TABLE EXPERIMENT_PROPERTIES ADD CONSTRAINT EXPR_EXPE_FK FOREIGN KEY (EXPE_ID) REFERENCES EXPERIMENTS(ID);\\012ALTER TABLE EXPERIMENT_PROPERTIES ADD CONSTRAINT EXPR_PERS_FK FOREIGN KEY (PERS_ID_REGISTERER) REFERENCES PERSONS(ID);\\012ALTER TABLE EXPERIMENT_TYPE_PROPERTY_TYPES ADD CONSTRAINT ETPT_EXTY_FK FOREIGN KEY (EXTY_ID) REFERENCES EXPERIMENT_TYPES(ID);\\012ALTER TABLE EXPERIMENT_TYPE_PROPERTY_TYPES ADD CONSTRAINT ETPT_PERS_FK FOREIGN KEY (PERS_ID_REGISTERER) REFERENCES PERSONS(ID);\\012ALTER TABLE EXPERIMENT_TYPE_PROPERTY_TYPES ADD CONSTRAINT ETPT_PRTY_FK FOREIGN KEY (PRTY_ID) REFERENCES PROPERTY_TYPES(ID);\\012ALTER TABLE SAMPLE_PROPERTIES ADD CONSTRAINT SAPR_CVTE_FK FOREIGN KEY (CVTE_ID) REFERENCES CONTROLLED_VOCABULARY_TERMS(ID);\\012ALTER TABLE SAMPLE_PROPERTIES ADD CONSTRAINT SAPR_PERS_FK FOREIGN KEY (PERS_ID_REGISTERER) REFERENCES PERSONS(ID);\\012ALTER TABLE SAMPLE_PROPERTIES ADD CONSTRAINT SAPR_SAMP_FK FOREIGN KEY (SAMP_ID) REFERENCES SAMPLES(ID);\\012ALTER TABLE SAMPLE_PROPERTIES ADD CONSTRAINT SAPR_STPT_FK FOREIGN KEY (STPT_ID) REFERENCES SAMPLE_TYPE_PROPERTY_TYPES(ID) ON DELETE CASCADE;\\012ALTER TABLE SAMPLE_TYPE_PROPERTY_TYPES ADD CONSTRAINT STPT_PERS_FK FOREIGN KEY (PERS_ID_REGISTERER) REFERENCES PERSONS(ID);\\012ALTER TABLE SAMPLE_TYPE_PROPERTY_TYPES ADD CONSTRAINT STPT_PRTY_FK FOREIGN KEY (PRTY_ID) REFERENCES PROPERTY_TYPES(ID);\\012ALTER TABLE SAMPLE_TYPE_PROPERTY_TYPES ADD CONSTRAINT STPT_SATY_FK FOREIGN KEY (SATY_ID) REFERENCES SAMPLE_TYPES(ID);\\012\\012-- Creating check constraints\\012\\012ALTER TABLE EXPERIMENT_PROPERTIES ADD CONSTRAINT EXPR_CK CHECK ((VALUE IS NOT NULL AND CVTE_ID IS NULL) OR (VALUE IS NULL AND CVTE_ID IS NOT NULL));\\012ALTER TABLE SAMPLE_PROPERTIES ADD CONSTRAINT SAPR_CK CHECK ((VALUE IS NOT NULL AND CVTE_ID IS NULL) OR (VALUE IS NULL AND CVTE_ID IS NOT NULL));\\012\\012\\012-- Creating sequences\\012\\012CREATE SEQUENCE ETPT_ID_SEQ;\\012CREATE SEQUENCE EXPERIMENT_PROPERTY_ID_SEQ;\\012CREATE SEQUENCE SAMPLE_PROPERTY_ID_SEQ;\\012CREATE SEQUENCE STPT_ID_SEQ;\\012\\012\\012-- Creating indexes\\012\\012CREATE INDEX ETPT_EXTY_FK_I ON EXPERIMENT_TYPE_PROPERTY_TYPES (EXTY_ID);\\012CREATE INDEX ETPT_PERS_FK_I ON EXPERIMENT_TYPE_PROPERTY_TYPES (PERS_ID_REGISTERER);\\012CREATE INDEX ETPT_PRTY_FK_I ON EXPERIMENT_TYPE_PROPERTY_TYPES (PRTY_ID);\\012CREATE INDEX EXPR_CVTE_FK_I ON EXPERIMENT_PROPERTIES (CVTE_ID);\\012CREATE INDEX EXPR_ETPT_FK_I ON EXPERIMENT_PROPERTIES (ETPT_ID);\\012CREATE INDEX EXPR_EXPE_FK_I ON EXPERIMENT_PROPERTIES (EXPE_ID);\\012CREATE INDEX EXPR_PERS_FK_I ON EXPERIMENT_PROPERTIES (PERS_ID_REGISTERER);\\012CREATE INDEX SAPR_CVTE_FK_I ON SAMPLE_PROPERTIES (CVTE_ID);\\012CREATE INDEX SAPR_PERS_FK_I ON SAMPLE_PROPERTIES (PERS_ID_REGISTERER);\\012CREATE INDEX SAPR_SAMP_FK_I ON SAMPLE_PROPERTIES (SAMP_ID);\\012CREATE INDEX SAPR_STPT_FK_I ON SAMPLE_PROPERTIES (STPT_ID);\\012CREATE INDEX STPT_PERS_FK_I ON SAMPLE_TYPE_PROPERTY_TYPES (PERS_ID_REGISTERER);\\012CREATE INDEX STPT_PRTY_FK_I ON SAMPLE_TYPE_PROPERTY_TYPES (PRTY_ID);\\012CREATE INDEX STPT_SATY_FK_I ON SAMPLE_TYPE_PROPERTY_TYPES (SATY_ID);\\012\\012\\012\\012--====================================\\012-- Modifications of existing objects\\012--====================================\\012\\012---------------------------------------------------------------------------------------------------\\012--  Purpose:  Add column IS_MANAGED_INTERNALLY to table MATERIAL_TYPE_PROPERTY_TYPES in order \\012--- to allow internally managed material properties.\\012---------------------------------------------------------------------------------------------------\\012\\012ALTER TABLE MATERIAL_TYPE_PROPERTY_TYPES ADD IS_MANAGED_INTERNALLY BOOLEAN_CHAR NOT NULL DEFAULT 'F';\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Drop PERS_ID for PROCEDURES\\012------------------------------------------------------------------------------------\\012\\012alter table procedures drop column pers_id;\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Rename PERS_ID into PERS_ID_REGISTERER for CONTROLLED_VOCABULARIES \\012--  and CONTROLLED_VOCABULARY_TERMS\\012------------------------------------------------------------------------------------\\012\\012alter table controlled_vocabularies rename column pers_id to pers_id_registerer;\\012alter table controlled_vocabulary_terms rename column pers_id to pers_id_registerer; \\012\\012\\012---------------------------------------------------------------------------------------------------\\012--  Purpose:  Rename the check constraint from VALUE_OR_CVTE_ID to MAPR_CK of table MATERIAL_PROPERTIES\\012---------------------------------------------------------------------------------------------------\\012\\012ALTER TABLE MATERIAL_PROPERTIES DROP CONSTRAINT VALUE_OR_CVTE_ID;\\012ALTER TABLE MATERIAL_PROPERTIES ADD CONSTRAINT MAPR_CK CHECK ((VALUE IS NOT NULL AND CVTE_ID IS NULL) OR (VALUE IS NULL AND CVTE_ID IS NOT NULL));\\012\\012\\012---------------------------------------------------------------------------------------------------\\012--  Purpose:  Add the column IS_MANAGED_INTERNALLY to the CONTROLLED_VOCABULARIES table \\012---------------------------------------------------------------------------------------------------\\012alter table controlled_vocabularies add is_managed_internally boolean_char NOT NULL DEFAULT 'F';\\012\\012--====================================\\012-- Add Master Data\\012--====================================\\012\\012-----------------------------------------------------------------------------------\\012--  Purpose:  Create Controlled Vocabulary PLATE_GEOMETRY\\012-----------------------------------------------------------------------------------\\012insert into controlled_vocabularies \\012       ( id\\012       , code\\012       , description\\012       , pers_id_registerer\\012       , is_managed_internally )\\012values  (nextval('CONTROLLED_VOCABULARY_ID_SEQ')\\012       , 'PLATE_GEOMETRY'\\012       , 'The geometry or dimensions of a plate'\\012       , (select id from persons where user_id ='system')\\012       , true);\\012\\012\\012-----------------------------------------------------------------------------------\\012--  Purpose:  Create Controlled Vocabulary Terms for PLATE_GEOMETRY\\012-----------------------------------------------------------------------------------\\012insert into controlled_vocabulary_terms \\012       ( id\\012       , code\\012       , covo_id \\012       , pers_id_registerer)\\012values  (nextval('CVTE_ID_SEQ')\\012       , '384_WELLS_16X24'\\012       , (select id from controlled_vocabularies where code ='PLATE_GEOMETRY')\\012       , (select id from persons where user_id ='system'));\\012\\012\\012-----------------------------------------------------------------------------------\\012--  Purpose:  Create property type PLATE_GEOMETRY\\012-----------------------------------------------------------------------------------\\012insert into property_types\\012(id\\012,code\\012,description\\012,label\\012,daty_id\\012,covo_id\\012,pers_id_registerer)\\012values \\012(nextval('PROPERTY_TYPE_ID_SEQ')\\012,'PLATE_GEOMETRY'\\012,'Plate Geometry'\\012,'Plate Geometry'\\012,(select id from data_types where code ='CONTROLLEDVOCABULARY')\\012,(select id from controlled_vocabularies where code ='PLATE_GEOMETRY')\\012,(select id from persons where user_id ='system')\\012);\\012\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Insert an initial data set into the table SAMPLE_TYPE_PROPERTY_TYPES\\012------------------------------------------------------------------------------------\\012\\012   ---------------------------------\\012   --  Sample Type   MASTER_PLATE\\012   --  Property Type PLATE_GEOMETRY   \\012   ---------------------------------\\012\\012insert into sample_type_property_types\\012(   id\\012   ,saty_id\\012   ,prty_id\\012   ,is_mandatory\\012   ,is_managed_internally\\012   ,pers_id_registerer\\012   )\\012values \\012   (nextval('STPT_ID_SEQ')\\012   ,(select id from sample_types where code = 'MASTER_PLATE')\\012   ,(select id from property_types where code = 'PLATE_GEOMETRY')\\012   ,true\\012   ,true\\012   ,(select id from persons where user_id ='system')\\012);\\012\\012   ---------------------------------\\012   --  Sample Type   CONTROL_LAYOUT\\012   --  Property Type PLATE_GEOMETRY   \\012   ---------------------------------\\012\\012insert into sample_type_property_types\\012(   id\\012   ,saty_id\\012   ,prty_id\\012   ,is_mandatory\\012   ,is_managed_internally\\012   ,pers_id_registerer\\012   )\\012values \\012   (nextval('STPT_ID_SEQ')\\012   ,(select id from sample_types where code = 'CONTROL_LAYOUT')\\012   ,(select id from property_types where code = 'PLATE_GEOMETRY')\\012   ,true\\012   ,true\\012   ,(select id from persons where user_id ='system')\\012);\\012\\012\\012--==========================================\\012--\\012--   Data Migration\\012--\\012--==========================================\\012\\012---------------------------------------------------------------------------------\\012--  As the 2 new sample_type_property_types records were defined to be mandatory,\\012--  then there must be a corresponding SAMPLE_PROPERTIES record\\012--  for each existing SAMPLES record. \\012--\\012--  Given the current knowledge of the data to be migrated, the following value\\012--  is used for each Sample Property:\\012--\\012--  Linked to the controlled vocabulary term 384_WELLS_16X24\\012--  of the controlled vocabulary PLATE_GEOMETRY.\\012---------------------------------------------------------------------------------\\012\\012insert into sample_properties\\012     ( id\\012     , samp_id\\012     , stpt_id\\012     , cvte_id\\012     , pers_id_registerer)\\012select nextval('SAMPLE_PROPERTY_ID_SEQ')\\012     , samp.id\\012     , stpt.id\\012     , cvte.id\\012     , (select id from persons where user_id ='system')\\012from sample_types saty\\012, sample_type_property_types stpt\\012, property_types prty\\012, controlled_vocabularies covo\\012, controlled_vocabulary_terms cvte\\012, samples samp\\012where saty.id = stpt.saty_id\\012and   stpt.prty_id = prty.id\\012and   prty.covo_id = covo.id \\012and   covo.id = cvte.covo_id \\012and   saty.id = samp.saty_id\\012and   (saty.code = 'MASTER_PLATE' or saty.code = 'CONTROL_LAYOUT')\\012and   prty.code = 'PLATE_GEOMETRY'\\012and   cvte.code = '384_WELLS_16X24' ;\\012	\N
016	source/sql/postgresql/migration/migration-015-016.sql	SUCCESS	2008-05-09 10:12:52.062	----------------------------------------------------------------------------------------------\\012--  File: migration-015-016.sql\\012--\\012-- \\012--  This script enables the migration of the database schema from 015 to 016.\\012-- \\012--  Update History\\012--\\012--\\012--\\011Who\\011\\011\\011When\\011\\011What\\012--\\011---\\011\\011\\011----\\011\\011----\\012--\\011Bernd Rinn\\0112008-03-22\\011Initial Version \\012--  \\012----------------------------------------------------------------------------------------------\\012\\012\\012--=================================\\012-- New Domains\\012--=================================\\012\\012-----------------------------------------------------------------------------------\\012--  Purpose:  Change all CODE columns to LONG_CODE, then re-create DOMAIN CODE identical to LONG_CODE\\012--  and change LONG_CODE columns back to the (new) CODE \\012-----------------------------------------------------------------------------------\\012\\012-- First step: create new domain LONG_CODE\\012CREATE DOMAIN LONG_CODE AS VARCHAR(40);\\012\\012-- Second step: change all CODE to LONG_CODE\\012ALTER TABLE CONTROLLED_VOCABULARIES ALTER COLUMN CODE TYPE LONG_CODE;\\012ALTER TABLE DATA_TYPES ALTER COLUMN CODE TYPE LONG_CODE;\\012ALTER TABLE EXPERIMENTS ALTER COLUMN CODE TYPE LONG_CODE;\\012ALTER TABLE EXPERIMENT_TYPES ALTER COLUMN CODE TYPE LONG_CODE;\\012ALTER TABLE FILE_FORMAT_TYPES ALTER COLUMN CODE TYPE LONG_CODE;\\012ALTER TABLE LOCATOR_TYPES ALTER COLUMN CODE TYPE LONG_CODE;\\012ALTER TABLE MATERIALS ALTER COLUMN CODE TYPE LONG_CODE;\\012ALTER TABLE MATERIAL_BATCHES ALTER COLUMN CODE TYPE LONG_CODE;\\012ALTER TABLE MATERIAL_TYPES ALTER COLUMN CODE TYPE LONG_CODE;\\012ALTER TABLE OBSERVABLE_TYPES ALTER COLUMN CODE TYPE LONG_CODE;\\012ALTER TABLE ORGANIZATIONS ALTER COLUMN CODE TYPE LONG_CODE;\\012ALTER TABLE PROCEDURE_TYPES ALTER COLUMN CODE TYPE LONG_CODE;\\012ALTER TABLE PROJECTS ALTER COLUMN CODE TYPE LONG_CODE;\\012ALTER TABLE PROPERTY_TYPES ALTER COLUMN CODE TYPE LONG_CODE;\\012ALTER TABLE SAMPLES ALTER COLUMN CODE TYPE LONG_CODE;\\012ALTER TABLE SAMPLE_COMPONENTS ALTER COLUMN CODE TYPE LONG_CODE;\\012ALTER TABLE SAMPLE_TYPES ALTER COLUMN CODE TYPE LONG_CODE;\\012\\012-- Third step: re-create CODE as VARCHAR(40)\\012DROP DOMAIN CODE;\\012CREATE DOMAIN CODE AS VARCHAR(40);\\012\\012-- Forth step: change all LONG_CODE columns back to CODE\\012ALTER TABLE CONTROLLED_VOCABULARIES ALTER COLUMN CODE TYPE CODE;\\012ALTER TABLE DATA_TYPES ALTER COLUMN CODE TYPE CODE;\\012ALTER TABLE EXPERIMENTS ALTER COLUMN CODE TYPE CODE;\\012ALTER TABLE EXPERIMENT_TYPES ALTER COLUMN CODE TYPE CODE;\\012ALTER TABLE FILE_FORMAT_TYPES ALTER COLUMN CODE TYPE CODE;\\012ALTER TABLE LOCATOR_TYPES ALTER COLUMN CODE TYPE CODE;\\012ALTER TABLE MATERIALS ALTER COLUMN CODE TYPE CODE;\\012ALTER TABLE MATERIAL_BATCHES ALTER COLUMN CODE TYPE CODE;\\012ALTER TABLE MATERIAL_TYPES ALTER COLUMN CODE TYPE CODE;\\012ALTER TABLE OBSERVABLE_TYPES ALTER COLUMN CODE TYPE CODE;\\012ALTER TABLE ORGANIZATIONS ALTER COLUMN CODE TYPE CODE;\\012ALTER TABLE PROCEDURE_TYPES ALTER COLUMN CODE TYPE CODE;\\012ALTER TABLE PROJECTS ALTER COLUMN CODE TYPE CODE;\\012ALTER TABLE PROPERTY_TYPES ALTER COLUMN CODE TYPE CODE;\\012ALTER TABLE SAMPLES ALTER COLUMN CODE TYPE CODE;\\012ALTER TABLE SAMPLE_COMPONENTS ALTER COLUMN CODE TYPE CODE;\\012ALTER TABLE SAMPLE_TYPES ALTER COLUMN CODE TYPE CODE;\\012\\012-- Fifth step: drop domain LONG_CODE\\012DROP DOMAIN LONG_CODE;\\012\\012-----------------------------------------------------------------------------------\\012--  Purpose:  Create new domain TIME_STAMP_DFL and change current users of TIME_STAMP to TIME_STAMP_DFL\\012--  This adds time zone information and allows for a clean separation between registration time stamps\\012--  which should have a default of CURRENT_TIMESTAMP and other time stamps which should not. \\012-----------------------------------------------------------------------------------\\012\\012-- First step: create new domain TIME_STAMP_DFL\\012CREATE DOMAIN TIME_STAMP_DFL AS TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP;\\012\\012-- Second step: change all TIME_STAMP columns to TIME_STAMP_DFL\\012ALTER TABLE CONTROLLED_VOCABULARIES ALTER COLUMN REGISTRATION_TIMESTAMP TYPE TIME_STAMP_DFL;\\012ALTER TABLE CONTROLLED_VOCABULARIES ALTER COLUMN REGISTRATION_TIMESTAMP DROP NOT NULL;\\012ALTER TABLE CONTROLLED_VOCABULARIES ALTER COLUMN REGISTRATION_TIMESTAMP DROP DEFAULT;\\012ALTER TABLE CONTROLLED_VOCABULARY_TERMS ALTER COLUMN REGISTRATION_TIMESTAMP TYPE TIME_STAMP_DFL;\\012ALTER TABLE CONTROLLED_VOCABULARY_TERMS ALTER COLUMN REGISTRATION_TIMESTAMP DROP NOT NULL;\\012ALTER TABLE CONTROLLED_VOCABULARY_TERMS ALTER COLUMN REGISTRATION_TIMESTAMP DROP DEFAULT;\\012ALTER TABLE DATA ALTER COLUMN REGISTRATION_TIMESTAMP TYPE TIME_STAMP_DFL;\\012ALTER TABLE DATA ALTER COLUMN REGISTRATION_TIMESTAMP DROP NOT NULL;\\012ALTER TABLE DATA ALTER COLUMN REGISTRATION_TIMESTAMP DROP DEFAULT;\\012ALTER TABLE EXPERIMENTS ALTER COLUMN REGISTRATION_TIMESTAMP TYPE TIME_STAMP_DFL;\\012ALTER TABLE EXPERIMENTS ALTER COLUMN REGISTRATION_TIMESTAMP DROP NOT NULL;\\012ALTER TABLE EXPERIMENTS ALTER COLUMN REGISTRATION_TIMESTAMP DROP DEFAULT;\\012ALTER TABLE EXPERIMENT_ATTACHMENTS ALTER COLUMN REGISTRATION_TIMESTAMP TYPE TIME_STAMP_DFL;\\012ALTER TABLE EXPERIMENT_ATTACHMENTS ALTER COLUMN REGISTRATION_TIMESTAMP DROP NOT NULL;\\012ALTER TABLE EXPERIMENT_ATTACHMENTS ALTER COLUMN REGISTRATION_TIMESTAMP DROP DEFAULT;\\012ALTER TABLE EXPERIMENT_PROPERTIES ALTER COLUMN REGISTRATION_TIMESTAMP TYPE TIME_STAMP_DFL;\\012ALTER TABLE EXPERIMENT_PROPERTIES ALTER COLUMN REGISTRATION_TIMESTAMP DROP NOT NULL;\\012ALTER TABLE EXPERIMENT_PROPERTIES ALTER COLUMN REGISTRATION_TIMESTAMP DROP DEFAULT;\\012ALTER TABLE EXPERIMENT_TYPE_PROPERTY_TYPES ALTER COLUMN REGISTRATION_TIMESTAMP TYPE TIME_STAMP_DFL;\\012ALTER TABLE EXPERIMENT_TYPE_PROPERTY_TYPES ALTER COLUMN REGISTRATION_TIMESTAMP DROP NOT NULL;\\012ALTER TABLE EXPERIMENT_TYPE_PROPERTY_TYPES ALTER COLUMN REGISTRATION_TIMESTAMP DROP DEFAULT;\\012ALTER TABLE INVALIDATIONS ALTER COLUMN REGISTRATION_TIMESTAMP TYPE TIME_STAMP_DFL;\\012ALTER TABLE INVALIDATIONS ALTER COLUMN REGISTRATION_TIMESTAMP DROP NOT NULL;\\012ALTER TABLE INVALIDATIONS ALTER COLUMN REGISTRATION_TIMESTAMP DROP DEFAULT;\\012ALTER TABLE MATERIALS ALTER COLUMN REGISTRATION_TIMESTAMP TYPE TIME_STAMP_DFL;\\012ALTER TABLE MATERIALS ALTER COLUMN REGISTRATION_TIMESTAMP DROP NOT NULL;\\012ALTER TABLE MATERIALS ALTER COLUMN REGISTRATION_TIMESTAMP DROP DEFAULT;\\012ALTER TABLE MATERIAL_BATCHES ALTER COLUMN REGISTRATION_TIMESTAMP TYPE TIME_STAMP_DFL;\\012ALTER TABLE MATERIAL_BATCHES ALTER COLUMN REGISTRATION_TIMESTAMP DROP NOT NULL;\\012ALTER TABLE MATERIAL_BATCHES ALTER COLUMN REGISTRATION_TIMESTAMP DROP DEFAULT;\\012ALTER TABLE MATERIAL_PROPERTIES ALTER COLUMN REGISTRATION_TIMESTAMP TYPE TIME_STAMP_DFL;\\012ALTER TABLE MATERIAL_PROPERTIES ALTER COLUMN REGISTRATION_TIMESTAMP DROP NOT NULL;\\012ALTER TABLE MATERIAL_PROPERTIES ALTER COLUMN REGISTRATION_TIMESTAMP DROP DEFAULT;\\012ALTER TABLE MATERIAL_TYPE_PROPERTY_TYPES ALTER COLUMN REGISTRATION_TIMESTAMP TYPE TIME_STAMP_DFL;\\012ALTER TABLE MATERIAL_TYPE_PROPERTY_TYPES ALTER COLUMN REGISTRATION_TIMESTAMP DROP NOT NULL;\\012ALTER TABLE MATERIAL_TYPE_PROPERTY_TYPES ALTER COLUMN REGISTRATION_TIMESTAMP DROP DEFAULT;\\012ALTER TABLE PROCEDURES ALTER COLUMN REGISTRATION_TIMESTAMP TYPE TIME_STAMP_DFL;\\012ALTER TABLE PROCEDURES ALTER COLUMN REGISTRATION_TIMESTAMP DROP NOT NULL;\\012ALTER TABLE PROCEDURES ALTER COLUMN REGISTRATION_TIMESTAMP DROP DEFAULT;\\012ALTER TABLE PROPERTY_TYPES ALTER COLUMN REGISTRATION_TIMESTAMP TYPE TIME_STAMP_DFL;\\012ALTER TABLE PROPERTY_TYPES ALTER COLUMN REGISTRATION_TIMESTAMP DROP NOT NULL;\\012ALTER TABLE PROPERTY_TYPES ALTER COLUMN REGISTRATION_TIMESTAMP DROP DEFAULT;\\012ALTER TABLE SAMPLES ALTER COLUMN REGISTRATION_TIMESTAMP TYPE TIME_STAMP_DFL;\\012ALTER TABLE SAMPLES ALTER COLUMN REGISTRATION_TIMESTAMP DROP NOT NULL;\\012ALTER TABLE SAMPLES ALTER COLUMN REGISTRATION_TIMESTAMP DROP DEFAULT;\\012ALTER TABLE SAMPLE_PROPERTIES ALTER COLUMN REGISTRATION_TIMESTAMP TYPE TIME_STAMP_DFL;\\012ALTER TABLE SAMPLE_PROPERTIES ALTER COLUMN REGISTRATION_TIMESTAMP DROP NOT NULL;\\012ALTER TABLE SAMPLE_PROPERTIES ALTER COLUMN REGISTRATION_TIMESTAMP DROP DEFAULT;\\012ALTER TABLE SAMPLE_TYPE_PROPERTY_TYPES ALTER COLUMN REGISTRATION_TIMESTAMP TYPE TIME_STAMP_DFL;\\012ALTER TABLE SAMPLE_TYPE_PROPERTY_TYPES ALTER COLUMN REGISTRATION_TIMESTAMP DROP NOT NULL;\\012ALTER TABLE SAMPLE_TYPE_PROPERTY_TYPES ALTER COLUMN REGISTRATION_TIMESTAMP DROP DEFAULT;\\012\\012-- Third step: drop old domain TIME_STAMP\\012DROP DOMAIN TIME_STAMP;\\012\\012-- Forth step: create new domain time_stamp\\012CREATE DOMAIN TIME_STAMP AS TIMESTAMP WITH TIME ZONE;\\012\\012--=================================\\012-- New Tables and related objects\\012--=================================\\012\\012------------------------------------------------------------------------------------\\012-- table DATA_SET_RELATIONSHIPS (new)\\012------------------------------------------------------------------------------------\\012\\012-- Creating tables\\012\\012CREATE TABLE DATA_SET_RELATIONSHIPS (ID TECH_ID NOT NULL,DATA_ID_PARENT TECH_ID NOT NULL,DATA_ID_CHILD TECH_ID NOT NULL,REGISTRATION_TIMESTAMP TIME_STAMP_DFL);\\012\\012-- Creating primary key constraints\\012\\012ALTER TABLE DATA_SET_RELATIONSHIPS ADD CONSTRAINT DSRE_PK PRIMARY KEY(ID);\\012\\012-- Creating unique constraints\\012\\012ALTER TABLE DATA_SET_RELATIONSHIPS ADD CONSTRAINT DSRE_BK_UK UNIQUE(DATA_ID_CHILD,DATA_ID_PARENT);\\012\\012-- Creating foreign key constraints\\012\\012ALTER TABLE DATA_SET_RELATIONSHIPS ADD CONSTRAINT DSRE_DATA_FK_CHILD FOREIGN KEY (DATA_ID_CHILD) REFERENCES DATA(ID);\\012ALTER TABLE DATA_SET_RELATIONSHIPS ADD CONSTRAINT DSRE_DATA_FK_PARENT FOREIGN KEY (DATA_ID_PARENT) REFERENCES DATA(ID);\\012\\012-- Creating sequences\\012\\012CREATE SEQUENCE DATA_SET_RELATIONSHIP_ID_SEQ;\\012\\012-- Creating indexes\\012\\012CREATE INDEX DSRE_DATA_FK_I_CHILD ON DATA_SET_RELATIONSHIPS (DATA_ID_CHILD);\\012CREATE INDEX DSRE_DATA_FK_I_PARENT ON DATA_SET_RELATIONSHIPS (DATA_ID_PARENT);\\012\\012--====================================\\012-- Drop Tables and related objects\\012--====================================\\012\\012------------------------------------------------------------------------------------\\012-- table DATA_VALUES (deleted)\\012------------------------------------------------------------------------------------\\012\\012-- Delete constraints\\012\\012ALTER TABLE DATA_VALUES DROP CONSTRAINT DAVA_PK;\\012ALTER TABLE DATA_VALUES DROP CONSTRAINT DAVA_BK_UK;\\012ALTER TABLE DATA_VALUES DROP CONSTRAINT DAVA_DATA_FK;\\012ALTER TABLE DATA_VALUES DROP CONSTRAINT DAVA_SACO_FK;\\012\\012-- Delete indices\\012\\012DROP INDEX DAVA_DATA_FK_I;\\012DROP INDEX DAVA_SACO_FK_I;\\012\\012-- Delete sequences\\012\\012DROP SEQUENCE DATA_VALUE_ID_SEQ;\\012\\012-- Delete tables\\012\\012DROP TABLE DATA_VALUES;\\012\\012--====================================\\012-- Modifications of existing objects\\012--====================================\\012\\012------------------------------------------------------------------------------------\\012-- table ORGANIZATIONS (changed)\\012-- * rename to GROUPS\\012--\\012-- table DATA (changed)\\012-- * rename column PROC_ID_ACQUIRED_BY into: PROC_ID_PRODUCED_BY\\012-- * add columns:\\012-- ** IS_PLACEHOLDER BOOLEAN_CHAR\\012-- ** CODE CODE\\012-- ** DATA_PRODUCER_CODE CODE\\012-- ** PRODUCTION_TIMESTAMP TIME_STAMP\\012--\\012-- table EXTERNAL_DATA (changed)\\012-- * add column:\\012-- ** CVTE_ID_STOR_FMT TECH_ID NOT NULL\\012--\\012-- table PROPERTY_TYPES (changed)\\012-- * add column IS_MANAGED_INTERNALLY BOOLEAN_CHAR NOT NULL DEFAULT 'F'\\012-- * add unique constraint PRTY_BK_UK_LBL for column LABEL\\012--\\012-- tables EXPERIMENT_TYPE_PROPERTY_TYPES, MATERIAL_TYPE_PROPERTY_TYPES, SAMPLE_TYPE_PROPERTY_TYPES\\012-- * make the assignments of property types DESCRIPTION, NUCLEOTIDE_SEQUENCE, OFFSET and GENE_SYMBOL \\012--   to material types internally managed \\012--\\012-- table PROCEDURE_TYPES (changed)\\012-- * add column IS_DATA_ACQUISITION BOOLEAN_CHAR NOT NULL DEFAULT 'F'.\\012--\\012-- all tables\\012-- * convert all codes to upper case\\012------------------------------------------------------------------------------------\\012\\012---------------------------------------------------------------------------------------------------\\012--  Purpose:  Rename table ORGANIZATIONS to GROUPS.\\012---------------------------------------------------------------------------------------------------\\012\\012ALTER TABLE PROJECTS DROP CONSTRAINT PROJ_ORGA_FK;\\012ALTER TABLE ORGANIZATIONS DROP CONSTRAINT ORGA_BK_UK;\\012ALTER TABLE ORGANIZATIONS DROP CONSTRAINT ORGA_PK;\\012ALTER TABLE ORGANIZATIONS RENAME TO GROUPS;\\012ALTER INDEX PROJ_ORGA_FK_I RENAME TO PROJ_GROU_FK_I;\\012select RENAME_SEQUENCE('ORGANIZATION_ID_SEQ', 'GROUP_ID_SEQ');\\012ALTER TABLE PROJECTS RENAME COLUMN ORGA_ID TO GROU_ID;\\012ALTER TABLE GROUPS ADD CONSTRAINT GROU_PK PRIMARY KEY(ID);\\012ALTER TABLE GROUPS ADD CONSTRAINT GROU_BK_UK UNIQUE(CODE);\\012ALTER TABLE PROJECTS ADD CONSTRAINT PROJ_GROU_FK FOREIGN KEY (GROU_ID) REFERENCES GROUPS(ID);\\012\\012\\012---------------------------------------------------------------------------------------------------\\012--  Purpose:  Add columnd IS_PLACEHOLDER of table DATA.\\012---------------------------------------------------------------------------------------------------\\012\\012ALTER TABLE DATA ADD COLUMN IS_PLACEHOLDER BOOLEAN_CHAR NOT NULL;\\012\\012\\012---------------------------------------------------------------------------------------------------\\012--  Purpose:  Add and populate column CODE of table DATA.\\012---------------------------------------------------------------------------------------------------\\012\\012ALTER TABLE DATA ADD COLUMN CODE CODE;\\012\\012CREATE OR REPLACE FUNCTION populate_data_codes() RETURNS integer AS $$\\012DECLARE\\012    rec RECORD;\\012BEGIN\\012    FOR rec IN SELECT * FROM data LOOP\\012        rec.code := to_char(rec.registration_timestamp, 'YYYYMMDDHH24MISSMS') || '-' || to_char(rec.id, 'FM99999999999999999999');\\012        update data set code=rec.code where id=rec.id;\\012    END LOOP;\\012    RETURN 1;\\012END;\\012$$ LANGUAGE 'plpgsql';\\012\\012SELECT populate_data_codes();\\012DROP FUNCTION populate_data_codes();\\012\\012ALTER TABLE DATA ALTER COLUMN CODE SET NOT NULL;\\012ALTER TABLE DATA ADD CONSTRAINT DATA_BK_UK UNIQUE(CODE);\\012\\012---------------------------------------------------------------------------------------------------\\012--  Purpose:  Add and populate columns CVTE_ID_STOR_FMT.\\012---------------------------------------------------------------------------------------------------\\012\\012ALTER TABLE EXTERNAL_DATA ADD COLUMN CVTE_ID_STOR_FMT TECH_ID;\\012ALTER TABLE EXTERNAL_DATA ADD CONSTRAINT EXDA_STOR_FMT_FK FOREIGN KEY (CVTE_ID_STOR_FMT) REFERENCES CONTROLLED_VOCABULARY_TERMS(ID);\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Create trigger EXTERNAL_DATA_STORAGE_FORMAT_CHECK \\012------------------------------------------------------------------------------------\\012\\012CREATE OR REPLACE FUNCTION EXTERNAL_DATA_STORAGE_FORMAT_CHECK() RETURNS trigger AS $$\\012DECLARE\\012   v_covo_code  CODE;\\012BEGIN\\012\\012   select code into v_covo_code from controlled_vocabularies\\012      where id = (select covo_id from controlled_vocabulary_terms where id = NEW.cvte_id_stor_fmt);\\012\\012   -- Check if the data storage format is a term of the controlled vocabulary "STORAGE_FORMAT"\\012   if v_covo_code != '.STORAGE_FORMAT' then\\012      RAISE EXCEPTION 'Insert/Update of Data (Code: %) failed, as its Storage Format is %, but is required to be STORAGE_FORMAT.', NEW.code, v_covo_code;\\012   end if;\\012\\012   RETURN NEW;\\012\\012END;\\012$$ LANGUAGE 'plpgsql';\\012\\012CREATE TRIGGER EXTERNAL_DATA_STORAGE_FORMAT_CHECK BEFORE INSERT OR UPDATE ON EXTERNAL_DATA\\012    FOR EACH ROW EXECUTE PROCEDURE EXTERNAL_DATA_STORAGE_FORMAT_CHECK();\\012\\012-----------------------------------------------------------------------------------\\012--  Purpose:  Create Controlled Vocabulary .STORAGE_FORMAT\\012-----------------------------------------------------------------------------------\\012insert into controlled_vocabularies \\012       ( id\\012       , code\\012       , description\\012       , pers_id_registerer\\012       , is_managed_internally )\\012values  (nextval('CONTROLLED_VOCABULARY_ID_SEQ')\\012       , '.STORAGE_FORMAT'\\012       , 'The on-disk storage format of a data set'\\012       , (select id from persons where user_id ='system')\\012       , true);\\012\\012\\012-----------------------------------------------------------------------------------\\012--  Purpose:  Create Controlled Vocabulary Terms for STORAGE_FORMAT\\012-----------------------------------------------------------------------------------\\012insert into controlled_vocabulary_terms \\012       ( id\\012       , code\\012       , covo_id \\012       , pers_id_registerer )\\012values  (nextval('CVTE_ID_SEQ')\\012       , 'PROPRIETARY'\\012       , (select id from controlled_vocabularies where code = '.STORAGE_FORMAT')\\012       , (select id from persons where user_id ='system'));\\012\\012insert into controlled_vocabulary_terms \\012       ( id\\012       , code\\012       , covo_id \\012       , pers_id_registerer )\\012values  (nextval('CVTE_ID_SEQ')\\012       , 'BDS_DIRECTORY'\\012       , (select id from controlled_vocabularies where code = '.STORAGE_FORMAT')\\012       , (select id from persons where user_id ='system'));\\012\\012\\012--------------------------------------------------------------------------\\012--  Purpose:  Insert an entry for OBSERVABLE_TYPE UNKNOWN\\012--------------------------------------------------------------------------\\012\\012insert into observable_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('OBSERVABLE_TYPE_ID_SEQ')\\012,'UNKNOWN'\\012,'Unknown'\\012);\\012\\012----------------------------------------------------------------------\\012--  Purpose:  Insert an entry for PROCEDURE_TYPE UNKNOWN\\012-----------------------------------------------------------------------\\012\\012insert into procedure_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('PROCEDURE_TYPE_ID_SEQ')\\012,'UNKNOWN'\\012,'Unknown'\\012);\\012\\012\\012---------------------------------------------------------------------------------------------------\\012--  Purpose:  Populate external_data.cvte_id_stor_fmt with a default value.\\012---------------------------------------------------------------------------------------------------\\012\\012CREATE OR REPLACE FUNCTION polulate_external_data_cvte_id_stor_fmt() RETURNS integer AS $$\\012DECLARE\\012    rec RECORD;\\012    dfl_stor_fmt_code VARCHAR := 'PROPRIETARY';\\012    dfl_stor_fmt_id TECH_ID;\\012BEGIN\\012    select cvte.id into dfl_stor_fmt_id from controlled_vocabulary_terms cvte, controlled_vocabularies cv \\012        where cvte.code = dfl_stor_fmt_code and cvte.covo_id = cv.id and cv.code = '.STORAGE_FORMAT'; \\012    update external_data set cvte_id_stor_fmt = dfl_stor_fmt_id;\\012    RETURN 1;\\012END;\\012$$ LANGUAGE 'plpgsql';\\012\\012SELECT polulate_external_data_cvte_id_stor_fmt();\\012DROP FUNCTION polulate_external_data_cvte_id_stor_fmt();\\012\\012-- Now that the field is populated, create the not null constraint for it.\\012\\012ALTER TABLE EXTERNAL_DATA ALTER COLUMN CVTE_ID_STOR_FMT SET NOT NULL;\\012\\012---------------------------------------------------------------------------------------------------\\012--  Purpose:  Add and populate columns DATA_PRODUCER_CODE and PRODUCTION_TIMESTAMP to table DATA.\\012---------------------------------------------------------------------------------------------------\\012\\012ALTER TABLE DATA ADD COLUMN DATA_PRODUCER_CODE CODE;\\012ALTER TABLE DATA ADD COLUMN PRODUCTION_TIMESTAMP TIME_STAMP;\\012\\012CREATE OR REPLACE FUNCTION populate_data_producer_code_and_production_timestamp() RETURNS integer AS $$\\012DECLARE\\012    rec RECORD;\\012    loty_rel_code VARCHAR := 'RELATIVE_LOCATION';\\012    loty_rel_id TECH_ID;\\012    meas_ts TIMESTAMP;\\012    ds_code CODE;\\012    meas_ts_str TEXT;\\012BEGIN\\012    select id into loty_rel_id from locator_types where code = loty_rel_code; \\012    FOR rec IN SELECT d.id, ed.location FROM data d, external_data ed where d.id = ed.data_id and ed.loty_id = loty_rel_id LOOP\\012        meas_ts_str = substring(rec.location from '^.*/([0-9]{14})_[^_]+_(.*)$');\\012        ds_code := substring(rec.location from '^.*/[0-9]{14}_([^_]+)_(.*)$');\\012        IF meas_ts_str is not null and ds_code is not null THEN\\012            meas_ts := to_timestamp(meas_ts_str, 'YYYYMMDDHH24MISS');\\012            update data set production_timestamp=meas_ts, data_producer_code=ds_code where id=rec.id;\\012        END IF;\\012    END LOOP;\\012    RETURN 1;\\012END;\\012$$ LANGUAGE 'plpgsql';\\012\\012SELECT populate_data_producer_code_and_production_timestamp();\\012DROP FUNCTION populate_data_producer_code_and_production_timestamp();\\012\\012-- Rename columns\\012\\012ALTER TABLE DATA RENAME COLUMN PROC_ID_ACQUIRED_BY to PROC_ID_PRODUCED_BY;\\012\\012---------------------------------------------------------------------------------------------------\\012--  Purpose:  Populate table DATA_SET_RELATIONSHIPS, by using heuristics.\\012---------------------------------------------------------------------------------------------------\\012\\012CREATE OR REPLACE FUNCTION abs_interval(ts1 time_stamp_dfl, ts2 time_stamp_dfl) returns interval AS $$\\012BEGIN\\012    IF ts1 < ts2 THEN\\012        RETURN ts2 - ts1;\\012    ELSE\\012        RETURN ts1 - ts2;\\012    END IF;\\012END;\\012$$ LANGUAGE 'plpgsql';\\012\\012CREATE OR REPLACE FUNCTION populate_data_set_relationships() RETURNS INTEGER AS $$\\012DECLARE\\012    source_id TECH_ID;\\012    rec_derived RECORD;\\012    rec_acquired RECORD;\\012    rel_location TEXT;\\012    data_set_code TEXT;\\012    data_set_code_trial TEXT;\\012    loty_rel_code TEXT := 'RELATIVE_LOCATION';\\012    loty_rel_id TECH_ID;\\012    count INTEGER := 0;\\012BEGIN\\012    select id into loty_rel_id from locator_types where code = loty_rel_code;\\012    FOR rec_derived IN select id, samp_id_derived_from, registration_timestamp from data where samp_id_derived_from is not null LOOP\\012        source_id := NULL;\\012        select location into rel_location from external_data where data_id = rec_derived.id and loty_id = loty_rel_id;\\012        IF rel_location is not null then\\012            data_set_code := substring(rel_location from '^.*/([0-9]{14}_[^_]+)_.*$');\\012            IF data_set_code is not null THEN\\012                FOR rec_acquired IN select id, samp_id_acquired_from from data where samp_id_acquired_from = rec_derived.samp_id_derived_from LOOP\\012                    select location into rel_location from external_data where data_id = rec_acquired.id and loty_id = loty_rel_id;\\012                    IF rel_location is not null THEN\\012                        data_set_code_trial := substring(rel_location from '^.*/([0-9]{14}_[^_]+)_.*$');\\012                        IF data_set_code_trial = data_set_code THEN\\012                            source_id = rec_acquired.id;\\012                            EXIT;\\012                        END IF;\\012                    END IF;\\012                END LOOP;\\012            END IF;\\012        END IF;\\012        -- If the location didn't tell us about data set relationships, try the backup strategy.\\012        IF source_id is null THEN\\012            -- Use the measured data set as source that is closest in registration timestamp.\\012            select id into source_id from data where samp_id_acquired_from = rec_derived.samp_id_derived_from \\012                and abs_interval(registration_timestamp, rec_derived.registration_timestamp) \\012                    = (select min(abs_interval(registration_timestamp, rec_derived.registration_timestamp)) \\012                        from data where samp_id_acquired_from = rec_derived.samp_id_derived_from);\\012        END IF;\\012        IF source_id is not null THEN\\012            insert into data_set_relationships (id, data_id_parent, data_id_child)\\012                values (nextval('DATA_SET_RELATIONSHIP_ID_SEQ'), source_id, rec_derived.id);\\012            count := count + 1;\\012        END IF;\\012    END LOOP;\\012    RETURN count;\\012END;\\012$$ LANGUAGE 'plpgsql';\\012\\012SELECT populate_data_set_relationships();\\012DROP FUNCTION populate_data_set_relationships();\\012DROP FUNCTION abs_interval(time_stamp_dfl, time_stamp_dfl);\\012\\012---------------------------------------------------------------------------------------------------\\012--  Purpose:  Add column IS_MANAGED_INTERNALLY to table PROPERTY_TYPES. Internally managed \\012--  properties can not be assigned by users of openBIS, but only by the system. \\012---------------------------------------------------------------------------------------------------\\012\\012ALTER TABLE PROPERTY_TYPES ADD COLUMN IS_MANAGED_INTERNALLY BOOLEAN_CHAR NOT NULL DEFAULT 'F';\\012\\012-- Update already existing property type PLATE_GEOMETRY\\012update property_types set is_managed_internally = true, code = '.' || code where code = 'PLATE_GEOMETRY';\\012\\012-- Update already existing controlled vocabulary PLATE_GEOMETRY \\012update controlled_vocabularies set code = '.' || code where code = 'PLATE_GEOMETRY';\\012\\012---------------------------------------------------------------------------------------------------\\012--  Purpose:  Add unique constraint on column LABEL. \\012---------------------------------------------------------------------------------------------------\\012\\012CREATE OR REPLACE FUNCTION make_prty_labels_unique() RETURNS INTEGER AS $$\\012DECLARE\\012    prev_key TEXT := NULL;\\012    this_key TEXT;\\012    dup_count INTEGER;\\012    cnt INTEGER := 0;\\012    already_exists INTEGER;\\012    new_label TEXT;\\012    this_id TECH_ID;\\012BEGIN\\012    FOR this_id, this_key IN select id, label from property_types order by label,id LOOP\\012        IF this_key = prev_key THEN\\012            dup_count := dup_count + 1;\\012            cnt := cnt + 1;\\012        ELSE\\012            dup_count := 0;\\012        END IF;\\012        IF dup_count > 0 THEN\\012            -- Check whether the new key already exists.\\012            LOOP\\012                new_label := this_key || '(' || dup_count::text || ')';\\012                select count(*) into already_exists from property_types where label = new_label;\\012                IF already_exists = 0 THEN\\012                    EXIT;\\012                END IF;\\012                dup_count := dup_count + 1;\\012            END LOOP;\\012            update property_types set label = new_label where id = this_id;\\012        END IF;\\012        prev_key := this_key;\\012    END LOOP;\\012    RETURN cnt;\\012END;\\012$$ LANGUAGE 'plpgsql';\\012\\012SELECT make_prty_labels_unique();\\012DROP FUNCTION make_prty_labels_unique();\\012\\012ALTER TABLE PROPERTY_TYPES ADD CONSTRAINT PRTY_BK_UK_LBL UNIQUE(LABEL);\\012\\012-----------------------------------------------------------------------------------\\012--  Purpose:  Add Controlled Vocabulary Terms to PLATE_GEOMETRY\\012-----------------------------------------------------------------------------------\\012\\012insert into controlled_vocabulary_terms \\012       ( id\\012       , code\\012       , covo_id \\012       , pers_id_registerer)\\012values  (nextval('CVTE_ID_SEQ')\\012       , '96_WELLS_8X12'\\012       , (select id from controlled_vocabularies where code = '.PLATE_GEOMETRY')\\012       , (select id from persons where user_id = 'system'));\\012\\012insert into controlled_vocabulary_terms \\012       ( id\\012       , code\\012       , covo_id \\012       , pers_id_registerer)\\012values  (nextval('CVTE_ID_SEQ')\\012       , '1536_WELLS_32X48'\\012       , (select id from controlled_vocabularies where code = '.PLATE_GEOMETRY')\\012       , (select id from persons where user_id = 'system'));\\012\\012\\012-----------------------------------------------------------------------------------\\012--  Purpose:  Rename Observable Types: IMAGE -> HCS_IMAGE, IMAGE_ANALYSIS_DATA -> HCS_IMAGE_ANALYSIS_DATA\\012--  and descriptions accordingly\\012-----------------------------------------------------------------------------------\\012\\012update observable_types set code = 'HCS_IMAGE', description = 'Data derived from analysis of HCS images' where code = 'IMAGE';\\012update observable_types set code = 'HCS_IMAGE_ANALYSIS_DATA', description = 'Data derived from analysis of HCS images' where code = 'IMAGE_ANALYSIS_DATA';\\012\\012\\012-----------------------------------------------------------------------------------\\012--  Purpose: Make the assignments of property types DESCRIPTION, NUCLEOTIDE_SEQUENCE, OFFSET \\012--  and GENE_SYMBOL to material types internally managed. \\012-----------------------------------------------------------------------------------\\012\\012update material_type_property_types set is_managed_internally = true\\012    where prty_id in (select id from property_types where code = 'DESCRIPTION' \\012        or code = 'NUCLEOTIDE_SEQUENCE' or code = 'OFFSET' or code = 'GENE_SYMBOL');\\012\\012-----------------------------------------------------------------------------------\\012--  Purpose: Add column IS_DATA_ACQUISITION BOOLEAN_CHAR NOT NULL DEFAULT 'F' to table PROCEDURE_TYPES.\\012-----------------------------------------------------------------------------------\\012\\012ALTER TABLE PROCEDURE_TYPES ADD COLUMN IS_DATA_ACQUISITION BOOLEAN_CHAR NOT NULL DEFAULT 'F';\\012\\012-- Set the new attribute for procedure type DATA_ACQUISITION\\012update procedure_types set is_data_acquisition = true where code = 'DATA_ACQUISITION';\\012\\012-----------------------------------------------------------------------------------\\012--  Purpose: Convert all codes to upper case. \\012-----------------------------------------------------------------------------------\\012\\012CREATE OR REPLACE FUNCTION column_to_uppercase_fix_duplicates(tbl TEXT, clm TEXT) RETURNS INTEGER AS $$\\012DECLARE\\012    prev_key TEXT := NULL;\\012    this_key TEXT;\\012    dup_count INTEGER;\\012    count INTEGER := 0;\\012    already_exists INTEGER;\\012    new_clm TEXT;\\012BEGIN\\012    FOR this_key IN EXECUTE 'select ' || clm || ' from ' || tbl \\012        || ' order by upper(' || clm || '),id' LOOP\\012        IF upper(this_key) = upper(prev_key) THEN\\012            dup_count := dup_count + 1;\\012            count := count + 1;\\012        ELSE\\012            dup_count := 0;\\012        END IF;\\012        IF dup_count > 0 THEN\\012            -- Check whether the new key already exists.\\012            LOOP\\012                new_clm := this_key || '(' || dup_count::text || ')';\\012                EXECUTE 'select count(*) from ' || tbl \\012                    || ' where upper(' || clm || ') = ' || quote_literal(upper(new_clm)) \\012                    into already_exists;\\012                IF already_exists = 0 THEN\\012                    EXIT;\\012                END IF;\\012                dup_count := dup_count + 1;\\012            END LOOP;\\012            EXECUTE 'update ' || tbl || ' set ' || clm || ' = ' || quote_literal(new_clm) || \\012                ' where ' || clm || ' = ' || quote_literal(this_key);\\012        END IF;\\012        prev_key := this_key;\\012    END LOOP;\\012    EXECUTE 'update ' || tbl || ' set ' || clm || ' = upper(' || clm || ')';\\012    RETURN count;\\012END;\\012$$ LANGUAGE 'plpgsql';\\012\\012\\012CREATE OR REPLACE FUNCTION column_to_uppercase_fix_duplicates(tbl TEXT, clm TEXT, clm2 TEXT) RETURNS INTEGER AS $$\\012DECLARE\\012    prev_key TEXT := NULL;\\012    prev_key2 TECH_ID;\\012    this_key TEXT;\\012    this_key2 TECH_ID;\\012    dup_count INTEGER;\\012    count INTEGER := 0;\\012    already_exists INTEGER;\\012    new_clm TEXT;\\012BEGIN\\012    FOR this_key, this_key2 IN EXECUTE 'select ' || clm || ',' || clm2 || ' from ' || tbl \\012        || ' order by ' || clm2 || ',upper(' ||  clm || '),id' LOOP\\012        IF upper(this_key) = upper(prev_key) and this_key2 = prev_key2 THEN\\012            dup_count := dup_count + 1;\\012            count := count + 1;\\012        ELSE\\012            dup_count := 0;\\012        END IF;\\012        IF dup_count > 0 THEN\\012            -- Check whether the new key already exists.\\012            LOOP\\012                new_clm := this_key || '(' || dup_count::text || ')';\\012                EXECUTE 'select count(*) from ' || tbl \\012                    || ' where upper(' || clm || ') = ' || quote_literal(upper(new_clm)) \\012                    || ' and ' || clm2 || ' = ' || quote_literal(this_key2) \\012                    into already_exists;\\012                IF already_exists = 0 THEN\\012                    EXIT;\\012                END IF;\\012                dup_count := dup_count + 1;\\012            END LOOP;\\012            EXECUTE 'update ' || tbl || ' set ' || clm || ' = ' || quote_literal(new_clm) || \\012                ' where ' || clm || ' = ' || quote_literal(this_key) || ' and ' \\012                || clm2 || ' = ' || quote_literal(this_key2);\\012        END IF;\\012        prev_key := this_key;\\012        prev_key2 := this_key2;\\012    END LOOP;\\012    EXECUTE 'update ' || tbl || ' set ' || clm || ' = upper(' || clm || ')';\\012    RETURN count;\\012END;\\012$$ LANGUAGE 'plpgsql';\\012\\012\\012SELECT column_to_uppercase_fix_duplicates('samples', 'code');\\012SELECT column_to_uppercase_fix_duplicates('property_types', 'code');\\012SELECT column_to_uppercase_fix_duplicates('controlled_vocabularies', 'code');\\012\\012SELECT column_to_uppercase_fix_duplicates('projects', 'code', 'grou_id');\\012SELECT column_to_uppercase_fix_duplicates('experiments', 'code', 'proj_id');\\012SELECT column_to_uppercase_fix_duplicates('controlled_vocabulary_terms', 'code', 'covo_id');\\012SELECT column_to_uppercase_fix_duplicates('materials', 'code', 'maty_id');\\012SELECT column_to_uppercase_fix_duplicates('material_batches', 'code', 'mate_id');\\012SELECT column_to_uppercase_fix_duplicates('sample_components', 'code', 'samp_id');\\012\\012-- These will only need changes if someone entered them through the 'back door' directly on the server.\\012\\012SELECT column_to_uppercase_fix_duplicates('groups', 'code');\\012SELECT column_to_uppercase_fix_duplicates('sample_types', 'code');\\012SELECT column_to_uppercase_fix_duplicates('material_types', 'code');\\012SELECT column_to_uppercase_fix_duplicates('experiment_types', 'code');\\012SELECT column_to_uppercase_fix_duplicates('procedure_types', 'code');\\012SELECT column_to_uppercase_fix_duplicates('observable_types', 'code');\\012SELECT column_to_uppercase_fix_duplicates('locator_types', 'code');\\012SELECT column_to_uppercase_fix_duplicates('file_format_types', 'code');\\012SELECT column_to_uppercase_fix_duplicates('data_types', 'code');\\012\\012DROP FUNCTION column_to_uppercase_fix_duplicates(TEXT, TEXT);\\012DROP FUNCTION column_to_uppercase_fix_duplicates(TEXT, TEXT, TEXT);\\012\\012-----------------------------------------------------------------------------------\\012--  Purpose:  Delete sample_components with no associated material_batches.\\012--  This deletes superfluous controls of master plates\\012-----------------------------------------------------------------------------------\\012\\012delete from sample_components\\012where  id in (select sc.id \\012              from   sample_components as sc left join sample_component_materials as scm \\012              on     scm.saco_id = sc.id \\012              where  scm.saco_id is null\\012              )\\012;\\012	\N
017	source/sql/postgresql/migration/migration-016-017.sql	SUCCESS	2008-05-09 10:12:57.473	----------------------------------------------------------------------------------------------\\012--  File: migration-016-017.sql\\012--\\012-- \\012--  This script enables the migration of the database schema from 016 to 017.\\012-- \\012--  Update History\\012--\\012--\\012--\\011Who\\011\\011\\011              When\\011\\011    What\\012--\\011---\\011\\011\\011              ----      \\011----\\012--\\011Charles Ramin-Wright\\0112008-04-11\\011Initial Version \\012--  \\012----------------------------------------------------------------------------------------------\\012\\012\\012--=================================\\012-- Create Objects\\012--=================================\\012\\012-- Domains\\012\\012-- 'F' is false, 'T' is true and 'U' is unknown\\012CREATE DOMAIN BOOLEAN_CHAR_OR_UNKNOWN AS CHAR(1) CHECK (VALUE in ('F', 'T', 'U'));\\012\\012-- Tables and related objects\\012\\012-- Sequences\\012\\012-- Indices\\012\\012--====================================\\012-- Delete Objects\\012--====================================\\012\\012-- Domains\\012\\012-- Tables\\012\\012-- Sequences\\012\\012-- Indices\\012\\012--====================================\\012-- Alter Objects\\012--====================================\\012\\012-- Add column IS_INTERNAL_NAMESPACE to table CONTROLLED_VOCABULARIES \\012\\012ALTER TABLE CONTROLLED_VOCABULARIES ADD IS_INTERNAL_NAMESPACE BOOLEAN_CHAR NOT NULL DEFAULT 'F';\\012\\012-- Add column IS_INTERNAL_NAMESPACE to table PROPERTY_TYPES \\012\\012ALTER TABLE PROPERTY_TYPES ADD IS_INTERNAL_NAMESPACE BOOLEAN_CHAR NOT NULL DEFAULT 'F';\\012\\012-- Add column IS_INTERNAL_NAMESPACE as key component to the unique key constraint COVO_BK_UK\\012\\012ALTER TABLE CONTROLLED_VOCABULARIES DROP CONSTRAINT COVO_BK_UK;\\012ALTER TABLE CONTROLLED_VOCABULARIES ADD CONSTRAINT COVO_BK_UK UNIQUE(CODE,IS_INTERNAL_NAMESPACE);\\012\\012-- Add column IS_INTERNAL_NAMESPACE as key component to the unique key constraint PRTY_BK_UK\\012\\012ALTER TABLE PROPERTY_TYPES DROP CONSTRAINT PRTY_BK_UK;\\012ALTER TABLE PROPERTY_TYPES ADD CONSTRAINT PRTY_BK_UK UNIQUE(CODE,IS_INTERNAL_NAMESPACE);\\012\\012-- Delete unique key constraint PRTY_BK_UK_LBL (which was for column LABEL) from table PROPERTY_TYPES\\012\\012ALTER TABLE PROPERTY_TYPES DROP CONSTRAINT PRTY_BK_UK_LBL;\\012\\012\\012-- Change unique constraint EXDA_BK_UK to contain EXTERNAL_DATA.LOTY_ID \\012\\012ALTER TABLE EXTERNAL_DATA DROP CONSTRAINT EXDA_BK_UK;\\012ALTER TABLE EXTERNAL_DATA ADD CONSTRAINT EXDA_BK_UK UNIQUE(LOCATION,LOTY_ID);\\012\\012\\012-- Increase length of EXTERNAL_DATA.LOCATION from 200 to 1024\\012\\012ALTER TABLE EXTERNAL_DATA ALTER COLUMN LOCATION TYPE VARCHAR(1024);\\012\\012\\012-- Add column IS_COMPLETE to table EXTERNAL_DATA\\012\\012ALTER TABLE EXTERNAL_DATA ADD COLUMN IS_COMPLETE BOOLEAN_CHAR_OR_UNKNOWN NOT NULL DEFAULT 'U';\\012\\012\\012--=================================\\012-- Replace EXTERNAL_DATA_STORAGE_FORMAT_CHECK() function\\012--=================================\\012\\012CREATE OR REPLACE FUNCTION EXTERNAL_DATA_STORAGE_FORMAT_CHECK() RETURNS trigger AS $$\\012DECLARE\\012   v_covo_code  CODE;\\012   data_code CODE;\\012BEGIN\\012\\012   select code into v_covo_code from controlled_vocabularies\\012      where is_internal_namespace = true and \\012         id = (select covo_id from controlled_vocabulary_terms where id = NEW.cvte_id_stor_fmt);\\012\\012-- Check if the data storage format is a term of the controlled vocabulary "STORAGE_FORMAT"\\012   if v_covo_code != 'STORAGE_FORMAT' then\\012      select code into data_code from data where id = NEW.data_id; \\012      RAISE EXCEPTION 'Insert/Update of Data (Code: %) failed, as its Storage Format is %, but is required to be STORAGE_FORMAT.', data_code, v_covo_code;\\012   end if;\\012\\012   RETURN NEW;\\012\\012END;\\012$$ LANGUAGE 'plpgsql';\\012\\012\\012--=================================\\012-- Data Migration\\012--=================================\\012\\012\\012---------------------------------------------------------------------------------------\\012--   Translate the internally managed CODES which are represented by the Dot-Prefix to:\\012--\\012--   CODE without a Dot-Prefix plus the new column IS_INTERNAL_NAMESPACE = true.\\012---------------------------------------------------------------------------------------\\012\\012UPDATE property_types\\012SET    code = substr(code,2,length(code))\\012     , is_internal_namespace = true \\012WHERE  substr(code,1,1) = '.';\\012\\012UPDATE controlled_vocabularies\\012SET    code = substr(code,2,length(code))\\012     , is_internal_namespace = true \\012WHERE  substr(code,1,1) = '.';\\012\\012------------------------------------------------------------------------------------\\012--  Purpose: Move experiment descriptions from column to property DESCRIPTION\\012------------------------------------------------------------------------------------\\012\\012   -----------------------\\012   --  Material Type SIRNHACS\\012   -----------------------\\012\\012insert into experiment_type_property_types\\012(   id\\012   ,exty_id\\012   ,prty_id\\012   ,is_mandatory\\012   ,is_managed_internally\\012   ,pers_id_registerer\\012   )\\012values \\012(   nextval('ETPT_ID_SEQ')\\012   ,(select id from experiment_types where code = 'SIRNAHCS')\\012   ,(select id from property_types where code = 'DESCRIPTION')\\012   ,true\\012   ,true\\012   ,(select id from persons where user_id ='system')\\012);\\012\\012-- Add experiment_properties for descriptions of all experiments of type SIRNAHCS \\012\\012insert into experiment_properties\\012(   id\\012   ,expe_id\\012   ,value\\012   ,etpt_id\\012   ,pers_id_registerer\\012)\\012select\\012    nextval('EXPERIMENT_PROPERTY_ID_SEQ')\\012   ,id\\012   ,case when description is not null then description else 'No description given' end\\012   ,currval('ETPT_ID_SEQ')\\012   ,(select id from persons where user_id ='system')  \\012from experiments where exty_id = (select id from experiment_types where code = 'SIRNAHCS');\\012\\012-- Finally: drop column\\012\\012ALTER TABLE EXPERIMENTS DROP COLUMN DESCRIPTION;\\012	\N
018	source/sql/postgresql/migration/migration-017-018.sql	SUCCESS	2008-05-09 10:12:57.646	----------------------------------------------------------------------------------------------\\012--  File: migration-017-018.sql\\012--\\012-- \\012--  This script enables the migration of the database schema from 016 to 017.\\012-- \\012----------------------------------------------------------------------------------------------\\012\\012\\012--=================================\\012-- Create Objects\\012--=================================\\012\\012-- Domains\\012\\012-- Tables and related objects\\012\\012-- Sequences\\012\\012-- Indices\\012\\012--====================================\\012-- Delete Objects\\012--====================================\\012\\012-- Domains\\012\\012-- Tables\\012\\012-- Sequences\\012\\012-- Indices\\012\\012--====================================\\012-- Alter Objects\\012--====================================\\012\\012\\012--=================================\\012-- Data Migration\\012--=================================\\012\\012-------------------------------------------------------------------------\\012--  Purpose:  Insert a new EXPERIMENT_TYPE called 'COMPOUND_HCS'\\012--------------------------------------------------------------------------\\012\\012insert into experiment_types\\012(id\\012,code\\012,description)\\012values \\012(nextval('EXPERIMENT_TYPE_ID_SEQ')\\012,'COMPOUND_HCS'\\012,'Compound High Content Screening'\\012);\\012\\012\\012-------------------------------------------------------------------------\\012--  Purpose:  Link a mandatory DESCRIPTION to the new EXPERIMENT_TYPE \\012--            called 'COMPOUND_HCS'\\012--------------------------------------------------------------------------\\012\\012insert into experiment_type_property_types\\012(   id\\012   ,exty_id\\012   ,prty_id\\012   ,is_mandatory\\012   ,is_managed_internally\\012   ,pers_id_registerer\\012   )\\012values \\012   (nextval('ETPT_ID_SEQ')\\012   ,(select id from experiment_types where code = 'COMPOUND_HCS')\\012   ,(select id from property_types where code = 'DESCRIPTION' and is_internal_namespace = false)\\012   ,true\\012   ,true\\012   ,(select id from persons where user_id ='system')\\012);\\012\\012\\012-------------------------------------------------------------------------\\012--  Purpose:  Change EXPERIMENT_TYPE CODE 'SIRNAHCS' to 'SIRNA_HCS'\\012--------------------------------------------------------------------------\\012\\012update experiment_types\\012set code = 'SIRNA_HCS'\\012where code = 'SIRNAHCS'\\012;\\012\\012	\N
019	../server-application-server/source/sql/postgresql/migration/migration-018-019.sql	SUCCESS	2008-09-15 14:46:14.752	----------------------------------------------------------------------------------------------\\012--  File: migration-018-019.sql\\012--\\012-- \\012--  This script enables the migration of the database schema from 018 to 019.\\012-- \\012----------------------------------------------------------------------------------------------\\012\\012\\012\\012--=================================\\012-- Create New Objects\\012--=================================\\012\\012-- Domains\\012\\012CREATE DOMAIN DESCRIPTION_1000 AS VARCHAR(1000);\\012CREATE DOMAIN AUTHORIZATION_ROLE as CODE CHECK (VALUE IN ('ADMIN', 'USER', 'OBSERVER', 'ETL_SERVER')) NOT NULL;\\012\\012\\012-- Tables\\012\\012CREATE TABLE DATABASE_INSTANCES (ID TECH_ID NOT NULL,CODE CODE NOT NULL,IS_ORIGINAL_SOURCE BOOLEAN_CHAR NOT NULL DEFAULT 'F',REGISTRATION_TIMESTAMP TIME_STAMP_DFL NOT NULL DEFAULT CURRENT_TIMESTAMP);\\012CREATE TABLE ROLE_ASSIGNMENTS (ID TECH_ID NOT NULL,ROLE_CODE AUTHORIZATION_ROLE,GROU_ID TECH_ID,DBIN_ID TECH_ID,PERS_ID_GRANTEE TECH_ID NOT NULL,PERS_ID_REGISTERER TECH_ID NOT NULL,REGISTRATION_TIMESTAMP TIME_STAMP_DFL NOT NULL DEFAULT CURRENT_TIMESTAMP);\\012\\012-- Columns \\012\\012-- Create the new DBIN_ID columns initially as NULLable!\\012\\012ALTER TABLE CONTROLLED_VOCABULARIES ADD COLUMN DBIN_ID TECH_ID;\\012ALTER TABLE EXPERIMENT_TYPES ADD COLUMN DBIN_ID TECH_ID;\\012ALTER TABLE EXPERIMENTS ADD COLUMN DESCRIPTION DESCRIPTION_250;\\012ALTER TABLE EXPERIMENTS ADD COLUMN IS_PUBLIC BOOLEAN_CHAR NOT NULL DEFAULT 'F';\\012ALTER TABLE FILE_FORMAT_TYPES ADD COLUMN DBIN_ID TECH_ID;\\012ALTER TABLE GROUPS ADD COLUMN DBIN_ID TECH_ID;\\012ALTER TABLE GROUPS ADD COLUMN GROU_ID_PARENT TECH_ID;\\012ALTER TABLE GROUPS ADD COLUMN PERS_ID_LEADER TECH_ID;\\012ALTER TABLE GROUPS ADD COLUMN DESCRIPTION DESCRIPTION_250;\\012ALTER TABLE GROUPS ADD COLUMN REGISTRATION_TIMESTAMP TIME_STAMP_DFL NOT NULL DEFAULT CURRENT_TIMESTAMP;\\012ALTER TABLE GROUPS ADD COLUMN PERS_ID_REGISTERER TECH_ID;\\012ALTER TABLE MATERIALS ADD COLUMN DBIN_ID TECH_ID;\\012ALTER TABLE MATERIAL_TYPES ADD COLUMN DBIN_ID TECH_ID;\\012ALTER TABLE OBSERVABLE_TYPES ADD COLUMN DBIN_ID TECH_ID;\\012ALTER TABLE PERSONS ADD COLUMN DBIN_ID TECH_ID;\\012ALTER TABLE PERSONS ADD COLUMN PERS_ID_REGISTERER TECH_ID;\\012ALTER TABLE PERSONS ADD COLUMN REGISTRATION_TIMESTAMP TIME_STAMP_DFL NOT NULL DEFAULT CURRENT_TIMESTAMP;\\012ALTER TABLE PROCEDURE_TYPES ADD COLUMN DBIN_ID TECH_ID;\\012ALTER TABLE PROJECTS ADD COLUMN PERS_ID_LEADER TECH_ID;\\012ALTER TABLE PROJECTS ADD COLUMN PERS_ID_REGISTERER TECH_ID;\\012ALTER TABLE PROJECTS ADD COLUMN REGISTRATION_TIMESTAMP TIME_STAMP_DFL NOT NULL DEFAULT CURRENT_TIMESTAMP;\\012ALTER TABLE PROJECTS ADD COLUMN DESCRIPTION DESCRIPTION_1000;\\012ALTER TABLE PROPERTY_TYPES ADD COLUMN DBIN_ID TECH_ID;\\012ALTER TABLE SAMPLES ADD COLUMN DBIN_ID TECH_ID ;\\012ALTER TABLE SAMPLES ADD COLUMN GROU_ID TECH_ID ;\\012ALTER TABLE SAMPLE_TYPES ADD COLUMN DBIN_ID TECH_ID;\\012\\012\\012-- Primary Key Constraints\\012\\012ALTER TABLE DATABASE_INSTANCES ADD CONSTRAINT DBIN_PK PRIMARY KEY(ID);\\012ALTER TABLE ROLE_ASSIGNMENTS ADD CONSTRAINT ROAS_PK PRIMARY KEY(ID);\\012\\012-- Unique Key Constraints\\012\\012ALTER TABLE DATABASE_INSTANCES ADD CONSTRAINT DBIN_BK_UK UNIQUE(CODE);\\012ALTER TABLE ROLE_ASSIGNMENTS ADD CONSTRAINT ROAS_BK_UK UNIQUE(PERS_ID_GRANTEE,ROLE_CODE,GROU_ID,DBIN_ID);\\012\\012-- Foreign Key Constraints\\012\\012ALTER TABLE CONTROLLED_VOCABULARIES ADD CONSTRAINT COVO_DBIN_FK FOREIGN KEY (DBIN_ID) REFERENCES DATABASE_INSTANCES(ID);\\012ALTER TABLE EXPERIMENT_TYPES ADD CONSTRAINT EXTY_DBIN_FK FOREIGN KEY (DBIN_ID) REFERENCES DATABASE_INSTANCES(ID);\\012ALTER TABLE FILE_FORMAT_TYPES ADD CONSTRAINT FFTY_DBIN_FK FOREIGN KEY (DBIN_ID) REFERENCES DATABASE_INSTANCES(ID);\\012ALTER TABLE GROUPS ADD CONSTRAINT GROU_DBIN_FK FOREIGN KEY (DBIN_ID) REFERENCES DATABASE_INSTANCES(ID);\\012ALTER TABLE GROUPS ADD CONSTRAINT GROU_GROU_FK FOREIGN KEY (GROU_ID_PARENT) REFERENCES GROUPS(ID);\\012ALTER TABLE GROUPS ADD CONSTRAINT GROU_PERS_FK_LEADER FOREIGN KEY (PERS_ID_LEADER) REFERENCES PERSONS(ID);\\012ALTER TABLE GROUPS ADD CONSTRAINT GROU_PERS_FK_REGISTERER FOREIGN KEY (PERS_ID_REGISTERER) REFERENCES PERSONS(ID);\\012ALTER TABLE MATERIALS ADD CONSTRAINT MATE_DBIN_FK FOREIGN KEY (DBIN_ID) REFERENCES DATABASE_INSTANCES(ID);\\012ALTER TABLE MATERIAL_TYPES ADD CONSTRAINT MATY_DBIN_FK FOREIGN KEY (DBIN_ID) REFERENCES DATABASE_INSTANCES(ID);\\012ALTER TABLE OBSERVABLE_TYPES ADD CONSTRAINT OBTY_DBIN_FK FOREIGN KEY (DBIN_ID) REFERENCES DATABASE_INSTANCES(ID);\\012ALTER TABLE PERSONS ADD CONSTRAINT PERS_DBIN_FK FOREIGN KEY (DBIN_ID) REFERENCES DATABASE_INSTANCES(ID);\\012ALTER TABLE PROCEDURE_TYPES ADD CONSTRAINT PCTY_DBIN_FK FOREIGN KEY (DBIN_ID) REFERENCES DATABASE_INSTANCES(ID);\\012ALTER TABLE PROJECTS ADD CONSTRAINT PROJ_PERS_FK_LEADER FOREIGN KEY (PERS_ID_LEADER) REFERENCES PERSONS(ID);\\012ALTER TABLE PROJECTS ADD CONSTRAINT PROJ_PERS_FK_REGISTERER FOREIGN KEY (PERS_ID_REGISTERER) REFERENCES PERSONS(ID);\\012ALTER TABLE PROPERTY_TYPES ADD CONSTRAINT PRTY_DBIN_FK FOREIGN KEY (DBIN_ID) REFERENCES DATABASE_INSTANCES(ID);\\012ALTER TABLE ROLE_ASSIGNMENTS ADD CONSTRAINT ROAS_DBIN_FK FOREIGN KEY (DBIN_ID) REFERENCES DATABASE_INSTANCES(ID);\\012ALTER TABLE ROLE_ASSIGNMENTS ADD CONSTRAINT ROAS_GROU_FK FOREIGN KEY (GROU_ID) REFERENCES GROUPS(ID);\\012ALTER TABLE ROLE_ASSIGNMENTS ADD CONSTRAINT ROAS_PERS_FK_GRANTEE FOREIGN KEY (PERS_ID_GRANTEE) REFERENCES PERSONS(ID);\\012ALTER TABLE ROLE_ASSIGNMENTS ADD CONSTRAINT ROAS_PERS_FK_REGISTERER FOREIGN KEY (PERS_ID_REGISTERER) REFERENCES PERSONS(ID);\\012ALTER TABLE SAMPLES ADD CONSTRAINT SAMP_DBIN_FK FOREIGN KEY (DBIN_ID) REFERENCES DATABASE_INSTANCES(ID);\\012ALTER TABLE SAMPLES ADD CONSTRAINT SAMP_GROU_FK FOREIGN KEY (GROU_ID) REFERENCES GROUPS(ID);\\012ALTER TABLE SAMPLE_TYPES ADD CONSTRAINT SATY_DBIN_FK FOREIGN KEY (DBIN_ID) REFERENCES DATABASE_INSTANCES(ID);\\012\\012\\012-- Sequences\\012\\012CREATE SEQUENCE DATABASE_INSTANCE_ID_SEQ;\\012CREATE SEQUENCE ROLE_ASSIGNMENT_ID_SEQ;\\012\\012-- Indices\\012\\012CREATE INDEX EXDA_CVTE_FK_I ON EXTERNAL_DATA (CVTE_ID_STOR_FMT);\\012CREATE INDEX GROU_DBIN_FK_I ON GROUPS (DBIN_ID);\\012CREATE INDEX GROU_GROU_FK_I ON GROUPS (GROU_ID_PARENT);\\012CREATE INDEX GROU_PERS_FK_I ON GROUPS (PERS_ID_LEADER);\\012CREATE INDEX GROU_PERS_REGISTERED_BY_FK_I ON GROUPS (PERS_ID_REGISTERER);\\012CREATE INDEX PROJ_PERS_FK_I_LEADER ON PROJECTS (PERS_ID_LEADER);\\012CREATE INDEX PROJ_PERS_FK_I_REGISTERER ON PROJECTS (PERS_ID_REGISTERER);\\012CREATE INDEX ROAS_DBIN_FK_I ON ROLE_ASSIGNMENTS (DBIN_ID);\\012CREATE INDEX ROAS_GROU_FK_I ON ROLE_ASSIGNMENTS (GROU_ID);\\012CREATE INDEX ROAS_PERS_FK_I_GRANTEE ON ROLE_ASSIGNMENTS (PERS_ID_GRANTEE);\\012CREATE INDEX ROAS_PERS_FK_I_REGISTERER ON ROLE_ASSIGNMENTS (PERS_ID_REGISTERER);\\012\\012\\012--====================================\\012-- Alter Objects\\012--====================================\\012\\012-- Domains\\012\\012ALTER DOMAIN BOOLEAN_CHAR_OR_UNKNOWN SET DEFAULT 'U';\\012\\012-- Tables\\012\\012ALTER TABLE PERSONS ALTER COLUMN USER_ID SET NOT NULL;\\012\\012-- Primary Key Constraints\\012\\012\\012-- Unique Key Constraints\\012\\012   -- Drop the Unique Key Constraints\\012ALTER TABLE CONTROLLED_VOCABULARIES DROP CONSTRAINT COVO_BK_UK ;\\012ALTER TABLE EXPERIMENT_TYPES DROP CONSTRAINT EXTY_BK_UK ;\\012ALTER TABLE FILE_FORMAT_TYPES DROP CONSTRAINT FFTY_BK_UK ;\\012ALTER TABLE GROUPS DROP CONSTRAINT GROU_BK_UK ;\\012ALTER TABLE MATERIALS DROP CONSTRAINT MATE_BK_UK ;\\012ALTER TABLE MATERIAL_TYPES DROP CONSTRAINT MATY_UK ;\\012ALTER TABLE MATERIAL_TYPES DROP CONSTRAINT MATY_BK_UK ;\\012ALTER TABLE OBSERVABLE_TYPES DROP CONSTRAINT OBTY_BK_UK ;\\012ALTER TABLE PERSONS DROP CONSTRAINT PERS_BK_UK ;\\012ALTER TABLE PROCEDURE_TYPES DROP CONSTRAINT PCTY_BK_UK ;\\012ALTER TABLE PROPERTY_TYPES DROP CONSTRAINT PRTY_BK_UK ;\\012ALTER TABLE ROLE_ASSIGNMENTS DROP CONSTRAINT ROAS_BK_UK ;\\012ALTER TABLE SAMPLES DROP CONSTRAINT SAMP_BK_UK ;\\012ALTER TABLE SAMPLE_TYPES DROP CONSTRAINT SATY_BK_UK ;\\012\\012\\012   -- ReCreate the Unique Key Constraints with the extended columns\\012ALTER TABLE CONTROLLED_VOCABULARIES ADD CONSTRAINT COVO_BK_UK UNIQUE(CODE,IS_INTERNAL_NAMESPACE,DBIN_ID);\\012ALTER TABLE EXPERIMENT_TYPES ADD CONSTRAINT EXTY_BK_UK UNIQUE(CODE,DBIN_ID);\\012ALTER TABLE FILE_FORMAT_TYPES ADD CONSTRAINT FFTY_BK_UK UNIQUE(CODE,DBIN_ID);\\012ALTER TABLE GROUPS ADD CONSTRAINT GROU_BK_UK UNIQUE(CODE,DBIN_ID);\\012ALTER TABLE MATERIALS ADD CONSTRAINT MATE_BK_UK UNIQUE(CODE,MATY_ID,DBIN_ID);\\012ALTER TABLE MATERIAL_TYPES ADD CONSTRAINT MATY_BK_UK UNIQUE(CODE,DBIN_ID);\\012ALTER TABLE OBSERVABLE_TYPES ADD CONSTRAINT OBTY_BK_UK UNIQUE(CODE,DBIN_ID);\\012ALTER TABLE PERSONS ADD CONSTRAINT PERS_BK_UK UNIQUE(DBIN_ID,USER_ID);\\012ALTER TABLE PROCEDURE_TYPES ADD CONSTRAINT PCTY_BK_UK UNIQUE(CODE,DBIN_ID);\\012ALTER TABLE PROPERTY_TYPES ADD CONSTRAINT PRTY_BK_UK UNIQUE(CODE,IS_INTERNAL_NAMESPACE,DBIN_ID);\\012ALTER TABLE ROLE_ASSIGNMENTS ADD CONSTRAINT ROAS_BK_UK UNIQUE(PERS_ID_GRANTEE,ROLE_CODE,GROU_ID,DBIN_ID);\\012ALTER TABLE SAMPLES ADD CONSTRAINT SAMP_BK_UK UNIQUE(CODE,DBIN_ID,GROU_ID);\\012ALTER TABLE SAMPLE_TYPES ADD CONSTRAINT SATY_BK_UK UNIQUE(CODE,DBIN_ID);\\012\\012\\012\\012-- Foreign Key Constraints\\012\\012   -- Rename according to the naming convention\\012ALTER TABLE EXTERNAL_DATA DROP CONSTRAINT EXDA_STOR_FMT_FK;\\012ALTER TABLE EXTERNAL_DATA ADD CONSTRAINT EXDA_CVTE_FK FOREIGN KEY (CVTE_ID_STOR_FMT) REFERENCES CONTROLLED_VOCABULARY_TERMS(ID);\\012\\012\\012-- Check Constraints\\012\\012-- Indexes\\012\\012   -- Rename according to the naming convention\\012DROP INDEX DATA_SAMP_DERIVED_FROM_FK_I ;\\012DROP INDEX DATA_SAMP_FK_I ;\\012CREATE INDEX DATA_SAMP_FK_I_ACQUIRED_FROM ON DATA (SAMP_ID_ACQUIRED_FROM);\\012CREATE INDEX DATA_SAMP_FK_I_DERIVED_FROM ON DATA (SAMP_ID_DERIVED_FROM);\\012\\012\\012\\012\\012--====================================\\012-- Delete Objects\\012--====================================\\012\\012-- Domains\\012\\012DROP DOMAIN DOUBLE_PRECISION_VALUE;\\012\\012-- Tables\\012\\012-- Sequences\\012\\012-- Indices\\012\\012\\012--=================================\\012-- Data Migration\\012--=================================\\012\\012INSERT INTO database_instances(\\012              id\\012            , code\\012            , is_original_source)\\012    VALUES (  nextval('DATABASE_INSTANCE_ID_SEQ')\\012            , 'SYSTEM_DEFAULT'\\012            , 'T');\\012\\012\\012-----------------------------------------------------------------------------------\\012-- Fill the FK column in all tables that reference the DATABASE_INSTANCES table\\012-----------------------------------------------------------------------------------\\012\\012update CONTROLLED_VOCABULARIES  \\012set dbin_id = (select id from database_instances where code = 'SYSTEM_DEFAULT');\\012\\012update EXPERIMENT_TYPES  \\012set dbin_id = (select id from database_instances where code = 'SYSTEM_DEFAULT');\\012\\012update FILE_FORMAT_TYPES  \\012set dbin_id = (select id from database_instances where code = 'SYSTEM_DEFAULT');\\012\\012update GROUPS  \\012set dbin_id = (select id from database_instances where code = 'SYSTEM_DEFAULT');\\012\\012update MATERIALS  \\012set dbin_id = (select id from database_instances where code = 'SYSTEM_DEFAULT');\\012\\012update MATERIAL_TYPES  \\012set dbin_id = (select id from database_instances where code = 'SYSTEM_DEFAULT');\\012\\012update OBSERVABLE_TYPES  \\012set dbin_id = (select id from database_instances where code = 'SYSTEM_DEFAULT');\\012\\012update PERSONS  \\012set dbin_id = (select id from database_instances where code = 'SYSTEM_DEFAULT');\\012\\012update PROCEDURE_TYPES  \\012set dbin_id = (select id from database_instances where code = 'SYSTEM_DEFAULT');\\012\\012update PROPERTY_TYPES  \\012set dbin_id = (select id from database_instances where code = 'SYSTEM_DEFAULT');\\012\\012update SAMPLES  \\012set dbin_id = (select id from database_instances where code = 'SYSTEM_DEFAULT');\\012\\012update SAMPLE_TYPES  \\012set dbin_id = (select id from database_instances where code = 'SYSTEM_DEFAULT');\\012\\012\\012-----------------------------------------------------------------------------------\\012-- Fill the FK column in all tables that newly reference the PERSONS table\\012-----------------------------------------------------------------------------------\\012\\012update GROUPS  \\012set PERS_ID_REGISTERER = (select id from persons where user_id = 'system');\\012\\012\\012\\012\\012-- Columns \\012\\012-- Change certain new columns to possess the NOT NULL constraint\\012\\012ALTER TABLE CONTROLLED_VOCABULARIES ALTER COLUMN DBIN_ID SET NOT NULL;\\012ALTER TABLE EXPERIMENT_TYPES ALTER COLUMN DBIN_ID SET NOT NULL;\\012ALTER TABLE FILE_FORMAT_TYPES ALTER COLUMN DBIN_ID SET NOT NULL;\\012ALTER TABLE GROUPS ALTER COLUMN DBIN_ID SET NOT NULL;\\012ALTER TABLE GROUPS ALTER COLUMN PERS_ID_REGISTERER SET NOT NULL;\\012ALTER TABLE MATERIALS ALTER COLUMN DBIN_ID SET NOT NULL;\\012ALTER TABLE MATERIAL_TYPES ALTER COLUMN DBIN_ID SET NOT NULL;\\012ALTER TABLE OBSERVABLE_TYPES ALTER COLUMN DBIN_ID SET NOT NULL;\\012ALTER TABLE PERSONS ALTER COLUMN DBIN_ID SET NOT NULL;\\012ALTER TABLE PROCEDURE_TYPES ALTER COLUMN DBIN_ID SET NOT NULL;\\012ALTER TABLE PROPERTY_TYPES ALTER COLUMN DBIN_ID SET NOT NULL;\\012ALTER TABLE SAMPLE_TYPES ALTER COLUMN DBIN_ID SET NOT NULL;\\012\\012-- Check Constraints\\012\\012ALTER TABLE ROLE_ASSIGNMENTS ADD CONSTRAINT ROAS_DBIN_GROU_ARC_CK CHECK ((DBIN_ID IS NOT NULL AND GROU_ID IS NULL) OR (DBIN_ID IS NULL AND GROU_ID IS NOT NULL));\\012ALTER TABLE SAMPLES ADD CONSTRAINT SAMP_DBIN_GROU_ARC_CK CHECK ((DBIN_ID IS NOT NULL AND GROU_ID IS NULL) OR (DBIN_ID IS NULL AND GROU_ID IS NOT NULL));\\012	\N
020	../server-application-server/source/sql/postgresql/migration/migration-019-020.sql	SUCCESS	2008-09-15 14:46:15.034	-- migration-019-020.sql\\012\\012\\012-- Creating domains\\012\\012--------\\012-- Added\\012--------\\012\\012CREATE DOMAIN EVENT_TYPE AS VARCHAR(40) CHECK (VALUE IN ('DELETION', 'INVALIDATION', 'MOVEMENT'));\\012\\012----------\\012-- Changed\\012----------\\012\\012-- Change the domain AUTHORIZATION_ROLE by changing its TYPE to VARCHAR(40) and dropping the NOT NULL constraint\\012\\012ALTER TABLE ROLE_ASSIGNMENTS ALTER COLUMN ROLE_CODE TYPE CODE;\\012DROP DOMAIN AUTHORIZATION_ROLE;\\012CREATE DOMAIN AUTHORIZATION_ROLE AS VARCHAR(40) CHECK (VALUE IN ('ADMIN', 'USER', 'OBSERVER', 'ETL_SERVER')) ;\\012ALTER TABLE ROLE_ASSIGNMENTS ALTER COLUMN ROLE_CODE TYPE AUTHORIZATION_ROLE;\\012\\012\\012-- Creating tables\\012\\012--------\\012-- Added\\012--------\\012\\012CREATE TABLE EVENTS (ID TECH_ID NOT NULL,EVENT_TYPE EVENT_TYPE NOT NULL,DATA_ID TECH_ID,DESCRIPTION DESCRIPTION_250,REASON DESCRIPTION_250,PERS_ID_REGISTERER TECH_ID NOT NULL,REGISTRATION_TIMESTAMP TIME_STAMP_DFL NOT NULL DEFAULT CURRENT_TIMESTAMP);\\012\\012----------\\012-- Changed\\012----------\\012\\012ALTER TABLE DATA ADD COLUMN IS_DELETED BOOLEAN_CHAR DEFAULT 'F';\\012ALTER TABLE DATA ADD COLUMN IS_VALID BOOLEAN_CHAR DEFAULT 'T';\\012\\012ALTER TABLE EXTERNAL_DATA ADD COLUMN CVTE_ID_STORE TECH_ID;\\012\\012ALTER TABLE PERSONS ADD COLUMN GROU_ID TECH_ID;\\012\\012ALTER TABLE ROLE_ASSIGNMENTS ALTER COLUMN ROLE_CODE SET NOT NULL;\\012\\012UPDATE EXPERIMENTS SET PERS_ID_REGISTERER = (SELECT ID FROM PERSONS WHERE USER_ID ='system') WHERE PERS_ID_REGISTERER IS NULL;\\012ALTER TABLE EXPERIMENTS ALTER COLUMN PERS_ID_REGISTERER SET NOT NULL;\\012\\012UPDATE PROJECTS SET PERS_ID_REGISTERER = (SELECT ID FROM PERSONS WHERE USER_ID ='system') WHERE PERS_ID_REGISTERER IS NULL;\\012ALTER TABLE PROJECTS ALTER COLUMN PERS_ID_REGISTERER SET NOT NULL;\\012\\012UPDATE PERSONS SET GROU_ID = (SELECT ID FROM GROUPS LIMIT 1);\\012\\012-- Creating sequences\\012\\012--------\\012-- Added\\012--------\\012\\012CREATE SEQUENCE EVENT_ID_SEQ;\\012\\012\\012-- Creating primary key constraints\\012\\012--------\\012-- Added\\012--------\\012\\012ALTER TABLE EVENTS ADD CONSTRAINT EVNT_PK PRIMARY KEY(ID);\\012\\012\\012-- Creating unique constraints\\012\\012ALTER TABLE EVENTS ADD CONSTRAINT EVNT_BK_UK UNIQUE(EVENT_TYPE,DATA_ID);\\012\\012----------\\012-- Changed\\012----------\\012\\012ALTER TABLE ROLE_ASSIGNMENTS DROP CONSTRAINT ROAS_BK_UK ;\\012\\012ALTER TABLE ROLE_ASSIGNMENTS ADD CONSTRAINT ROAS_BK_UK UNIQUE(PERS_ID_GRANTEE,ROLE_CODE,GROU_ID,DBIN_ID);\\012\\012\\012-- Creating foreign key constraints\\012\\012--------\\012-- Added\\012--------\\012\\012ALTER TABLE EVENTS ADD CONSTRAINT EVNT_DATA_FK FOREIGN KEY (DATA_ID) REFERENCES DATA(ID);\\012ALTER TABLE EVENTS ADD CONSTRAINT EVNT_PERS_FK FOREIGN KEY (PERS_ID_REGISTERER) REFERENCES PERSONS(ID);\\012ALTER TABLE EXTERNAL_DATA ADD CONSTRAINT EXDA_CVTE_STORED_ON_FK FOREIGN KEY (CVTE_ID_STORE) REFERENCES CONTROLLED_VOCABULARY_TERMS(ID);\\012ALTER TABLE PERSONS ADD CONSTRAINT PERS_GROU_FK FOREIGN KEY (GROU_ID) REFERENCES GROUPS(ID);\\012\\012\\012\\012-- Creating check constraints\\012\\012\\012-- Creating indices\\012\\012--------\\012-- Added\\012--------\\012\\012CREATE INDEX EVNT_DATA_FK_I ON EVENTS (DATA_ID);\\012CREATE INDEX EVNT_PERS_FK_I ON EVENTS (PERS_ID_REGISTERER);\\012CREATE INDEX EXDA_CVTE_STORED_ON_FK_I ON EXTERNAL_DATA (CVTE_ID_STORE);\\012CREATE INDEX PERS_GROU_FK_I ON PERSONS (GROU_ID);\\012	\N
021	../server-application-server/source/sql/postgresql/migration/migration-020-021.sql	SUCCESS	2008-09-15 14:46:15.109	------------------------\\012-- migration-020-021.sql\\012------------------------\\012\\012-- Translate the AUTHORIZATION_ROLE value ADMIN to 'INSTANCE_ADMIN' and 'GROUP_ADMIN' \\012\\012ALTER DOMAIN AUTHORIZATION_ROLE DROP CONSTRAINT AUTHORIZATION_ROLE_CHECK;\\012ALTER DOMAIN AUTHORIZATION_ROLE ADD CONSTRAINT AUTHORIZATION_ROLE_CHECK CHECK (VALUE IN ('ADMIN', 'USER', 'OBSERVER', 'ETL_SERVER'));\\012\\012-- Modify the UK of the SAMPLES table\\012\\012ALTER TABLE SAMPLES DROP CONSTRAINT SAMP_BK_UK;\\012\\012ALTER TABLE SAMPLES ADD CONSTRAINT SAMP_BK_DBIN_UK UNIQUE(SATY_ID,CODE,DBIN_ID);\\012ALTER TABLE SAMPLES ADD CONSTRAINT SAMP_BK_GROU_UK UNIQUE(SATY_ID,CODE,GROU_ID);\\012\\012\\012	\N
022	../server-application-server/source/sql/postgresql/migration/migration-021-022.sql	SUCCESS	2008-09-15 14:46:15.193	-- Drop the UKs SAMP_BK_DBIN_UK and SAMP_BK_GROU_UK of the SAMPLES table\\012\\012ALTER TABLE SAMPLES DROP CONSTRAINT SAMP_BK_DBIN_UK;\\012ALTER TABLE SAMPLES DROP CONSTRAINT SAMP_BK_GROU_UK;\\012\\012-- Recreate the UKs SAMP_BK_DBIN_UK and SAMP_BK_GROU_UK of the SAMPLES table, but without the SATY_ID column.\\012\\012ALTER TABLE SAMPLES ADD CONSTRAINT SAMP_BK_DBIN_UK UNIQUE(CODE,DBIN_ID);\\012ALTER TABLE SAMPLES ADD CONSTRAINT SAMP_BK_GROU_UK UNIQUE(CODE,GROU_ID);\\012	\N
023	../server-application-server/source/sql/postgresql/migration/migration-022-023.sql	SUCCESS	2008-09-15 14:46:19.697	-- JAVA ch.systemsx.cisd.lims.server.dataaccess.migration.MigrationStepFrom022To023\\012\\012-- Add column GLOBAL_CODE to the DATABASE_INSTANCES table.\\012-- Set it's value from the code, it will be updated later from java.\\012\\012ALTER TABLE DATABASE_INSTANCES ADD COLUMN GLOBAL_CODE CODE;\\012update DATABASE_INSTANCES set GLOBAL_CODE = CODE;\\012ALTER TABLE DATABASE_INSTANCES ADD CONSTRAINT DBIN_GLOBAL_CODE_UK UNIQUE(GLOBAL_CODE);\\012ALTER TABLE DATABASE_INSTANCES alter column GLOBAL_CODE set NOT NULL;\\012\\012-- Add column the new FK column SAMP_ID_PART_OF of the SAMPLES table\\012\\012ALTER TABLE SAMPLES ADD COLUMN SAMP_ID_PART_OF TECH_ID;\\012\\012-- Drop constraint SAMP_BK_DBIN_UK of SAMPLES table\\012\\012ALTER TABLE SAMPLES DROP CONSTRAINT SAMP_BK_DBIN_UK;\\012\\012-- Drop constraint SAMP_BK_GROU_UK of SAMPLES table\\012\\012ALTER TABLE SAMPLES DROP CONSTRAINT SAMP_BK_GROU_UK;\\012\\012-- Add FK PART_OF to the SAMPLES table\\012\\012ALTER TABLE SAMPLES ADD CONSTRAINT SAMP_SAMP_FK_PART_OF FOREIGN KEY (SAMP_ID_PART_OF) REFERENCES SAMPLES(ID);\\012\\012-- Add Index for the FK Part Of of the SAMPLES table\\012CREATE INDEX SAMP_SAMP_FK_I_PART_OF ON SAMPLES (SAMP_ID_PART_OF);\\012\\012-- Create the SAMPLE_MATERIAL_BATCHES table\\012\\012CREATE TABLE SAMPLE_MATERIAL_BATCHES (ID TECH_ID NOT NULL,SAMP_ID TECH_ID NOT NULL,MABA_ID TECH_ID NOT NULL);\\012\\012-- Create the sequence for the SAMPLE_MATERIAL_BATCHES table\\012\\012CREATE SEQUENCE SAMPLE_MATERIAL_BATCH_ID_SEQ;\\012\\012\\012--  Create WELL as a new SAMPLE_TYPE\\012\\012insert into sample_types\\012(id\\012,code\\012,description\\012,dbin_id)\\012values \\012(nextval('SAMPLE_TYPE_ID_SEQ')\\012,'WELL'\\012,'Plate Well'\\012,(select id from database_instances where is_original_source = true)\\012);\\012\\012\\012-- Transfer data from the SAMPLE_COMPONENTS table to the SAMPLES table\\012\\012INSERT INTO samples(\\012              id\\012            , code\\012            , samp_id_top\\012            , samp_id_generated_from\\012            , saty_id\\012            , pers_id_registerer\\012            , inva_id\\012            , samp_id_control_layout\\012            , dbin_id\\012            , grou_id\\012            , samp_id_part_of)\\012SELECT        nextval('sample_id_seq')\\012            , saco.code\\012            , null\\012            , null\\012            , (select id from sample_types where code = 'WELL')\\012            , (select id from persons where user_id ='system')\\012            , samp.inva_id\\012            , null\\012            , samp.dbin_id\\012            , samp.grou_id\\012            , saco.samp_id\\012FROM samples samp INNER JOIN sample_components saco\\012     ON   samp.id = saco.samp_id;\\012\\012\\012-- Fill the SAMPLE_MATERIAL_BATCHES table via SAMPLE_C0MPONENT_MATERIALS, SAMPLE_C0MPONENTS, SAMPLES and MATERIAL_BATCHES tables\\012\\012INSERT INTO sample_material_batches(\\012              id\\012            , samp_id\\012            , maba_id)\\012SELECT        nextval('sample_material_batch_id_seq')\\012            , well.id\\012            , scma.maba_id\\012FROM sample_component_materials scma \\012   INNER JOIN material_batches maba\\012     ON scma.maba_id = maba.id\\012        INNER JOIN sample_components saco\\012           ON scma.saco_id = saco.id\\012              INNER JOIN samples well\\012                 ON saco.code = well.code and saco.samp_id = well.samp_id_part_of\\012;\\012\\012\\012-- Drop the retired Database Objects\\012\\012DROP TABLE SAMPLE_COMPONENT_MATERIALS;\\012DROP TABLE SAMPLE_COMPONENTS;\\012\\012DROP SEQUENCE SCMA_ID_SEQ;\\012DROP SEQUENCE SAMPLE_COMPONENT_ID_SEQ;\\012\\012------------------------------------------------------------------------------------\\012--  Purpose:  Create trigger SAMPLE_CODE_UNIQUENESS_CHECK \\012------------------------------------------------------------------------------------\\012\\012CREATE OR REPLACE FUNCTION SAMPLE_CODE_UNIQUENESS_CHECK() RETURNS trigger AS $$\\012DECLARE\\012   counter  INTEGER;\\012BEGIN\\012\\011IF (NEW.samp_id_part_of is NULL) THEN\\012\\011\\011IF (NEW.dbin_id is not NULL) THEN\\012\\011\\011\\011SELECT count(*) into counter FROM samples \\012\\011\\011\\011\\011where id != NEW.id and code = NEW.code and dbin_id = NEW.dbin_id;\\012\\011\\011\\011IF (counter > 0) THEN\\012\\011\\011\\011\\011RAISE EXCEPTION 'Insert/Update of Sample (Code: %) failed because database instance sample with the same code already exists.', NEW.code;\\012\\011\\011\\011END IF;\\012\\011\\011ELSIF (NEW.grou_id is not NULL) THEN\\012\\011\\011\\011SELECT count(*) into counter FROM samples \\012\\011\\011\\011\\011where id != NEW.id and code = NEW.code and grou_id = NEW.grou_id;\\012\\011\\011\\011IF (counter > 0) THEN\\012\\011\\011\\011\\011RAISE EXCEPTION 'Insert/Update of Sample (Code: %) failed because group sample with the same code already exists.', NEW.code;\\012\\011\\011\\011END IF;\\012\\011\\011END IF;\\012        ELSE\\012\\011\\011IF (NEW.dbin_id is not NULL) THEN\\012\\011\\011\\011SELECT count(*) into counter FROM samples \\012\\011\\011\\011\\011where id != NEW.id and code = NEW.code and samp_id_part_of = NEW.samp_id_part_of and dbin_id = NEW.dbin_id;\\012\\011\\011\\011IF (counter > 0) THEN\\012\\011\\011\\011\\011RAISE EXCEPTION 'Insert/Update of Sample (Code: %) failed because database instance sample with the same code and being the part of the same parent already exists.', NEW.code;\\012\\011\\011\\011END IF;\\012\\011\\011ELSIF (NEW.grou_id is not NULL) THEN\\012\\011\\011\\011SELECT count(*) into counter FROM samples \\012\\011\\011\\011\\011where id != NEW.id and code = NEW.code and samp_id_part_of = NEW.samp_id_part_of and grou_id = NEW.grou_id;\\012\\011\\011\\011IF (counter > 0) THEN\\012\\011\\011\\011\\011RAISE EXCEPTION 'Insert/Update of Sample (Code: %) failed because group sample with the same code and being the part of the same parent already exists.', NEW.code;\\012\\011\\011\\011END IF;\\012\\011\\011END IF;\\012        END IF;   \\012   RETURN NEW;\\012END;\\012$$ LANGUAGE 'plpgsql';\\012\\012CREATE TRIGGER SAMPLE_CODE_UNIQUENESS_CHECK BEFORE INSERT OR UPDATE ON SAMPLES\\012    FOR EACH ROW EXECUTE PROCEDURE SAMPLE_CODE_UNIQUENESS_CHECK();\\012	\N
024	../server-application-server/source/sql/postgresql/migration/migration-023-024.sql	SUCCESS	2008-09-15 14:46:19.886	-- JAVA ch.systemsx.cisd.lims.server.dataaccess.migration.MigrationStepFrom023To024\\012\\012-- Drop constraint DBIN_GLOBAL_CODE_UK of DATABASE_INSTANCES table\\012\\012ALTER TABLE DATABASE_INSTANCES DROP CONSTRAINT DBIN_GLOBAL_CODE_UK;\\012\\012-- Name changes\\012\\012ALTER TABLE DATABASE_INSTANCES RENAME COLUMN GLOBAL_CODE TO UUID;\\012\\012-- Add constraint DBIN_UUID_UK to the DATABASE_INSTANCES table\\012\\012ALTER TABLE DATABASE_INSTANCES ADD CONSTRAINT DBIN_UUID_UK UNIQUE(UUID);\\012\\012-- Drop column in EXPERIMENTS\\012\\012ALTER TABLE EXPERIMENTS DROP COLUMN DESCRIPTION;\\012\\012-- Add index to SAMPLES table\\012\\012CREATE INDEX SAMP_CODE_I ON SAMPLES (CODE);\\012\\012-- Bug fix in trigger function SAMPLE_CODE_UNIQUENESS_CHECK()\\012\\012CREATE OR REPLACE FUNCTION SAMPLE_CODE_UNIQUENESS_CHECK() RETURNS trigger AS $$\\012DECLARE\\012   counter  INTEGER;\\012BEGIN\\012    IF (NEW.samp_id_part_of is NULL) THEN\\012        IF (NEW.dbin_id is not NULL) THEN\\012            SELECT count(*) into counter FROM samples \\012                where id != NEW.id and code = NEW.code and samp_id_part_of is NULL and dbin_id = NEW.dbin_id;\\012            IF (counter > 0) THEN\\012                RAISE EXCEPTION 'Insert/Update of Sample (Code: %) failed because database instance sample with the same code already exists.', NEW.code;\\012            END IF;\\012        ELSIF (NEW.grou_id is not NULL) THEN\\012            SELECT count(*) into counter FROM samples \\012                where id != NEW.id and code = NEW.code and samp_id_part_of is NULL and grou_id = NEW.grou_id;\\012            IF (counter > 0) THEN\\012                RAISE EXCEPTION 'Insert/Update of Sample (Code: %) failed because group sample with the same code already exists.', NEW.code;\\012            END IF;\\012        END IF;\\012        ELSE\\012        IF (NEW.dbin_id is not NULL) THEN\\012            SELECT count(*) into counter FROM samples \\012                where id != NEW.id and code = NEW.code and samp_id_part_of = NEW.samp_id_part_of and dbin_id = NEW.dbin_id;\\012            IF (counter > 0) THEN\\012                RAISE EXCEPTION 'Insert/Update of Sample (Code: %) failed because database instance sample with the same code and being the part of the same parent already exists.', NEW.code;\\012            END IF;\\012        ELSIF (NEW.grou_id is not NULL) THEN\\012            SELECT count(*) into counter FROM samples \\012                where id != NEW.id and code = NEW.code and samp_id_part_of = NEW.samp_id_part_of and grou_id = NEW.grou_id;\\012            IF (counter > 0) THEN\\012                RAISE EXCEPTION 'Insert/Update of Sample (Code: %) failed because group sample with the same code and being the part of the same parent already exists.', NEW.code;\\012            END IF;\\012        END IF;\\012        END IF;   \\012   RETURN NEW;\\012END;\\012$$ LANGUAGE 'plpgsql';\\012	\N
025	../server-application-server/source/sql/postgresql/migration/migration-024-025.sql	SUCCESS	2008-09-15 14:46:20.011	-- move screenable plates to a group, because it's no longer possible\\012-- to have such plates on the instance level\\012\\012CREATE OR REPLACE FUNCTION move_exp_samples_to_group() RETURNS integer AS $$\\012DECLARE\\012    sample RECORD;\\012    groupId Integer;\\012BEGIN\\012  FOR sample IN \\012    (SELECT * FROM samples s inner join sample_types t on s.saty_id = t.id \\012\\011where t.code in ('CELL_PLATE', 'REINFECT_PLATE'))\\012  LOOP\\012\\011if (sample.dbin_id is not NULL) THEN\\012\\011\\011select proj.grou_id into groupId from\\012\\011\\011\\011samples sa\\012\\011\\011\\011left outer join sample_inputs si on sa.id = si.samp_id \\012\\011\\011\\011left outer join procedures proc on proc.id = si.proc_id  \\012\\011\\011\\011left outer join experiments ex on ex.id = proc.expe_id\\012\\011\\011\\011left outer join projects proj on proj.id = ex.proj_id\\012\\011\\011where sa.id = sample.id;\\012\\011\\011if (groupId is NULL) THEN\\012\\011\\011\\011select id into groupId from groups limit 1;\\012\\011\\011END IF;\\012\\011\\011if (groupId is NULL) THEN\\012\\011\\011\\011RAISE EXCEPTION 'There is no group in the database - internal error!';\\012\\011\\011END IF;\\012\\011\\011update samples set grou_id = groupId, dbin_id = NULL\\012\\011\\011  where id = sample.id;\\012\\011END IF;\\012  END LOOP;\\012  RETURN 1;\\012END;\\012$$ LANGUAGE 'plpgsql';\\012\\012select move_exp_samples_to_group();\\012\\012-- Create new table DATA_STORES.\\012\\012CREATE TABLE DATA_STORES (ID TECH_ID NOT NULL,DBIN_ID TECH_ID NOT NULL,CODE CODE NOT NULL,DOWNLOAD_URL VARCHAR(1024) NOT NULL,REGISTRATION_TIMESTAMP TIME_STAMP_DFL NOT NULL DEFAULT CURRENT_TIMESTAMP);\\012CREATE SEQUENCE DATA_STORE_ID_SEQ;\\012ALTER TABLE DATA_STORES ADD CONSTRAINT DAST_PK PRIMARY KEY(ID);\\012ALTER TABLE DATA_STORES ADD CONSTRAINT DAST_BK_UK UNIQUE(CODE,DBIN_ID);\\012ALTER TABLE DATA_STORES ADD CONSTRAINT DAST_DBIN_FK FOREIGN KEY (DBIN_ID) REFERENCES DATABASE_INSTANCES(ID);\\012CREATE INDEX DAST_DBIN_FK_I ON DATA_STORES (DBIN_ID);\\012\\012-- Add new column DAST_ID (connection to DATA_STORES table) to tables DATABASE_INSTANCES, GROUPS, PROJECTS, EXPERIMENTS.\\012\\012ALTER TABLE DATABASE_INSTANCES ADD COLUMN DAST_ID TECH_ID;\\012ALTER TABLE GROUPS ADD COLUMN DAST_ID TECH_ID;\\012ALTER TABLE PROJECTS ADD COLUMN DAST_ID TECH_ID;\\012ALTER TABLE EXPERIMENTS ADD COLUMN DAST_ID TECH_ID;\\012\\012-- Create the STANDARD data store and assign it to the home database instance.\\012 \\012insert into data_stores\\012(id\\012,code\\012,download_url\\012,dbin_id)\\012values \\012(nextval('DATA_STORE_ID_SEQ')\\012,'STANDARD'\\012,''\\012,(select id from database_instances where is_original_source = true)\\012);\\012\\012update database_instances set dast_id = (select id from data_stores where code = 'STANDARD') where is_original_source = true;\\012\\012-- Add foreign key constratints.\\012\\012ALTER TABLE DATABASE_INSTANCES ADD CONSTRAINT DBIN_DAST_FK FOREIGN KEY (DAST_ID) REFERENCES DATA_STORES(ID);\\012ALTER TABLE GROUPS ADD CONSTRAINT GROU_DAST_FK FOREIGN KEY (DAST_ID) REFERENCES DATA_STORES(ID);\\012ALTER TABLE PROJECTS ADD CONSTRAINT PROJ_DAST_FK FOREIGN KEY (DAST_ID) REFERENCES DATA_STORES(ID);\\012ALTER TABLE EXPERIMENTS ADD CONSTRAINT EXPE_DAST_FK FOREIGN KEY (DAST_ID) REFERENCES DATA_STORES(ID);\\012	\N
026	../server-application-server/source/sql/postgresql/migration/migration-025-026.sql	SUCCESS	2008-09-15 14:46:20.192	-- JAVA ch.systemsx.cisd.lims.server.dataaccess.migration.MigrationStepFrom025To026\\012-- Remove ID column from SAMPLE_INPUTS table\\012DROP SEQUENCE SAMPLE_INPUT_ID_SEQ;\\012-- There was a bug in migration to db 23 - the constraint was not created. So we drop it only if it exists.\\012create function remove_sain_pk_constraint() returns void AS $$\\012begin\\012   perform *\\012     FROM information_schema.table_constraints WHERE constraint_name='sain_pk';\\012   if found\\012   then\\012\\011ALTER TABLE SAMPLE_INPUTS DROP CONSTRAINT SAIN_PK;\\012   end if;\\012end;\\012$$ language 'plpgsql';\\012select remove_sain_pk_constraint();\\012drop function remove_sain_pk_constraint();\\012ALTER TABLE SAMPLE_INPUTS DROP COLUMN ID;\\012ALTER TABLE SAMPLE_INPUTS ADD CONSTRAINT SAIN_PK PRIMARY KEY(SAMP_ID,PROC_ID);\\012\\012-- Remove ID column from SAMPLE_MATERIAL_BATCHES table\\012DROP SEQUENCE SAMPLE_MATERIAL_BATCH_ID_SEQ;\\012-- There was a bug in migration to db 23 - the constraint was not created. So we drop it only if it exists.\\012create function remove_samb_pk_constraint() returns void AS $$\\012begin\\012   perform *\\012     FROM information_schema.table_constraints WHERE constraint_name='SAMB_PK';\\012   if found\\012   then\\012\\012   end if;\\012end;\\012$$ language 'plpgsql';\\012select remove_samb_pk_constraint();\\012drop function remove_samb_pk_constraint();\\012ALTER TABLE SAMPLE_MATERIAL_BATCHES DROP COLUMN ID;\\012ALTER TABLE SAMPLE_MATERIAL_BATCHES ADD CONSTRAINT SAMB_PK PRIMARY KEY(SAMP_ID,MABA_ID);\\012\\012-- Remove ID and REGISTRATION_TIMESTAMP column from DATA_SET_RELATIONSHIPS table\\012DROP SEQUENCE DATA_SET_RELATIONSHIP_ID_SEQ;\\012ALTER TABLE DATA_SET_RELATIONSHIPS DROP CONSTRAINT DSRE_PK;\\012ALTER TABLE DATA_SET_RELATIONSHIPS DROP CONSTRAINT DSRE_BK_UK;\\012ALTER TABLE DATA_SET_RELATIONSHIPS DROP COLUMN ID;\\012ALTER TABLE DATA_SET_RELATIONSHIPS DROP COLUMN REGISTRATION_TIMESTAMP;\\012ALTER TABLE DATA_SET_RELATIONSHIPS ADD CONSTRAINT DSRE_PK PRIMARY KEY(DATA_ID_PARENT,DATA_ID_CHILD);\\012\\012-- Rename: \\012-- OBSERVABLE_TYPES -> DATA_SET_TYPES\\012-- OBSERVABLE_TYPE_ID_SEQ -> DATA_SET_TYPE_ID_SEQ\\012-- DATA.OBTY_ID -> DATA.DSTY_ID\\012ALTER TABLE OBSERVABLE_TYPES RENAME TO DATA_SET_TYPES;\\012ALTER TABLE OBSERVABLE_TYPE_ID_SEQ RENAME TO DATA_SET_TYPE_ID_SEQ;\\012ALTER TABLE DATA RENAME COLUMN OBTY_ID TO DSTY_ID;\\012	\N
