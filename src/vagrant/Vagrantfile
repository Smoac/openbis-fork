# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "centos7-vbox"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network "forwarded_port", guest: 8888, host: 8888
  config.vm.network "forwarded_port", guest: 8000, host: 8000

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder "../python", "/vagrant_python"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL

  # Install Get
  config.vm.provision :shell, inline: "sudo yum -y install git"

  # Install checkpolicy -- needed to configure SELinux to allow jupyterhub to do its thing
  config.vm.provision :shell, inline: "sudo yum -y install checkpolicy"
  config.vm.provision :shell, inline: "sudo yum -y install policycoreutils policycoreutils-python"

  # Setup the groups we need to sudo spawning
  config.vm.provision :shell, inline: "sudo groupadd jupyterhub"
  config.vm.provision :shell, inline: "sudo usermod -a -G jupyterhub vagrant"

  # Get and install miniconda
  config.vm.provision :shell, inline: "wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh"
  config.vm.provision :shell, inline: "/bin/bash Miniconda3-latest-Linux-x86_64.sh -b -p /home/vagrant/miniconda3"
  config.vm.provision :shell, inline: "echo \"export PATH=/home/vagrant/miniconda3/bin:\$PATH\" > .bashrc"
  config.vm.provision :shell, inline: "export PATH=/home/vagrant/miniconda3/bin:$PATH"
  config.vm.provision :shell, inline: "sudo chown -R vagrant:jupyterhub miniconda3/"


  # Put Jupyter and R into conda
  config.vm.provision :shell, inline: "conda install jupyter"
  config.vm.provision :shell, inline: "conda install -c r r-essentials"
  # Install JupyterHub
  config.vm.provision :shell, inline: "sudo yum -y install epel-release"
  config.vm.provision :shell, inline: "sudo yum -y install nodejs"
  config.vm.provision :shell, inline: "sudo yum -y install npm"
  config.vm.provision :shell, inline: "sudo npm install -g configurable-http-proxy"
  config.vm.provision :shell, inline: "pip install jupyterhub"
  config.vm.provision :shell, inline: "pip install git+https://github.com/jupyter/sudospawner"
    # To set up jupyter hub, follow the instructions https://github.com/jupyterhub/jupyterhub/wiki/Using-sudo-to-run-JupyterHub-without-root-privileges
    # Though sudospanwer has already been installed
  # Install our python packages
  config.vm.provision :shell, inline: "pip install -e /vagrant_python/PyBis/"
  # Start the jupyter notebook (does not seem to work...)
  # config.vm.provision :shell, run: "always", inline: "jupyter notebook --no-browser --ip=0.0.0.0 &"
  # config.vm.provision :shell, run: "always", inline: "jupyterhub -f /vagrant/jupyterhub_config.py --no-ssl &"
  # config.vm.provision :shell, run: "always", inline: "sudo -u rhea /home/vagrant/miniconda3/bin/jupyterhub --JupyterHub.spawner_class=sudospawner.SudoSpawner -f /vagrant/jupyterhub_config.py --no-ssl &"
end
