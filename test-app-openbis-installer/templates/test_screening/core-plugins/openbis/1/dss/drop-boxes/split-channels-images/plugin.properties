incoming-dir = ${incoming-root-dir}/incoming-images-split-channels
incoming-data-completeness-condition = auto-detection

# The extractor class to use for code extraction
data-set-info-extractor = ch.systemsx.cisd.etlserver.DefaultDataSetInfoExtractor
data-set-info-extractor.entity-separator = _
data-set-info-extractor.index-of-sample-code = -1
data-set-info-extractor.index-of-data-producer-code = 1
data-set-info-extractor.index-of-data-production-date = 0
data-set-info-extractor.space-code = DEMO
data-set-info-extractor.project-code = DEMO_PROJECT

# The extractor class to use for type extraction
type-extractor = ch.systemsx.cisd.etlserver.SimpleTypeExtractor
type-extractor.file-format-type = JPG
type-extractor.locator-type = RELATIVE_LOCATION
type-extractor.data-set-type = HCS_IMAGE_OVERVIEW
type-extractor.is-measured = true

storage-processor = ch.systemsx.cisd.openbis.dss.etl.PlateStorageProcessor
storage-processor.generate-thumbnails = false
# The first specified channel will be blue, the second will be green and the third will be red.
# If there are more channels, combinations of colors will be used.
storage-processor.channel-codes = GFP, DAPI
storage-processor.channel-labels = Gfp, Dapi
storage-processor.well_geometry = 3x3
storage-processor.file-extractor = ch.systemsx.cisd.openbis.dss.etl.HCSImageFileExtractor
storage-processor.data-source = imaging-db
