evaluationDependsOn(':common')
evaluationDependsOn(':openbis-common')
evaluationDependsOn(':openbis_api')
evaluationDependsOn(':openbis')
evaluationDependsOn(':datastore_server')

apply from: 'http://svncisd.ethz.ch/repos/cisd/gradle/trunk/javaproject.gradle'

dependencies {
	compile project(':common'),
			project(':datastore_server')
			
	compile 'openhms:jackcess:+',
			'google:gwt-image-loader:+'
			
	testCompile project(path: ':datastore_server', configuration: 'tests')		
			
}

sourceSets { 
	test {
		resources {
			srcDirs = ['source/java']
		}
	}
}

// This task is here to make TabularDataGraphCollectionConfigurationTest to work. It requires some data files
// to be present on the same directory than the class file itself.
task copyTestData(type: Copy, dependsOn: testClasses) {
    from "${project.projectDir}/sourceTest/java/ch/systemsx/cisd/openbis/dss/generic/server/graph"
    into "${project.buildDir}/classes/test/ch/systemsx/cisd/openbis/dss/generic/server/graph"
    include "*.properties"
}

task systemTestSuite(type: Test) {
	useTestNG()
	options.suites('sourceTest/java/tests_system.xml')
	jvmArgs '-Xmx2048m', '-XX:MaxPermSize=256m'	
	testReportDir = file("${project.buildDir}/reports/tests-system")
}

test.dependsOn(systemTestSuite)
test.dependsOn(copyTestData)



configurations.create('api_partial')
dependencies {
	api_partial 'google:gwt-user:2.4'
}
	
task screeningApiJar(type: Jar) {
	archiveName 'openbis_screening_api.jar'
	includeEmptyDirs false
	from zipTree(project(':common').jar.archivePath).plus(
         zipTree(project(':openbis-common').jar.archivePath).plus( 
         zipTree(project(':openbis').jar.archivePath).plus(
         zipTree(project(':openbis_api').jar.archivePath).plus(
         zipTree(project(':datastore_server').jar.archivePath).plus(
         zipTree(jar.archivePath)))))).matching {
	        include "OpenBISScreeningML*.class"
	        include "ch/systemsx/cisd/common/api/**/*.class"
	        exclude "ch/systemsx/cisd/common/api/server/**/*.class"
	        include "ch/systemsx/cisd/openbis/common/api/**/*.class"
	        exclude "ch/systemsx/cisd/openbis/common/api/server/**/*.class"
	      	include "ch/systemsx/cisd/openbis/dss/client/api/v1/**/*.class"
	      	include "ch/systemsx/cisd/openbis/dss/generic/shared/api/v1/**/*.class"
	      	include "ch/systemsx/cisd/openbis/dss/generic/shared/api/authorization/**/*.class"
	      	include "ch/systemsx/cisd/openbis/dss/screening/shared/api/**/*.class"
	      	include "ch/systemsx/cisd/openbis/generic/shared/basic/**/*.class"
	      	include "ch/systemsx/cisd/openbis/generic/shared/api/**/*.class"
	      	include "ch/systemsx/cisd/openbis/generic/shared/authorization/annotation/**/*.class"
			include "ch/systemsx/cisd/openbis/plugin/query/shared/**/*.class"
	      	include "ch/systemsx/cisd/openbis/plugin/screening/shared/api/**/*.class"
	       	include "ch/systemsx/cisd/openbis/plugin/screening/client/api/**/*.class"
	       	include "ch/systemsx/cisd/openbis/plugin/screening/client/cli/**/*.class"
	   
	  		include "ch/systemsx/cisd/openbis/generic/client/cli/Login*.class"
			include "ch/systemsx/cisd/openbis/generic/shared/api/v1/**/*.class"
	        include "ch/systemsx/cisd/common/**/*.class"
	        include "ch/systemsx/cisd/openbis/common/**/*.class"
	}
	
	from zipTree(configurations.api_partial.files.iterator().next()).matching {
			include '**/com/google/gwt/user/client/rpc/IsSerializable.class'
			include '**/com/google/gwt/user/client/rpc/SerializableException.class'
	}
	
    manifest {
		attributes("Main-Class": "ch.systemsx.cisd.openbis.plugin.screening.client.api.v1.ScreeningClientApiTest",
                   "Version": versionNumber,
                   "Build-Number": "${versionNumber} (r${revisionNumber},${cleanFlag})",
                   "Class-Path": "spring-ext.jar")                   
	}
}

screeningApiSources = fileTree('.').matching {
	include "OpenBISScreeningML.java"
    include "ch/systemsx/cisd/openbis/plugin/screening/client/api/v1/**/*.java"
    include "ch/systemsx/cisd/openbis/plugin/screening/shared/api/v1/dto/**/*.java"
}

allScreeningApiSources = project(':openbis').commonApiSources.plus(
				project(':openbis').openBisApiApiSources.plus(
				project(':openbis').openbisCommonApiSources.plus(
				project(':openbis').openbisApiSources.plus(
				screeningApiSources))))

task screeningApiSourcesZip(type: Zip) {
	archiveName 'openbis_screening_api_source.zip'
	from allScreeningApiSources
}

configurations.create('javadoc')
dependencies {
	javadoc 'springframework:spring-tx:+'
}

task screeningApiJavaDoc(type: Javadoc) {
	source allScreeningApiSources.matching{
		include "**/*.java"
	}
	
	classpath = sourceSets.main.output + sourceSets.main.compileClasspath + configurations.javadoc
}

task screeningApiJavaDocZip(type: Zip) {
	archiveName 'openbis_screening_api_javadoc.zip'
	from screeningApiJavaDoc.destinationDir
}
screeningApiJavaDocZip.dependsOn screeningApiJavaDoc

build.dependsOn screeningApiJar
build.dependsOn screeningApiSourcesZip
build.dependsOn screeningApiJavaDocZip


configurations.create('batteries')
dependencies {
	batteries 'cisd:cisd-base:+',
					'apache:commons-httpclient:+',
					'apache:log4j:+',
					'springframework:spring-aop:+',
					'springframework:spring-web:+',
					'springframework:spring-tx:+',					
					'marathon:marathon-spring-util:+',
					'cisd:cisd-args4j:+',
					'python:jython:+'
}

task springExt(type: Jar) {
	archiveName 'spring-ext.jar'
	for (File f : configurations.batteries.files) {
		from zipTree(f).matching {
			include '**/**'
		}
	}
}
build.dependsOn springExt


task screeningApiBatteriesIncluded(type: Jar) {
	archiveName 'openbis_screening_api-batteries_included.jar'
	from zipTree(springExt.archivePath)
	from zipTree(screeningApiJar.archivePath)
}
screeningApiBatteriesIncluded.dependsOn screeningApiJar
screeningApiBatteriesIncluded.dependsOn springExt

build.dependsOn screeningApiBatteriesIncluded


task screeningApiZip(type: Zip) {
	baseName 'openBIS-screening-API'
	from screeningApiJar.archivePath
	from springExt.archivePath
	from screeningApiBatteriesIncluded.archivePath
	from screeningApiSourcesZip.archivePath
	from screeningApiJavaDocZip.archivePath
	from fileTree('./dist/api/')
}
screeningApiZip.dependsOn screeningApiBatteriesIncluded

build.dependsOn screeningApiZip

