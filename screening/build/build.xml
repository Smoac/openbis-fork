<project name="screening" default="ci" basedir="..">
  <import file="../../openbis/build/build.xml" />
  <import file="../../datastore_server/build/build.xml" />
  <project-classpath name="ecp" classes="${classes}" />
	<project-classpath name="ecp.gwt" classes="${targets}/www/WEB-INF/classes" />
  
  <property name="original.dist" value="dist" />
  <property name="mainfolder" value="screening" />
  <property name="variant" value="-screening" />

  <property name="dist.screening-api" value="${dist}/screening_api" />
  <property name="dist.screening-api.lib" value="${dist.screening-api}" />
  <property name="dist.screening-api.jar" value="${dist.screening-api.lib}/openbis_screening_api.jar" />
  <property name="dist.screening-api.src" value="${dist.screening-api}/openbis_screening_api_source.zip" />
	<property name="dist.screening-api.javadoc" value="${dist.screening-api}/doc" />
  <property name="dist.screening-api.javadoc.zip" value="${dist.screening-api}/openbis_screening_api_javadoc.zip" />

	<property name="classes.screening" value="../screening/targets/ant/classes" />
	<property name="classes.common-server" value="../server-common/targets/ant/classes" />
  <property name="classes.common" value="../common/targets/ant/classes" />
		
  <target name="compile" depends="build-common.compile, clean" />

  <!--
        // Task for creating distributions
        -->
	
  <target name="dist" depends="openbis.make-dist, make-dss-dist, screening-api" />

  <target name="make-dss-dist" depends="datastore_server.prepare-dist-libs">
    <jar update="true" destfile="${dss-jar.file}">
      <fileset dir="source">
        <include name="**/*.sql" />
      </fileset>
    	<zipfileset src="${lib}/jhdf5/cisd-jhdf5-batteries_included_lin_win_mac.jar">
    		<exclude name="META_INF/*"/>
    		<include name="ch/systemsx/cisd/hdf5/**/*"/>
    		<include name="nsca/**/*"/>
    	</zipfileset>
    	<fileset dir="${lib}/hdf5">
    		<include name="native/**/*"/>
    	</fileset>
    	<fileset dir="${lib}/nativedata">
    		<include name="native/**/*"/>
    	</fileset>
    	<fileset dir="${lib}/unix">
    		<include name="native/**/*"/>
    	</fileset>
    </jar>
     <antcall target="datastore_server.create-distribution" />
  </target>
  
  <!--
        // Task for continuous integration server.
        -->
  <target name="ci" depends="build-common.ci, dist, check-dependencies" />

  <!--
        // Compiles the javascript using GWT compiler.
        -->
  <target name="compile-javascript" depends="prepare-web-client" description="Compiles the javascript using GWT compiler.">
    <antcall target="compile-gwt-module">
      <param name="gwt.module.name" value="ch.systemsx.cisd.openbis.plugin.screening.OpenBIS" />
    </antcall>
  </target>

  <!--
        // Creates WAR file.
        -->
  <target name="war" depends="openbis.war" description="Creates project war file.">
    <war warfile="${webapp.file}" update="true">
      <classes prefix="WEB-INF/classes/screening" dir="source">
        <include name="**/*.sql" />
      </classes>
      <classes dir="../openbis/${sources}">
        <include name="**/*.xml" />
        <exclude name="**/*.gwt.xml" />
      </classes>
      <lib dir="${lib}/jaxb">
        <include name="*.jar" />
      </lib>
      <lib dir="${lib}/eodsql">
        <include name="*.jar" />
      </lib>
      <lib dir="${lib}/csv">
        <include name="*.jar" />
      </lib>
    </war>
  </target>

  <target name="check-dictionary-syntax" description="Parse *-dictionary.js and check that the syntax is correct.">
    <antcall target="check-javascript-syntax">
      <param name="javascript-file"
        value="../screening/${sources}/ch/systemsx/cisd/openbis/plugin/screening/client/web/public/screening-dictionary.js" />
    </antcall>
  </target>
  
  <!-- xxxxxxxxxxxxxxxxxxxxxxxxxxxxx API xxxxxxxxxxxxxxxxxxxxxxxxxxxx -->
    
  <target name="screening-api-doc">
    <javadoc 
      destdir="${dist.screening-api.javadoc}" 
      access="public" 
      author="false" 
      version="false" 
      classpath="${ecp}:${classes.screening}:${classes.common}:${classes.common-server}">
      <packageset dir="${sources}">
        <include name="ch/systemsx/cisd/openbis/plugin/screening/client/api/v1/**" />
        <include name="ch/systemsx/cisd/openbis/plugin/screening/shared/api/v1/dto/**" />
      </packageset>
    </javadoc>
    <zip destfile="${dist.screening-api.javadoc.zip}">
      <zipfileset dir="${dist.screening-api.javadoc}" includes="**" />
    </zip>
    <delete dir="${dist.screening-api.javadoc}" />
    <zip destfile="${dist.screening-api.src}">
      <zipfileset dir="${sources}" includes="ch/systemsx/cisd/openbis/plugin/screening/shared/api/v1/dto/**" />
      <zipfileset dir="${sources}" includes="ch/systemsx/cisd/openbis/plugin/screening/client/api/v1/*Facade.java" />
    </zip>
  </target>

  <!-- 
  		To test the API you can use
  		   java -jar lib/openbis_screening_api.jar USER PASSWD OPENBIS_SERVER_URL
   -->
  <target name="screening-api-libs">
    <mkdir dir="${dist.screening-api.lib}" />
    <build-info revision="revision.number" version="version.number" clean="clean.flag" />
    <echo file="${build.info.file}">${version.number}:${revision.number}:${clean.flag}</echo>
    <recursive-jar destfile="${dist.screening-api.jar}">
      <fileset dir="${classes.screening}">
        <include name="ch/systemsx/cisd/common/api/**/*.class" />
        <exclude name="ch/systemsx/cisd/common/api/server/**/*.class" />
        <include name="ch/systemsx/cisd/openbis/dss/screening/shared/api/v1/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/plugin/screening/shared/api/v1/**/*.class" />
       	<include name="ch/systemsx/cisd/openbis/plugin/screening/client/api/v1/**/*.class" />
       	<include name="${build.info.filename}" />
      </fileset>
    	<manifest>
      	<attribute name="Main-Class" value="ch.systemsx.cisd.openbis.plugin.screening.client.api.v1.ScreeningClientApiTest" />
        <attribute name="Class-Path" value="spring-ext.jar" />
        <attribute name="Version" value="${version.number}" />
        <attribute name="Build-Number"
                   value="${version.number} (r${revision.number},${clean.flag})" />
      </manifest>
    </recursive-jar>
  	<jar update="true" destfile="${dist.screening-api.jar}">
  		<fileset dir="${classes.common-server}">
  		     	<include name="ch/systemsx/cisd/common/spring/HttpInvokerUtils.class" />
  		</fileset> 
      <fileset dir="${classes.common}">
            <include name="ch/systemsx/cisd/common/exceptions/**/*.class" />
            <include name="ch/systemsx/cisd/common/io/ConcatenatedFileOutputStreamWriter.class" />
      </fileset> 
    </jar>
    <recursive-jar destfile="${dist.screening-api.lib}/spring-ext.jar">
      <zipfileset src="${lib}/spring/spring.jar" />
      <zipfileset src="${lib}/spring/third-party/stream-supporting-httpinvoker.jar" />
      <zipfileset src="${lib}/commons-logging/commons-logging.jar" />
      <zipfileset src="${lib}/commons-httpclient/commons-httpclient.jar" />
      <zipfileset src="${lib}/commons-codec/commons-codec.jar" />
      <zipfileset src="${lib}/log4j/log4j.jar" />     
  	</recursive-jar>
  </target>

	<target name="screening-api" depends="screening-api-doc, screening-api-libs" >
     <zip destfile="${dist}/screening-api-${version.number}-r${revision.number}.zip">
      <zipfileset dir="${dist.screening-api}" includes="**" />
    </zip>
    <delete dir="${dist.screening-api}" />
  </target>
  
  <!-- xxxxxxxxxxxxxxxxxxxxxxxxxxxxx END API xxxxxxxxxxxxxxxxxxxxxxxxxxxx -->
  
  <!-- xxxxxxxxxxxxxxxxxxxxxxxxxxxxx ECLIPSE TEST MODE xxxxxxxxxxxxxxxxxxxxxxxxxxxx -->

  <!-- This is a copy of the openBIS version, the only difference is the value of ecp.gwt variable  -->
  
  <!--
    // // Compile Java to javscript, assuming that prepare-gwt has already been run // // Must pass in module-test.path
    and module-test.module as arguments // e.g., // <{property,param} name="module-test.path" value="openbis-test" /> //
    <{property,param} name="module-test.module" value="ch.systemsx.cisd.openbis.OpenBIS" /> //
  -->
  <target name="screening-compile-module-test" description="Compile the module test mode">
    <delete dir="${targets.www}/${module-test.path}" />
    <java classpath="${ecp}:${ecp.gwt}:${gwt.lib}/gwt-dev.jar:${gwt.user.lib}:../openbis/${sources}:${sources}"
      classname="com.google.gwt.dev.Compiler" fork="true">
      <jvmarg value="-Xmx512M" />
      <arg value="-war" />
      <arg value="${targets.www}" />
      <arg value="${module-test.module}Safari" />
      <arg value="-draftCompile" />
      <arg value="-style" />
      <arg value="PRETTY" />
    </java>
    <move todir="${targets.www}/${module-test.path}">
      <fileset dir="${targets.www}/${module-test.module}" />
    </move>
  </target>

  <!--
    // // Run the production mode, assuming compile-module-test has already been run // // Must pass in
    module-test.path, module-test.module, and module-test.db-kind as arguments // e.g., // <{property,param}
    name="module-test.path" value="openbis-test" /> // <{property,param} name="module-test.module"
    value="ch.systemsx.cisd.openbis.OpenBIS" /> //
  -->
  <target name="screening-run-module-test" description="Run the module test mode">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
      <classpath>
        <pathelement location="${sources}" />
        <pathelement location="../openbis/${sources}" />
        <pathelement path="${ecp}" />
        <pathelement path="${ecp.gwt}" />
        <pathelement location="${gwt.lib}/gwt-dev.jar" />
        <pathelement location="${gwt.lib}/gwt-user.jar" />
      </classpath>
      <jvmarg value="-Xmx512M" />
      <jvmarg value="-ea" />
      <sysproperty key="log4j.configuration" file="etc/log.xml" />
      <sysproperty key="javax.net.ssl.trustStore" file="dist/server/openBIS.keystore" />

      <!-- Arguments to com.google.gwt.dev.DevMode -->
      <!-- Provide two startup urls : one for the compiled version, one for the normal dev version -->
      <arg value="-startupUrl" />
      <arg value="${module-test.path}/index.html" />
      <arg value="-startupUrl" />
      <arg value="${module-test.module}/index.html" />

      <arg value="${module-test.module}" />
      <arg value="-war" />
      <arg value="targets/www" />
      <arg value="-logLevel" />
      <arg value="WARN" />
    </java>
  </target>

  <target name="screening-test-compile-and-run" description="Compile and run the screening openbis from Eclipse">
    <antcall target="screening-compile-module-test">
      <param name="module-test.path" value="openbis-test-screening" />
      <param name="module-test.module" value="ch.systemsx.cisd.openbis.plugin.screening.OpenBIS" />
    </antcall>
    <antcall target="screening-test-run" />
  </target>

  <target name="screening-test-run" description="run the screening openbis from Eclipse">
    <antcall target="screening-run-module-test">
      <param name="module-test.path" value="openbis-test-screening" />
      <param name="module-test.module" value="ch.systemsx.cisd.openbis.plugin.screening.OpenBIS" />
    </antcall>
  </target>
  
  <!-- xxxxxxxxxxxxxxxxxxxxxxxxxxxxx END ECLIPSE TEST MODE xxxxxxxxxxxxxxxxxxxxxxxxxxxx -->
  
  
</project>