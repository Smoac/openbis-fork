<project name="screening" default="ci" basedir="..">
  <import file="../../openbis/build/build.xml" />
  <import file="../../datastore_server/build/build.xml" />
  <project-classpath name="ecp" classes="${classes}" />
	<project-classpath name="ecp.gwt" classes="${targets}/www/WEB-INF/classes" />
  
  <property name="original.dist" value="dist" />
  <property name="mainfolder" value="screening" />
  <property name="variant" value="-screening" />

  <property name="dist.screening-api" value="${dist}/screening_api" />
  <property name="dist.screening-api.lib" value="${dist.screening-api}" />
  <property name="dist.screening-api.jar" value="${dist.screening-api.lib}/openbis_screening_api.jar" />
  <property name="dist.screening-api-batteries-included.jar" value="${dist.screening-api.lib}/openbis_screening_api-batteries_included.jar" />
  <property name="dist.screening-api.src" value="${dist.screening-api}/openbis_screening_api_source.zip" />
  <property name="dist.screening-api.javadoc" value="${dist.screening-api}/doc" />
  <property name="dist.screening-api.javadoc.zip" value="${dist.screening-api}/openbis_screening_api_javadoc.zip" />
	
  <property name="classes.screening" value="../screening/targets/ant/classes" />
  <property name="classes.openbis" value="../openbis/targets/ant/classes" />
  <property name="classes.common-server" value="../openbis-common/targets/ant/classes" />
  <property name="classes.common" value="../common/targets/ant/classes" />
	<property name="screening-build.info.filename" value="BUILD-screening.INFO" />
	<property name="screening-build.info.file" value="${classes.screening}/BUILD-screening.INFO" />

	
  <target name="compile" depends="build-common.compile, clean" />

  <!--
        // Task for creating distributions
  -->
	
  <target name="dist" depends="openbis.make-dist, dss-plugin-jar, make-full-dss-dist, datastore_server.make-plugin-dist, screening-api">
		
  	<zip update="true" destfile="${server.dist.file}">
  		<zipfileset file="${jars.to.be.signed.zip}"/>
  	</zip>
  	<delete file="${jars.to.be.signed.zip}"/>

	</target>
  
  <target name="core-plugins-dist" depends="openbis.core-plugins-dist">
    <antcall target="copy-core-plugins">
      <param name="project-path" value="../screening/"/>
      <param name="plugin-kind" value="as"/>
    </antcall>
  </target>

    			
  <target name="dss-plugin-jar" depends="compile">
		<build-info revision="revision.number" version="version.number" clean="clean.flag" />
		<antcall target="make-dss-plugin-jar"/>
	</target>
	
	<target name="make-dss-plugin-jar" depends="calculate-screening-core-plugins-checksum">
		<echo file="${screening-build.info.file}">${version.number}:${revision.number}:${clean.flag}</echo>
		<jar destfile="${plugin-jar.file}">
			<fileset dir="${classes.screening}">
				<include name="ch/systemsx/cisd/openbis/dss/**/*.class" />
				<include name="ch/systemsx/cisd/openbis/plugin/screening/shared/**/*.class" />
				<include name="ch/systemsx/cisd/utils/**/*.class" />
				<include name="*.class" />
				<include name="${screening-build.info.filename}" />
			</fileset>
    	<fileset dir="${lib}/nativedata">
    		<include name="native/**/*"/>
    	</fileset>
    	<fileset dir="${lib}/unix">
    		<include name="native/**/*"/>
    	</fileset>
			<fileset dir="../screening/source">
				<include name="**/*.sql" />
			</fileset>	
			<fileset dir="../screening/${sources}">
				<include name="*dss*.xml" />
			</fileset>	
			<manifest>
				<attribute name="Version" value="${version.number}" />
				<attribute name="Build-Number"
				           value="${version.number} (r${revision.number},${clean.flag})" />
			</manifest>
		</jar>
  </target>
	
	<target name="calculate-screening-core-plugins-checksum">
  	<antcall target="compute-core-plugins-checksums">
  		<param name="technology" value="screening"/>
  		<param name="path-prefix" value="../screening"/>
  	</antcall>
	</target>
	
  <target name="make-full-dss-dist" depends="datastore_server.prepare-dist-libs, calculate-screening-core-plugins-checksum, compute-dss-checksum">
    <copy file="${plugin-jar.file}" tofile="${dist.datastore_server.lib}/datastore_server_plugin${variant}.jar" />
  	<antcall target="add-stuff-to-dss-dist"/>
  	<antcall target="openbis.copy-core-plugins">
  		<param name="project-path" value="../screening/" />
      <param name="plugin-kind" value="dss" />
  	</antcall>
  	<antcall target="datastore_server.create-distribution" />
  	<delete dir="${dist}/core-plugins"/>
		<mkdir dir="${dist}/data" />
		<mkdir dir="${dist}/etc" />
  	<copy todir="${dist}/data">
  		<fileset dir="../screening/dist/data" />
  	</copy>
    <copy todir="${dist}/etc">
      <fileset dir="../screening/dist/etc">
        <include name="tabular-data-graph.properties" />
      </fileset>
    </copy>
  	<move file="${dist}/data" todir="${dist.datastore_server}"/>
  	<move file="${dist}/etc" todir="${dist.datastore_server}"/>
  </target>
	
	<!-- Add libraries and other stuff to DSS distribution. -->
	<target name="add-stuff-to-dss-dist">
    <copy file="${lib}/sybit-image-viewer/image-viewer.jar" todir="${dist.datastore_server.lib}" />
  	<copy todir="${dist.datastore_server}/data">
  		<fileset dir="../screening/dist/data" />
  	</copy>
    <copy todir="${dist.datastore_server}/etc">
      <fileset dir="../screening/dist/etc">
        <include name="tabular-data-graph.properties" />
      </fileset>
    </copy>
    <copy file="${lib}/javassist/javassist.jar" todir="${dist.datastore_server.lib}"/>
    <copy todir="${dist.datastore_server.lib}" flatten="true">
      <fileset dir="${lib}/reflections">
        <include name="**/*.jar"/>
      </fileset>
    </copy>
	</target>
	
  <!-- 
      Build the checksum file.
  -->
  <target name="compute-dss-checksum" depends="compute-separate-dss-checksums">
  	<concat-checksums />
  </target>
	
  <!-- 
      Compute checksum files, one per configuration file, and place them
      in the ${dist} dir. 
      
      The pattern shown in the file should be:
        hash[two spaces]path_in_distribution_to_file
      e.g.,
        {0}  [folder of file]{1}
  -->
  <target name="compute-separate-dss-checksums">
    <checksum todir="${dist}" pattern="{0}  etc/{1}">
      <fileset dir="../screening/dist/etc">
        <include name="service.properties" />
        <include name="core-plugins.properties" />
      	<include name="tabular-data-graph.properties" />
        <include name="log.xml" />
        <include name="openBIS.keystore" />
      </fileset>
    </checksum>
	  <checksum todir="${dist}" pattern="{0}  bin/{1}">
		  <fileset dir="../datastore_server/dist/etc">
		  	<include name="datastore_server.conf" />
		  </fileset>
		  <fileset dir="../datastore_server/dist">
		  	<include name="datastore_server.sh" />
		  </fileset>
	  </checksum>
  </target>
	
  <!--
        // Task for continuous integration server.
        -->
	<target name="run-tests" depends="compile-tests">
		<delete dir="${output.test}" />
		
		<antcall target="_run-testng">
			<param name="test.suite" value="tests.xml" />
			<param name="failure.property" value="tests.failed" />
		</antcall>
			
		<antcall target="_run-testng">
			<param name="test.suite" value="tests_system.xml" />
			<param name="failure.property" value="system.tests.failed" />
		</antcall>
				
		<junitreport todir="${output.test}">
			<fileset dir="${output.test}">
				<include name="*/*.xml" />
				<exclude name="old/**/*.xml"/>
			</fileset>
			<report format="noframes" todir="${output.test}" />
		</junitreport>
		
		<fail if="tests.failed" message="At least one test failed." />
		<fail if="system.tests.failed" message="At least one system test failed." />
	</target>
	
  <target name="ci" depends="check-dependencies, run-tests, check-restrictions, dist" />

  <!--
        // Compiles the javascript using GWT compiler.
        -->
  <target name="compile-javascript" depends="prepare-web-client" description="Compiles the javascript using GWT compiler.">
    <antcall target="compile-gwt-module">
      <param name="gwt.module.name" value="ch.systemsx.cisd.openbis.plugin.screening.OpenBIS" />
    </antcall>
  </target>
	
	<!-- 
		Use this only if you want to use image viewer (screening.jar needs to be created and it slows down the build process).
		Otherwise use prepare-gwt.
	-->
	<target name="prepare-gwt-with-image-viewer" depends="prepare-gwt, jar"/>
	
  <target name="prepare-gwt">
		<antcall target="openbis.do-prepare-gwt">
			<param name="module-test.module" value="ch.systemsx.cisd.openbis.plugin.screening.OpenBIS" />
		</antcall>
  </target>

	<target name="jar" depends="openbis.jar">
	  <property name="dist.file.name"
	            value="${ant.project.name}-${version.number}-r${revision.number}" />
	  <property name="jars.to.be.signed" value="${dist.file.name}_jars_to_be_signed" />
	  <property name="jars.to.be.signed.dir" value="${targets}/${jars.to.be.signed}" />
	  <property name="jars.to.be.signed.zip" value="${dist}/${jars.to.be.signed}.zip" />
		<property name="targets.www.openbis" value="${targets.www}/ch.systemsx.cisd.openbis.plugin.screening.OpenBIS"/>
			
		<mkdir dir="${targets.www.openbis}" />
		<delete dir="${jars.to.be.signed.dir}" />
		<mkdir dir="${jars.to.be.signed.dir}" />
		<zip update="true" destfile="${dist}/${jar.file.name}">
	    <zipfileset src="${lib}/gwt2.4/gwt-user.jar">
	      <include name="com/google/gwt/user/client/rpc/IsSerializable.class" />
	      <include name="com/google/gwt/user/client/rpc/SerializableException.class" />
	    </zipfileset>
	  </zip>
		

		<antcall target="copy-and-sign-jar">
			<param name="dir" value="${dist}" />
			<param name="jar" value="${jar.file.name}" />
		</antcall>
		<antcall target="copy-and-sign-jar">
			<param name="dir" value="${lib}/cisd-base" />
			<param name="jar" value="cisd-base.jar" />
		</antcall>
		<antcall target="copy-and-sign-jar">
			<param name="dir" value="${lib}/sybit-image-viewer" />
			<param name="jar" value="image-viewer.jar" />
		</antcall>
		<antcall target="copy-and-sign-jar">
			<param name="dir" value="${lib}/spring" />
			<param name="jar" value="spring-web.jar" />
		</antcall>
		<antcall target="copy-and-sign-jar">
			<param name="dir" value="${lib}/spring" />
			<param name="jar" value="spring-context.jar" />
		</antcall>
		<antcall target="copy-and-sign-jar">
			<param name="dir" value="${lib}/spring" />
			<param name="jar" value="spring-beans.jar" />
		</antcall>
		<antcall target="copy-and-sign-jar">
			<param name="dir" value="${lib}/spring" />
			<param name="jar" value="spring-core.jar" />
		</antcall>
		<antcall target="copy-and-sign-jar">
			<param name="dir" value="${lib}/spring" />
			<param name="jar" value="spring-aop.jar" />
		</antcall>
		<antcall target="copy-and-sign-jar">
			<param name="dir" value="${lib}/spring/third-party" />
			<param name="jar" value="aopalliance.jar" />
		</antcall>
		<antcall target="copy-and-sign-jar">
			<param name="dir" value="${lib}/spring/third-party" />
			<param name="jar" value="stream-supporting-httpinvoker.jar" />
		</antcall>
		<antcall target="copy-and-sign-jar">
			<param name="dir" value="${lib}/commons-httpclient" />
			<param name="jar" value="commons-httpclient.jar" />
		</antcall>
		<antcall target="copy-and-sign-jar">
			<param name="dir" value="${lib}/commons-codec" />
			<param name="jar" value="commons-codec.jar" />
		</antcall>
		<antcall target="copy-and-sign-jar">
			<param name="dir" value="${lib}/commons-io" />
			<param name="jar" value="commons-io.jar" />
		</antcall>
		<antcall target="copy-and-sign-jar">
			<param name="dir" value="${lib}/commons-lang" />
			<param name="jar" value="commons-lang.jar" />
		</antcall>
		<antcall target="copy-and-sign-jar">
			<param name="dir" value="${lib}/commons-logging" />
			<param name="jar" value="commons-logging.jar" />
		</antcall>
		<antcall target="copy-and-sign-jar">
			<param name="dir" value="${lib}/imagej" />
			<param name="jar" value="ij.jar" />
		</antcall>
		<antcall target="copy-and-sign-jar">
			<param name="dir" value="${lib}/jython" />
			<param name="jar" value="jython.jar" />
		</antcall>
		<zip destfile="${jars.to.be.signed.zip}"
		     basedir="${targets}"
		     includes="${jars.to.be.signed}/**" />
    <delete dir="${jars.to.be.signed.dir}" failonerror="true" />
	</target>
	
	<target name="copy-and-sign-jar">
		<copy file="${dir}/${jar}" todir="${webapp.dist}" />
		<copy file="${dir}/${jar}" todir="${jars.to.be.signed.dir}" />
		<signjar jar="${webapp.dist}/${jar}"
		         keystore="../screening/etc/dev.keystore"
		         alias="openbis"
		         storepass="openbistest"/>
		<copy file="${webapp.dist}/${jar}" todir="${targets.www.openbis}"/>
	</target>

  <!--
  // Creates WAR file.
  Note, that <war update="true"> doesn't work in case of overwriting files.
  -->
  <target name="war" depends="openbis.war" description="Creates project war file.">
    <unzip src="${webapp.file}" dest="${webapp.file}.unpacked"/>
    <copy todir="${webapp.file}.unpacked/WEB-INF/classes" overwrite="true">
      <fileset dir="../screening/source">
        <include name="**/*.sql" />
      </fileset>
      <fileset dir="../openbis/${sources}">
        <include name="**/*.xml" />
        <exclude name="**/*.gwt.xml" />
        <include name="**/*.xsd" />
      </fileset>
      <fileset dir="../screening/${sources}">
        <include name="**/*.xml" />
        <exclude name="**/*.gwt.xml" />
        <include name="**/*.xsd" />
      </fileset>
    </copy>
    <copy todir="${webapp.file}.unpacked/WEB-INF/lib" overwrite="true">
      <fileset dir="${lib}/jaxb">
        <include name="*.jar" />
      </fileset>
      <fileset dir="${lib}/eodsql">
        <include name="*.jar" />
      </fileset>
      <fileset dir="${lib}/fast-md5">
        <include name="*.jar" />
      </fileset>
      <fileset dir="${lib}/csv">
        <include name="*.jar" />
      </fileset>
    </copy>
    <war warfile="${webapp.file}">
      <fileset dir="${webapp.file}.unpacked"/>
    </war>
    <delete dir="${webapp.file}.unpacked"/>
  </target>

  <target name="check-dictionary-syntax" description="Parse *-dictionary.js and check that the syntax is correct.">
    <antcall target="check-javascript-syntax">
      <param name="javascript-file"
        value="../screening/${sources}/ch/systemsx/cisd/openbis/plugin/screening/client/web/public/screening-dictionary.js" />
    </antcall>
  </target>
  
  <!-- ++++++++++++++++++++++++++++++ API ++++++++++++++++++++++++++++++ -->
    
  <target name="screening-api-doc">
    <javadoc 
      destdir="${dist.screening-api.javadoc}" 
      access="public" 
      author="false" 
      version="false" 
      useexternalfile="true"
      classpath="${ecp}:${classes.screening}:${classes.common}:${classes.common-server}">
    	
	    <fileset dir="../screening/${sources}">
	      <include name="OpenBISScreeningML.java"/>
        <include name="ch/systemsx/cisd/openbis/plugin/screening/client/api/v1/**/*.java" />
        <include name="ch/systemsx/cisd/openbis/plugin/screening/shared/api/v1/dto/**/*.java" />
	    </fileset>
	    
    </javadoc>
    <zip destfile="${dist.screening-api.javadoc.zip}">
      <zipfileset dir="${dist.screening-api.javadoc}" includes="**" />
    </zip>
    <delete dir="${dist.screening-api.javadoc}" />
    <zip destfile="${dist.screening-api.src}">
      <zipfileset dir="../screening/${sources}" includes="OpenBISScreeningML.java" />
    	<zipfileset dir="../screening/${sources}" includes="ch/systemsx/cisd/openbis/plugin/screening/shared/api/v1/dto/**/*.java" />
      <zipfileset dir="../screening/${sources}" includes="ch/systemsx/cisd/openbis/plugin/screening/client/api/v1/**/*.java" />
    </zip>
  	
  </target>
	
	<target name="screening-api-eclipse">
    <mkdir dir="${dist.screening-api.lib}" />
    <recursive-jar destfile="${dist.screening-api.jar}">
      <fileset dir="${targets}/www/WEB-INF/classes">
        <include name="OpenBISScreeningML*.class" />
        <include name="ch/systemsx/cisd/common/api/**/*.class" />
        <exclude name="ch/systemsx/cisd/common/api/server/**/*.class" />
        <include name="ch/systemsx/cisd/openbis/common/api/**/*.class" />
        <exclude name="ch/systemsx/cisd/openbis/common/api/server/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/dss/client/api/v1/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/dss/generic/shared/api/v1/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/dss/generic/shared/api/authorization/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/dss/screening/shared/api/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/generic/shared/basic/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/generic/shared/api/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/generic/shared/authorization/annotation/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/plugin/screening/shared/api/**/*.class" />
       	<include name="ch/systemsx/cisd/openbis/plugin/screening/client/api/**/*.class" />
       	<include name="ch/systemsx/cisd/openbis/plugin/screening/client/cli/**/*.class" />
      </fileset>
    	<manifest>
      	<attribute name="Main-Class" value="ch.systemsx.cisd.openbis.plugin.screening.client.api.v1.ScreeningClientApiTest" />
        <attribute name="Class-Path" value="spring-ext.jar" />
        <attribute name="Version" value="${version.number}" />
        <attribute name="Build-Number"
                   value="${version.number} (r${revision.number},${clean.flag})" />
      </manifest>
    </recursive-jar>
  	<jar update="true" destfile="${dist.screening-api.jar}">
  		<fileset dir="../openbis/targets/www/WEB-INF/classes">
  		     	<include name="ch/systemsx/cisd/openbis/generic/client/cli/Login*.class" />
			     	<include name="ch/systemsx/cisd/openbis/generic/shared/api/v1/**/*.class" />
  		</fileset> 
  		<fileset dir="../datastore_server/targets/classes">
      	<include name="ch/systemsx/cisd/openbis/dss/client/api/v1/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/dss/generic/shared/api/v1/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/dss/generic/shared/api/authorization/**/*.class" />
  		</fileset> 
  		<fileset dir="../openbis-common/targets/classes">
			     	<include name="ch/systemsx/cisd/openbis/common/api/client/**/*.class" />
  		</fileset> 
      <fileset dir="../common/targets/classes">
            <include name="ch/systemsx/cisd/common/**/*.class" />
      </fileset> 
    </jar>
		<zip update="true" destfile="${dist.screening-api.jar}">
	    <zipfileset src="${lib}/gwt2.4/gwt-user.jar">
	      <include name="com/google/gwt/user/client/rpc/IsSerializable.class" />
	      <include name="com/google/gwt/user/client/rpc/SerializableException.class" />
	    </zipfileset>
	  </zip>
    <recursive-jar destfile="${dist.screening-api.lib}/spring-ext.jar">
      <zipfileset src="${lib}/spring/spring.jar" />
      <zipfileset src="${lib}/spring/third-party/stream-supporting-httpinvoker.jar" />
      <zipfileset src="${lib}/commons-logging/commons-logging.jar" />
      <zipfileset src="${lib}/commons-httpclient/commons-httpclient.jar" />
      <zipfileset src="${lib}/commons-codec/commons-codec.jar" />
      <zipfileset src="${lib}/log4j/log4j.jar" />     
      <zipfileset src="${lib}/jline/jline.jar" />     
      <zipfileset src="${lib}/cisd-args4j/cisd-args4j.jar" />     
      <zipfileset src="${lib}/cisd-base/cisd-base.jar" />     
      <zipfileset src="${lib}/jython/jython.jar" />     
  	</recursive-jar>
  	<recursive-jar destfile="${dist.screening-api-batteries-included.jar}">
      <zipfileset src="${dist.screening-api.lib}/spring-ext.jar" />
      <zipfileset src="${dist.screening-api.jar}" />
  	</recursive-jar>
	</target>

  <!-- 
  		To test the API you can use
  		   java -jar lib/openbis_screening_api.jar USER PASSWD OPENBIS_SERVER_URL
   -->
  <target name="screening-api-libs">
    <mkdir dir="${dist.screening-api.lib}" />
    <build-info revision="revision.number" version="version.number" clean="clean.flag" />
    <echo file="${build.info.file}">${version.number}:${revision.number}:${clean.flag}</echo>
    <recursive-jar destfile="${dist.screening-api.jar}">
      <fileset dir="${classes}">
        <include name="OpenBISScreeningML*.class" />
        <include name="ch/systemsx/cisd/common/api/**/*.class" />
        <exclude name="ch/systemsx/cisd/common/api/server/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/dss/client/api/v1/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/dss/generic/shared/api/v1/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/dss/generic/shared/api/authorization/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/dss/screening/shared/api/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/generic/shared/basic/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/generic/shared/api/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/generic/shared/authorization/annotation/**/*.class" />
      	<include name="ch/systemsx/cisd/openbis/plugin/screening/shared/api/**/*.class" />
       	<include name="ch/systemsx/cisd/openbis/plugin/screening/client/api/**/*.class" />
       	<include name="ch/systemsx/cisd/openbis/plugin/screening/client/cli/**/*.class" />
       	<include name="${build.info.filename}" />
      </fileset>
    	<manifest>
      	<attribute name="Main-Class" value="ch.systemsx.cisd.openbis.plugin.screening.client.api.v1.ScreeningClientApiTest" />
        <attribute name="Class-Path" value="spring-ext.jar" />
        <attribute name="Version" value="${version.number}" />
        <attribute name="Build-Number"
                   value="${version.number} (r${revision.number},${clean.flag})" />
      </manifest>
    </recursive-jar>
  	<jar update="true" destfile="${dist.screening-api.jar}">
  		<fileset dir="${classes.openbis}">
  		     	<include name="ch/systemsx/cisd/openbis/generic/client/cli/Login*.class" />
			     	<include name="ch/systemsx/cisd/openbis/generic/shared/api/v1/**/*.class" />
  		</fileset> 
  		<fileset dir="${classes.common-server}">
  		     	<include name="ch/systemsx/cisd/common/spring/HttpInvokerUtils.class" />
  		</fileset> 
      <fileset dir="${classes.common}">
            <include name="ch/systemsx/cisd/common/**/*.class" />
      </fileset> 
      <fileset dir="../openbis-common/targets/ant/classes">
            <include name="ch/systemsx/cisd/openbis-common/**/*.class" />
      </fileset> 
    </jar>
		<zip update="true" destfile="${dist.screening-api.jar}">
	    <zipfileset src="${lib}/gwt2.4/gwt-user.jar">
	      <include name="com/google/gwt/user/client/rpc/IsSerializable.class" />
	      <include name="com/google/gwt/user/client/rpc/SerializableException.class" />
	    </zipfileset>
	  </zip>
    <recursive-jar destfile="${dist.screening-api.lib}/spring-ext.jar">
      <zipfileset src="${lib}/spring/spring.jar" />
      <zipfileset src="${lib}/spring/third-party/stream-supporting-httpinvoker.jar" />
      <zipfileset src="${lib}/commons-logging/commons-logging.jar" />
      <zipfileset src="${lib}/commons-httpclient/commons-httpclient.jar" />
      <zipfileset src="${lib}/commons-codec/commons-codec.jar" />
      <zipfileset src="${lib}/log4j/log4j.jar" />     
      <zipfileset src="${lib}/jline/jline.jar" />     
      <zipfileset src="${lib}/cisd-args4j/cisd-args4j.jar" />     
      <zipfileset src="${lib}/cisd-base/cisd-base.jar" />     
      <zipfileset src="${lib}/jython/jython.jar" />     
  	</recursive-jar>
  	<recursive-jar destfile="${dist.screening-api-batteries-included.jar}">
      <zipfileset src="${dist.screening-api.lib}/spring-ext.jar" />
      <zipfileset src="${dist.screening-api.jar}" />
  	</recursive-jar>
    <copy todir="${dist.screening-api}">
      <fileset dir="../screening/dist/api" />
    </copy>
  </target>

	<target name="screening-api" depends="screening-api-doc, screening-api-libs" >
     <zip destfile="${dist}/openBIS-screening-API-${version.number}-r${revision.number}.zip">
      <zipfileset dir="${dist.screening-api}" includes="**" />
     </zip>
    <delete dir="${dist.screening-api}" />
  </target>

  
  <!-- ++++++++++++++++++++++++++++++ END API ++++++++++++++++++++++++++++++ -->
  
  <!-- ++++++++++++++++++++++++++++++ ECLIPSE TEST MODE ++++++++++++++++++++++++++++++ -->

  <!-- This is a copy of the openBIS version, the only difference is the value of ecp.gwt variable  -->
  
  <!--
    // // Run the production mode, assuming compile-module-test has already been run // // Must pass in
    module-test.path, module-test.module, and module-test.db-kind as arguments // e.g., // <{property,param}
    name="module-test.path" value="openbis-test" /> // <{property,param} name="module-test.module"
    value="ch.systemsx.cisd.openbis.OpenBIS" /> //
  -->
  <target name="screening-run-module-test" description="Run the module test mode">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
      <classpath>
        <pathelement location="${sources}" />
        <pathelement location="../openbis/${sources}" />
        <pathelement path="${ecp}" />
  
      <pathelement path= "${ecp.gwt}" />
        <pathelement location="${gwt.lib}/gwt-dev.jar" />
        <pathelement location="${gwt.lib}/gwt-user.jar" />
      </classpath>
      <jvmarg value="-Xmx512M" />
      <jvmarg value="-ea" />
      <sysproperty key="log4j.configuration" file="etc/log.xml" />
      <sysproperty key="javax.net.ssl.trustStore" file="dist/server/openBIS.keystore" />
      <sysproperty key="org.mortbay.util.FileResource.checkAliases" value="false" />

      <!-- Arguments to com.google.gwt.dev.DevMode -->
      <!-- Provide two startup urls : one for the compiled version, one for the normal dev version -->
      <arg value="-startupUrl" />
      <arg value="${module-test.path}/index.html" />
      <arg value="-startupUrl" />
      <arg value="${module-test.module}/index.html" />

      <arg value="${module-test.module}" />
      <arg value="-war" />
      <arg value="targets/www" />
      <arg value="-logLevel" />
      <arg value="WARN" />
    </java>
  </target>

	<!-- 
		Use this only if you want to use image viewer (screening.jar needs to be created and it slows down the build process).
		Otherwise use screening-test-compile-and-run.
	-->
	<target name="screening-test-compile-and-run-with-image-viewer" description="Compile and run the screening openbis from Eclipse with support for image viewer">
	    <antcall target="compile-module-test">
	      <param name="module-test.path" value="openbis-test-screening" />
	      <param name="module-test.module" value="ch.systemsx.cisd.openbis.plugin.screening.OpenBIS" />
	    </antcall>
	  	<antcall target="jar"/>
		  <copy todir="${targets.www}/openbis-test-screening">
		  	<fileset dir="${targets.www}/ch.systemsx.cisd.openbis.plugin.screening.OpenBIS">
		  		<include name="*.jar"/>
		  	</fileset>
		  </copy>
	    <antcall target="screening-test-run" />
  </target>
	
	<target name="screening-test-compile-and-run" description="Compile and run the screening openbis from Eclipse (no support for image viewer)">
	    <antcall target="compile-module-test">
	      <param name="module-test.path" value="openbis-test-screening" />
	      <param name="module-test.module" value="ch.systemsx.cisd.openbis.plugin.screening.OpenBIS" />
	    </antcall>
	    <antcall target="screening-test-run" />
	  </target>

	<target name="screening-test-compile-no-run" description="Compile the screening openbis from Eclipse (no support for image viewer)">
	    <antcall target="compile-module-test">
	      <param name="module-test.path" value="openbis-test-screening" />
	      <param name="module-test.module" value="ch.systemsx.cisd.openbis.plugin.screening.OpenBIS" />
	    </antcall>
	  </target>
		
  <target name="screening-test-run" description="run the screening openbis from Eclipse">
    <antcall target="screening-run-module-test">
      <param name="module-test.path" value="openbis-test-screening" />
      <param name="module-test.module" value="ch.systemsx.cisd.openbis.plugin.screening.OpenBIS" />
    </antcall>
  </target>
  
  <!-- ++++++++++++++++++++++++++++++ END ECLIPSE TEST MODE ++++++++++++++++++++++++++++++ -->
  
</project>