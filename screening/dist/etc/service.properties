# Unique code of this Data Store Server. Not more than 40 characters.
data-store-server-code = dss-screening

# host name of the machine on which the datastore server is running
host-address = https://localhost

# parent directory of the store directory and all the dropboxes
root-dir = data

# The root directory of the data store
storeroot-dir = ${root-dir}/store

# The directory where the command queue file is located; defaults to storeroot-dir 
commandqueue-dir =

# Port
port = 8444
use-ssl = true

# Session timeout in minutes
session-timeout = 720

# Path to the keystore
keystore.path = etc/openBIS.keystore
# Password of the keystore
keystore.password = changeit
# Key password of the keystore
keystore.key-password = changeit

# The check interval (in seconds)
check-interval = 60

# The time-out for clean up work in the shutdown sequence (in seconds).
# Note that that the maximal time for the shutdown sequence to complete can be as large 
# as twice this time.
# Remark: On a network file system, it is not recommended to turn this value to something 
# lower than 180.
shutdown-timeout = 180

# If free disk space goes below value defined here, a notification email will be sent.
# Value must be specified in kilobytes (1048576 = 1024 * 1024 = 1GB). If no high water mark is
# specified or if value is negative, the system will not be watching.
highwater-mark = -1

# If a data set is successfully registered it sends out an email to the registrator. 
# If this property is not specified, no email is sent to the registrator. This property
# does not affect the mails which are sent, when the data set could not be registered.
notify-successful-registration = false

# The URL of the openBIS server
server-url = ${host-address}:8443

# The username to use when contacting the openBIS server
username = etlserver

# The password for the etlserver user who contacts the openBIS server
password = etlserver_password

# The base URL for Web client access to the data store server.
download-url = ${host-address}:${port}

# SMTP properties (must start with 'mail' to be considered).
# The current configuration saves the emails in the file system in the root directory 
mail.smtp.host = file://${root-dir}
# mail.smtp.host = localhost
# mail.from = datastore_server@ethz.ch
# mail.smtp.user = 
# mail.smtp.password = 

# ---------------------------------------------------------------------------
# (optional) archiver configuration
# ---------------------------------------------------------------------------

# Configuration of an archiver task. All properties are prefixed with 'archiver.'.

# Archiver class specification (together with the list of packages this class belongs to).
#archiver.class = ch.systemsx.cisd.openbis.dss.generic.server.plugins.demo.DemoArchiver

# ---------------------------------------------------------------------------
#                      INTERNAL CONFIGURATION, 
# Do not change this part unless you are developing openBIS extensions.
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
# screening database specification
# ---------------------------------------------------------------------------

data-sources = imaging-db
imaging-db.databaseEngineCode = postgresql
imaging-db.basicDatabaseName = imaging
imaging-db.databaseKind = productive

# ---------------------------------------------------------------------------
# reporting and processing plugins configuration
# ---------------------------------------------------------------------------

# Comma separated names of reporting plugins. Each plugin should have configuration properties prefixed with its name.
reporting-plugins =  default-plate-image-analysis, plate-image-analysis-graph, plate-image-params-reporter

default-plate-image-analysis.label = Image Analysis Results
default-plate-image-analysis.dataset-types = HCS_IMAGE_ANALYSIS_DATA, HCS_ANALYSIS_PER_GENE
default-plate-image-analysis.class = ch.systemsx.cisd.openbis.dss.generic.server.plugins.ImageAnalysisMergedRowsReportingPlugin
default-plate-image-analysis.properties-file =

plate-image-analysis-graph.label = Image Analysis Graphs
plate-image-analysis-graph.dataset-types = HCS_IMAGE_ANALYSIS_DATA, HCS_ANALYSIS_PER_GENE
plate-image-analysis-graph.class = ch.systemsx.cisd.openbis.dss.generic.server.plugins.ImageAnalysisGraphReportingPlugin
plate-image-analysis-graph.servlet-path = datastore_server_graph/
plate-image-analysis-graph.properties-file = etc/tabular-data-graph.properties

# Label of the plugin which will be shown for the users.
plate-image-params-reporter.label = Plate Image Parameters
# Comma separated list of dataset type codes which can be handled by this plugin.
plate-image-params-reporter.dataset-types = HCS_IMAGE
# Plugin class specification (together with the list of packages this class belongs to).
plate-image-params-reporter.class = ch.systemsx.cisd.openbis.dss.generic.server.plugins.ScreeningPlateImageParamsReportingPlugin
# The property file. Its content will be passed as a parameter to the plugin.
plate-image-params-reporter.properties-file = 

# ---------------------------------------------------------------------------
# screening specific extension servlets 
# ---------------------------------------------------------------------------

# list of additional web servlets which will be exposed
plugin-services = screening-image-download-servlet, tabular-data-graph-servlet, screening-dss-api-exporter-servlet

# class of the web servlet
screening-image-download-servlet.class = ch.systemsx.cisd.openbis.dss.generic.server.MergingImagesDownloadServlet
# URL which will be mapped to this servlet
screening-image-download-servlet.path = /datastore_server_screening/*

tabular-data-graph-servlet.class = ch.systemsx.cisd.openbis.dss.generic.server.TabularDataGraphServlet
tabular-data-graph-servlet.path = /datastore_server_graph/*
tabular-data-graph-servlet.properties-file = etc/tabular-data-graph.properties

# expose an DSS API interface with RPC
screening-dss-api-exporter-servlet.class = ch.systemsx.cisd.openbis.dss.generic.server.DssScreeningApiServlet
screening-dss-api-exporter-servlet.path = /rmi-datastore-server-screening-api-v1/*

# ---------------------------------------------------------------------------

maintenance-plugins=data-set-clean-up
# hierarchical-storage-updater, feature-migrator, bds-migrator

# the plugin which is run periodically to create a mirror structure of the store with the same files
# but with user-readable structure of directories  
hierarchical-storage-updater.class = ch.systemsx.cisd.etlserver.plugins.HierarchicalStorageUpdater
# specified in seconds. Here : every day
hierarchical-storage-updater.interval = 86400
hierarchical-storage-updater.hierarchy-root-dir = ${root-dir}/hierarchical-store

# Removes data sets deleted from openBIS also from imaging database
data-set-clean-up.class = ch.systemsx.cisd.etlserver.plugins.DataSetDeletionMaintenanceTask
# specified in seconds. Here : every day
data-set-clean-up.interval = 86400
data-set-clean-up.data-source = imaging-db

bds-migrator.class = ch.systemsx.cisd.etlserver.plugins.ChainedDataSetMigrationTask
bds-migrator.execute-only-once = true
bds-migrator.storeRoot = ${storeroot-dir}
#bds-migrator.migrators = bds-image-db, bds-original-relocator, bds-remover
bds-migrator.migrators = bds-image-db
bds-migrator.bds-image-db.class = ch.systemsx.cisd.openbis.dss.etl.bdsmigration.BDSImagingDatabaseMigrator
bds-migrator.bds-image-db.data-source = imaging-db
bds-migrator.bds-image-db.channel-names = dapi, gfp
#bds-migrator.bds-image-db.extract-single-image-channels = BLUE, GREEN
bds-migrator.bds-original-relocator.class = ch.systemsx.cisd.openbis.dss.etl.bdsmigration.BDSOriginalDataRelocatorMigrator
bds-migrator.bds-remover.class = ch.systemsx.cisd.openbis.dss.etl.bdsmigration.BDSDataRemoverMigrator

feature-migrator.class = ch.systemsx.cisd.etlserver.plugins.ChainedDataSetMigrationTask
feature-migrator.execute-only-once = true
feature-migrator.storeRoot = ${storeroot-dir}
feature-migrator.migrators = csv, genedata
feature-migrator.csv.class = ch.systemsx.cisd.openbis.dss.etl.featurevector.CsvFeatureVectorMigrator
feature-migrator.csv.data-source = imaging-db
# semi-colon (;) by default 
#feature-migrator.csv.separator = ,
#feature-migrator.csv.ignore-comments = true
#feature-migrator.csv.well-name-row = row
#feature-migrator.csv.well-name-col = col
#feature-migrator.csv.well-name-col-is-alphanum = true
feature-migrator.genedata.class = ch.systemsx.cisd.openbis.dss.etl.genedata.GenedataFeatureVectorMigrator
feature-migrator.genedata.data-source = imaging-db

# ---------------------------------------------------------------------------
#                      DROPBOXES CONFIGURATION 
# ---------------------------------------------------------------------------

incoming-root-dir = ${root-dir}

# Globally used separator character which separates entities in a data set file name 
data-set-file-name-entity-separator = _

# The period of no write access that needs to pass before an incoming data item is considered 
# complete and ready to be processed (in seconds) [default: 300]. 
# Valid only when auto-detection method is used to determine if an incoming data are ready to be processed.
quiet-period = 300

# code of the default space in openBIS to which the data will be imported
import-space-code = DEMO

# Comma separated names of processing threads. Each thread should have configuration properties prefixed with its name.
# E.g. 'code-extractor' property for the thread 'my-etl' should be specified as 'my-etl.code-extractor'
inputs=merged-channels-images, split-channels-images, image-analysis-results

# ---------------------------------------------------------------------------

# The directory to watch for incoming data.
merged-channels-images.incoming-dir = ${incoming-root-dir}/incoming-images-merged-channels
merged-channels-images.incoming-data-completeness-condition = auto-detection

# The extractor class to use for code extraction
merged-channels-images.data-set-info-extractor = ch.systemsx.cisd.etlserver.DefaultDataSetInfoExtractor
merged-channels-images.data-set-info-extractor.entity-separator = .
merged-channels-images.data-set-info-extractor.index-of-sample-code = 0
merged-channels-images.data-set-info-extractor.index-of-data-producer-code = 
merged-channels-images.data-set-info-extractor.space-code = ${import-space-code}

# The extractor class to use for type extraction
merged-channels-images.type-extractor = ch.systemsx.cisd.etlserver.SimpleTypeExtractor
merged-channels-images.type-extractor.file-format-type = JPG
merged-channels-images.type-extractor.locator-type = RELATIVE_LOCATION
merged-channels-images.type-extractor.data-set-type = HCS_IMAGE
merged-channels-images.type-extractor.is-measured = true

merged-channels-images.storage-processor = ch.systemsx.cisd.openbis.dss.etl.PlateStorageProcessor
# Should the thumbnails be generated? 
# It slows down the dataset registration, but increases the performance when the user wants to see the image. 
# Can be 'true' or 'false', 'false' is the default value
merged-channels-images.storage-processor.generate-thumbnails = false
# Thumbnails size in pixels
# merged-channels-images.storage-processor.thumbnail-max-width = 300
# merged-channels-images.storage-processor.thumbnail-max-height = 200
# Names of the channels in which images have been acquired.
merged-channels-images.storage-processor.channel-names = gfp, dapi
# Format: [width]>x[height], e.g. 3x4. Specifies the grid into which a microscope divided the well to acquire images.
merged-channels-images.storage-processor.well_geometry = 3x3
# implementation of the IHCSImageFileExtractor interface which maps images to the location on the plate and particular channel
# Here: the extractor requireds that each image name should adhere to the schema:
#     <any-text>_<plate-code>_<well-code>_<tile-code>_<channel-name>.<allowed-image-extension>
merged-channels-images.storage-processor.file-extractor = ch.systemsx.cisd.openbis.dss.etl.HCSImageFileExtractor
# specification of the imaging db
merged-channels-images.storage-processor.data-source = imaging-db
# Optional comma separated list of color components. 
# Available values: RED, GREEN or BLUE. 
# If specified then the channels are extracted from the color components and override 'file-extractor' results.
merged-channels-images.storage-processor.extract-single-image-channels = GREEN, BLUE

# ---------------------------------------------------------------------------

# The directory to watch for incoming data.
split-channels-images.incoming-dir = ${incoming-root-dir}/incoming-images-split-channels
split-channels-images.incoming-data-completeness-condition = auto-detection

# The extractor class to use for code extraction
split-channels-images.data-set-info-extractor = ch.systemsx.cisd.etlserver.DefaultDataSetInfoExtractor
split-channels-images.data-set-info-extractor.entity-separator = ${data-set-file-name-entity-separator}
split-channels-images.data-set-info-extractor.index-of-sample-code = -1
split-channels-images.data-set-info-extractor.index-of-data-producer-code = 1
split-channels-images.data-set-info-extractor.index-of-data-production-date = 0
split-channels-images.data-set-info-extractor.space-code = ${import-space-code}

# The extractor class to use for type extraction
split-channels-images.type-extractor = ch.systemsx.cisd.etlserver.SimpleTypeExtractor
split-channels-images.type-extractor.file-format-type = JPG
split-channels-images.type-extractor.locator-type = RELATIVE_LOCATION
split-channels-images.type-extractor.data-set-type = HCS_IMAGE
split-channels-images.type-extractor.is-measured = true

split-channels-images.storage-processor = ch.systemsx.cisd.openbis.dss.etl.PlateStorageProcessor
split-channels-images.storage-processor.generate-thumbnails = false
split-channels-images.storage-processor.channel-names = gfp, dapi
split-channels-images.storage-processor.well_geometry = 3x3
split-channels-images.storage-processor.file-extractor = ch.systemsx.cisd.openbis.dss.etl.HCSImageFileExtractor
split-channels-images.storage-processor.data-source = imaging-db

# ---------------------------------------------------------------------------

# The directory to watch for incoming data.
image-analysis-results.incoming-dir = ${incoming-root-dir}/incoming-analysis
image-analysis-results.incoming-data-completeness-condition = auto-detection

# The extractor class to use for code extraction
image-analysis-results.data-set-info-extractor = ch.systemsx.cisd.etlserver.DefaultDataSetInfoExtractor
# Separator used to extract the barcode in the data set file name
image-analysis-results.data-set-info-extractor.entity-separator = .
image-analysis-results.data-set-info-extractor.index-of-sample-code = 0
image-analysis-results.data-set-info-extractor.space-code = ${import-space-code}

# The extractor class to use for type extraction
image-analysis-results.type-extractor = ch.systemsx.cisd.etlserver.SimpleTypeExtractor
image-analysis-results.type-extractor.file-format-type = CSV
image-analysis-results.type-extractor.locator-type = RELATIVE_LOCATION
image-analysis-results.type-extractor.data-set-type = HCS_IMAGE_ANALYSIS_DATA
image-analysis-results.type-extractor.is-measured = false

# The storage processor (IStorageProcessor implementation)
image-analysis-results.storage-processor = ch.systemsx.cisd.openbis.dss.etl.featurevector.FeatureVectorStorageProcessor
image-analysis-results.storage-processor.processor = ch.systemsx.cisd.etlserver.DefaultStorageProcessor
image-analysis-results.storage-processor.data-source = imaging-db
# semi-colon (;) by default 
image-analysis-results.storage-processor.separator = ,
image-analysis-results.storage-processor.ignore-comments = true
image-analysis-results.storage-processor.well-name-row = row
image-analysis-results.storage-processor.well-name-col = col
image-analysis-results.storage-processor.well-name-col-is-alphanum = true
