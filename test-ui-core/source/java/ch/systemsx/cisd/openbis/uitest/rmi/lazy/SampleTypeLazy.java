/*
 * Copyright ETH 2012 - 2023 ZÃ¼rich, Scientific IT Services
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ch.systemsx.cisd.openbis.uitest.rmi.lazy;

import java.util.Collection;
import java.util.List;

import ch.systemsx.cisd.openbis.generic.shared.ICommonServer;
import ch.systemsx.cisd.openbis.uitest.type.PropertyTypeAssignment;
import ch.systemsx.cisd.openbis.uitest.type.SampleType;
import ch.systemsx.cisd.openbis.uitest.type.Script;

/**
 * @author anttil
 */
public class SampleTypeLazy extends SampleType
{

    private String code;

    private String session;

    private ICommonServer commonServer;

    private ch.systemsx.cisd.openbis.generic.shared.basic.dto.SampleType lazySampleType;

    public SampleTypeLazy(String code, String session, ICommonServer commonServer)
    {
        this.code = code;
        this.session = session;
        this.commonServer = commonServer;

    }

    private ch.systemsx.cisd.openbis.generic.shared.basic.dto.SampleType loadSampleType()
    {
        if (lazySampleType == null)
        {
            List<ch.systemsx.cisd.openbis.generic.shared.basic.dto.SampleType> types =
                    commonServer.listSampleTypes(session);
            for (ch.systemsx.cisd.openbis.generic.shared.basic.dto.SampleType type : types)
            {
                if (type.getCode().equalsIgnoreCase(code))
                {
                    lazySampleType = type;
                    break;
                }
            }

            if (lazySampleType == null)
            {
                throw new IllegalStateException("Sample type with code " + code + " does not exist");
            }
        }

        return this.lazySampleType;
    }

    @Override
    public String getCode()
    {
        return this.code;
    }

    @Override
    public String getDescription()
    {
        return loadSampleType().getDescription();
    }

    @Override
    public boolean isListable()
    {
        return loadSampleType().isListable();
    }

    @Override
    public boolean isShowContainer()
    {
        return loadSampleType().isShowContainer();
    }

    @Override
    public boolean isShowParents()
    {
        return loadSampleType().isShowParents();
    }

    @Override
    public boolean isUniqueSubcodes()
    {
        return loadSampleType().isSubcodeUnique();
    }

    @Override
    public boolean isGenerateCodes()
    {
        return loadSampleType().isAutoGeneratedCode();
    }

    @Override
    public boolean isShowParentMetadata()
    {
        return loadSampleType().isShowParentMetadata();
    }

    @Override
    public String getGeneratedCodePrefix()
    {
        return loadSampleType().getGeneratedCodePrefix();
    }

    @Override
    public Collection<PropertyTypeAssignment> getPropertyTypeAssignments()
    {
        throw new UnsupportedOperationException("to be implemented");
    }

    @Override
    public Script getValidationScript()
    {
        throw new UnsupportedOperationException();
    }
}
