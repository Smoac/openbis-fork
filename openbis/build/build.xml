<project name="openbis" basedir="..">
    <import file="../../server-common/build/build-common.xml" />
    <project-classpath name="ecp" classes="${classes}" />

    <property name="mainfolder" value="openbis" />

    <property name="gwt.lib" value="${lib}/gwt1.5" />
    <property name="gwt.dev.lib" value="${gwt.lib}/mac/gwt-dev-mac.jar" />
    <property name="gwt.user.lib" value="${gwt.lib}/gwt-user.jar" />
    <property name="gwt.tomcat.web-inf"
              value="../${ant.project.name}/tomcat/webapps/ROOT/WEB-INF" />

    <property name="application.server.resource"
              value="../${ant.project.name}/${server-resource}" />

    <property name="webapp.dist" value="${dist}/webapp" />
    <property name="webapp.dist.web-inf" value="${webapp.dist}/WEB-INF" />

    <property name="jar.file.name" value="${ant.project.name}.jar" />
    <property name="jar.file" value="${dist}/${jar.file.name}" />

    <property name="webapp.file.name" value="generic${ant.project.name}.war" />
    <property name="webapp.file" value="${dist}/${webapp.file.name}" />

    <!-- 
      // Cleans distribution directory.
      -->
    <target name="clean" description="Cleans distribution directory.">
        <delete dir="${dist}" failonerror="true" />
        <mkdir dir="${dist}" />
    </target>

    <!-- 
      // Runs tests.
      -->
    <target name="run-tests">
        <antcall target="build-common.run-tests">
            <param name="test.suite" value="tests.xml" />
        </antcall>
    </target>

    <!-- 
      // Runs system tests (only on Linux)
      -->
    <target name="run-system-tests" depends="prepare-gwt">
        <delete dir="${output.test}" />
        <mkdir dir="${output.test}" />
        <junit dir="." fork="true" forkmode="once" maxmemory="512m" showoutput="true">
            <classpath>
                <pathelement location="${sources}" />
                <pathelement location="${sources.test}" />
                <pathelement path="${ecp}" />
                <pathelement location="${gwt.lib}/linux/gwt-dev-linux.jar" />
            </classpath>
            <jvmarg value="-ea" />
            <sysproperty key="authentication-service" value="file-authentication-service" />
            <sysproperty key="log4j.configuration" value="etc/log.xml" />
            <sysproperty key="database.create-from-scratch" value="true" />
            <sysproperty key="database.kind" value="system_test" />
            <sysproperty key="script-folder" value="sourceTest" />
            <sysproperty key="mass-upload-folder" value="sourceTest/sql/postgresql" />
            <formatter type="xml" />
            <test name="ch.systemsx.cisd.openbis.generic.SystemTestSuite" todir="${output.test}" />
        </junit>
    </target>

    <!-- 
      // Makes a distribution file.
      -->
    <target name="dist" description="Makes a distribution file." depends="clean, war">

        <property name="dist.file.name"
                  value="${ant.project.name}-${version.number}-r${revision.number}.zip" />
        <property name="jetty.path" value="${lib}/jetty" />
        <property name="zipped.dir" value="${dist}/${ant.project.name}" />

        <mkdir dir="${zipped.dir}" />
        <move file="${webapp.file}" todir="${zipped.dir}" />

        <copy file="${jetty.path}/jetty.zip" todir="${zipped.dir}" />
        <copy file="${jetty.path}/version.txt" tofile="${zipped.dir}/jetty-version.txt">
            <filterchain>
                <striplinebreaks />
            </filterchain>
        </copy>
        <!--
          // Although there is already one 'service.properties' and 'log.xml' in the war, we need one here that
          // can be configured by the administrator. The idea is to replace the one in the war with it in the
          // 'install.sh' script.
          -->
        <copy todir="${zipped.dir}">
            <fileset dir="${original.dist}/etc">
                <include name="*" />
            </fileset>
        </copy>
        <!-- Copy all files but '*.sh'. -->
        <copy todir="${zipped.dir}">
            <fileset dir="${original.dist.server}">
                <exclude name="*.sh" />
            </fileset>
        </copy>

        <zip basedir="${dist}" destfile="${dist}/${dist.file.name}">
            <zipfileset file="${original.dist.server}/*.sh"
                        filemode="755"
                        prefix="${ant.project.name}" />
        </zip>

        <!-- Does some cleaning. -->
        <delete failonerror="true" includeemptydirs="true">
            <fileset dir="${dist}">
                <exclude name="${dist.file.name}" />
            </fileset>
        </delete>
    </target>

    <!--
      // Task for continuous integration server.
      -->
    <target name="ci"
            depends="build-common.ci, check-dependencies, dist"
            description="Task for continuous integration server." />

    <!--
      // Nightly build task for continuous integration server.
      -->
    <target name="nightly-build"
            depends="build-common.ci, run-system-tests, dist"
            description="Nightly build task for continuous integration server." />

    <!--
      // Compiles the javascript using GWT compiler.
      -->
    <target name="compile-javascript" depends="prepare-web-client" description="Compiles the javascript using GWT compiler.">
        <property name="application.gwt.path" value="ch.systemsx.cisd.openbis.OpenBIS" />
        <echo>
        </echo>
        <delete dir="${webapp.dist}" />
        <java classpath="${ecp}:${gwt.dev.lib}:${gwt.user.lib}:${sources}"
              classname="com.google.gwt.dev.GWTCompiler"
              fork="true">
            <jvmarg value="-Xmx512M" />
            <arg value="-out" />
            <arg value="${webapp.dist}" />
            <arg value="${application.gwt.path}" />
        </java>
        <move todir="${webapp.dist}">
            <fileset dir="${webapp.dist}/${application.gwt.path}" />
        </move>
    </target>

    <!--
      // Creates build information.
      -->
    <target name="build-info" description="Creates build information.">
        <build-info revision="revision.number" version="version.number" clean="clean.flag" />
        <echo file="${build.info.file}">${version.number}:${revision.number}:${clean.flag}</echo>
    </target>

    <!--
      // Override 'prepare-gwt' target by writing out 'OpenBIS.gwt.xml' and updating 'ClientPluginProvider.java'.
      -->
    <target name="prepare-gwt"
            depends="server-common-common.prepare-gwt"
            description="Override 'prepare-gwt' by writing out 'OpenBIS.gwt.xml' and updating 'ClientPluginProvider.java'.">
        <antcall target="prepare-web-client" />
    </target>

    <!--
      // Updates 'ClientPluginProvider.java' and 'OpenBIS.gwt.xml' with requested plugins.
      -->
    <target name="prepare-web-client"
            description="Updates 'ClientPluginProvider.java' and 'OpenBIS.gwt.xml' with requested plugins.">
        <java classname="ch.systemsx.cisd.openbis.generic.shared.util.WebClientFilesUpdater"
              classpath="${ecp}:${sources}"
              fork="true"
              failonerror="true">
            <arg value="${sources}" />
        </java>
    </target>

    <!--
      // Creates JAR file.
      -->
    <target name="jar" depends="compile, build-info" description="Creates project jar file.">
        <delete file="${jar.file}" />
        <recursive-jar destfile="${jar.file}">
            <fileset dir="${classes}">
                <include name="**/*.class" />
                <!-- Exclude 'service.properties' and 'log.xml' file. -->
                <exclude name="service.properties" />
                <exclude name="log.xml" />
                <include name="**/*.properties" />
                <include name="${build.info.filename}" />
            </fileset>
        </recursive-jar>
    </target>

    <!--
      // Creates WAR file.
      -->
    <target name="war" depends="jar, compile-javascript" description="Creates project war file.">
        <mkdir dir="${webapp.dist.web-inf}" />
        <copy todir="${webapp.dist.web-inf}">
            <fileset dir="${application.server.resource}">
                <include name="spring-servlet.xml" />
            </fileset>
            <fileset dir="../server-common/${server-resource}">
                <include name="web-common.xml" />
            </fileset>
        </copy>
        <!-- Create an empty 'gwt.xml' file. -->
        <echo file="${webapp.dist.web-inf}/gwt.xml" message="" />
        <war warfile="${webapp.file}" webxml="${application.server.resource}/web.xml">
            <fileset dir="${webapp.dist}" />
            <classes dir="source">
                <include name="**/*.sql" />
            </classes>
            <!-- Add 'applicationContext.xml' and related files. -->
            <classes dir="../server-common/${sources}">
                <include name="**/*.xml" />
            </classes>
            <classes dir="${sources}">
                <include name="**/*.xml" />
            </classes>
            <lib dir="${dist}">
                <include name="${jar.file.name}" />
            </lib>
            <lib dir="${lib}/commons-lang">
                <include name="commons-lang.jar" />
            </lib>
            <lib dir="${lib}/commons-logging">
                <include name="*.jar" />
            </lib>
            <lib dir="${lib}/commons-io">
                <include name="commons-io.jar" />
            </lib>
            <lib dir="${lib}/jline">
                <include name="jline.jar" />
            </lib>
            <lib dir="${lib}/commons-codec">
                <include name="commons-codec.jar" />
            </lib>
            <lib dir="${lib}/commons-httpclient">
                <include name="commons-httpclient.jar" />
            </lib>
            <lib dir="${lib}/log4j">
                <include name="log4j.jar" />
            </lib>
            <lib dir="${lib}/spring">
                <include name="spring.jar" />
            </lib>
            <lib dir="${lib}/spring/webmvc">
                <include name="spring-webmvc.jar" />
            </lib>
            <lib dir="${lib}/activation">
                <include name="activation.jar" />
            </lib>
            <lib dir="${lib}/mail">
                <include name="mail.jar" />
            </lib>
            <lib dir="${gwt.lib}">
                <include name="gwt-servlet.jar" />
            </lib>
            <!-- Database -->
            <lib dir="${lib}/postgresql">
                <include name="postgresql.jar" />
            </lib>
            <lib dir="${lib}/commons-dbcp">
                <include name="commons-dbcp.jar" />
            </lib>
            <lib dir="${lib}/commons-pool">
                <include name="commons-pool.jar" />
            </lib>
            <!-- Hibernate -->
            <lib dir="${lib}/antlr">
                <include name="antlr.jar" />
            </lib>
            <lib dir="${lib}/commons-collections">
                <include name="commons-collections.jar" />
            </lib>
            <lib dir="${lib}/dom4j">
                <include name="dom4j.jar" />
            </lib>
            <lib dir="${lib}/hibernate">
                <include name="hibernate3.jar" />
            </lib>
            <lib dir="${lib}/hibernate/jta">
                <include name="jta.jar" />
            </lib>
            <lib dir="${lib}/ehcache">
                <include name="ehcache.jar" />
            </lib>
            <lib dir="${lib}/cglib">
                <include name="asm.jar" />
                <include name="asm-attrs.jar" />
                <include name="cglib.jar" />
            </lib>
            <lib dir="${lib}/hibernate-annotations">
                <include name="*.jar" />
            </lib>
            <lib dir="${lib}/hibernate-validator">
                <include name="*.jar" />
            </lib>
            <lib dir="${lib}/javassist">
                <include name="*.jar" />
            </lib>
            <lib dir="${lib}/slf4j">
                <include name="*.jar" />
                <exclude name="src.jar" />
            </lib>
            <lib dir="${lib}/slf4j/log4j12">
                <include name="*.jar" />
                <exclude name="src.jar" />
            </lib>
            <!-- Beanlib -->
            <lib dir="${lib}/beanlib">
                <include name="beanlib.jar" />
            </lib>
            <lib dir="${lib}/beanlib-hibernate">
                <include name="beanlib-hibernate.jar" />
            </lib>
        </war>
        <!-- Does some cleaning. -->
        <delete file="${jar.file}" failonerror="true" />
        <delete dir="${webapp.dist}" failonerror="true" />
    </target>
</project>