<project name="openbis" default="dist" basedir="..">
	<import file="../../server-common/build/build-common.xml" />
	<project-classpath name="ecp" classes="${classes}" />
	<project-classpath name="eclipse.cp" classes="${targets}/classes" />

	<property name="mainfolder" value="openbis" />

	<property name="gwt.lib" value="${lib}/gwt1.5" />
	<property name="gwt.dev.lib" value="${gwt.lib}/mac/gwt-dev-mac.jar" />
	<property name="gwt.user.lib" value="${gwt.lib}/gwt-user.jar" />
	<property name="gwt.tomcat.web-inf"
              value="../${ant.project.name}/tomcat/webapps/ROOT/WEB-INF" />

	<property name="original.server.dist" value="${original.dist}/server" />
	<property name="original.openbis.server.dist" value="../openbis/dist/server" />
	<property name="server.folder.name" value="openBIS-server" />
	<property name="server.dist" value="${dist}/${server.folder.name}" />
	<property name="server.jar.file.name" value="openBIS.jar" />
	<property name="server.jar.file" value="${server.dist}/${server.jar.file.name}" />
	<property name="server.webapp.file" value="${server.dist}/openBIS.war" />
	<property name="server.service" value="${server.dist}/service" />
	<property name="server.service.lib" value="${server.service}/lib" />
	<property name="application.server.resource"
              value="../${ant.project.name}/${server-resource}" />

	<property name="webapp.dist" value="${dist}/webapp" />
	<property name="webapp.dist.web-inf" value="${webapp.dist}/WEB-INF" />

	<property name="jar.file.name" value="${ant.project.name}.jar" />
	<property name="jar.file" value="${dist}/${jar.file.name}" />

	<property name="webapp.file.name" value="openBIS.war" />
	<property name="webapp.file" value="${server.dist}/${webapp.file.name}" />

	<!-- 
      // Cleans distribution directory.
      -->
	<target name="clean" description="Cleans distribution directory.">
		<delete dir="${dist}" failonerror="true" />
		<mkdir dir="${dist}" />
	</target>

	<!-- 
      // Runs tests.
      -->
	<target name="run-tests">
		<antcall target="build-common.run-tests">
			<param name="test.suite" value="tests.xml" />
		</antcall>
	</target>

	<!-- 
      // Runs system tests (only on Linux)
      -->
	<target name="run-system-tests" depends="prepare-gwt, compile-tests">
		<delete dir="${output.test}" />
		<mkdir dir="${output.test}" />
		<junit dir="." fork="true" forkmode="once" maxmemory="512m" showoutput="true" failureproperty="tests-failed">
			<classpath>
				<pathelement location="${sources}" />
				<pathelement location="${sources.test}" />
				<pathelement path="${ecp}" />
				<pathelement location="${gwt.lib}/linux/gwt-dev-linux.jar" />
			</classpath>
			<jvmarg value="-ea" />
			<sysproperty key="authentication-service" value="file-authentication-service" />
			<sysproperty key="database.create-from-scratch" value="true" />
			<sysproperty key="database.kind" value="system_test" />
			<sysproperty key="script-folder" value="sourceTest" />
			<sysproperty key="mass-upload-folder" value="sourceTest/sql/postgresql" />
			<sysproperty key="log4j.configuration" value="etc/log.xml" />
			<sysproperty key="hibernate.search.index-base" value="sourceTest/lucene/indices" />
			<sysproperty key="hibernate.search.index-mode" value="NO_INDEX" />
			<sysproperty key="hibernate.search.indexing_strategy" value="manual" />
			<sysproperty key="data-store-server-base-url" value="https://localhost:8889" />
			<formatter type="xml" />
			<test name="ch.systemsx.cisd.openbis.generic.SystemTestSuite" todir="${output.test}" />
		</junit>
		<fail>
			<condition>
				<isset property="tests-failed"/>
			</condition>
		</fail>

	</target>

	<!-- 
      // Makes a distribution file.
      -->

	<target name="dist" description="Makes a distribution file." depends="clean, war">
		<copy file="${lib}/tomcat5/apache-tomcat.zip" todir="${server.dist}" />
		<loadfile property="tomcat.version" srcFile="${lib}/tomcat5/version.txt">
			<filterchain>
				<striplinebreaks />
			</filterchain>
		</loadfile>
		<echo file="${server.dist}/tomcat-version.txt">${tomcat.version}</echo>
		<copy file="${original.openbis.server.dist}/server.xml" todir="${server.dist}" />
		<copy file="${original.server.dist}/service.properties" todir="${server.dist}" />
		<copy file="${original.server.dist}/openbis.conf" todir="${server.dist}" />
		<copy file="${original.openbis.server.dist}/openBIS.keystore" todir="${server.dist}" />
		<copy file="${original.openbis.server.dist}/passwd.sh" todir="${server.dist}" />
		<property name="server.dist.file" value="${server.dist}-${version.number}-r${revision.number}.zip" />
		<zip basedir="${dist}" destfile="${server.dist.file}" excludes="*.zip">
			<zipfileset file="${original.openbis.server.dist}/install.sh" filemode="777" prefix="${server.folder.name}" />
		</zip>
		<delete dir="${server.dist}" />
	</target>

	<!--
      // Task for continuous integration server.
      -->
	<target name="ci"
            depends="build-common.ci, check-dependencies, dist"
            description="Task for continuous integration server." />

	<!--
      // Nightly build task for continuous integration server.
      -->
	<target name="nightly-build"
            depends="build-common.ci, run-system-tests, dist"
            description="Nightly build task for continuous integration server." />

	<!--
      // Compiles the javascript using GWT compiler.
      -->
	<target name="compile-javascript"
	        depends="prepare-web-client"
	        description="Compiles the javascript using GWT compiler.">
		<antcall target="compile-gwt-module">
			<param name="gwt.module.name" value="ch.systemsx.cisd.openbis.OpenBIS" />
		</antcall>
	</target>

	<!--
	   Compiles a GWT module to Javascript. As a side effect ${webbap.dist} is deleted.
	   
	   Parameters:
	      gwt.module.name: Fully qualified name of the module.
	-->
	<target name="compile-gwt-module">
		<delete dir="${webapp.dist}" />
		<java classpath="${ecp}:${gwt.dev.lib}:${gwt.user.lib}:../openbis/${sources}:${sources}"
		      classname="com.google.gwt.dev.GWTCompiler"
		      fork="true">
			<jvmarg value="-Xmx512M" />
			<arg value="-out" />
			<arg value="${webapp.dist}" />
			<arg value="${gwt.module.name}" />
		</java>
		<move todir="${webapp.dist}">
			<fileset dir="${webapp.dist}/${gwt.module.name}" />
		</move>
	</target>

	<!--
      // Creates build information.
      -->
	<target name="build-info" description="Creates build information.">
		<build-info revision="revision.number" version="version.number" clean="clean.flag" />
		<echo file="${build.info.file}">${version.number}:${revision.number}:${clean.flag}</echo>
	</target>

	<!--
      // Override 'prepare-gwt' target by writing out 'OpenBIS.gwt-without-entry-point.xml' and updating 'ClientPluginProvider.java'.
      -->
	<target name="prepare-gwt"
            description="Override 'prepare-gwt' by writing out 'OpenBIS.gwt-without-entry-point.xml' and updating 'ClientPluginProvider.java'.">
		<antcall target="prepare-web-client" />
		<antcall target="server-common-common.prepare-gwt" />
	</target>

	<!--
      // Updates 'ClientPluginProvider.java' and 'OpenBIS.gwt-without-entry-point.xml' with requested plugins.
      -->
	<target name="prepare-web-client" depends="compile"
            description="Updates 'ClientPluginProvider.java' and 'OpenBIS.gwt-without-entry-point.xml' with requested plugins.">
		<java classname="ch.systemsx.cisd.openbis.generic.shared.util.WebClientFilesUpdater"
              classpath="${ecp}:../openbis/source/java"
              fork="true"
              failonerror="true">
			<arg value="../openbis/source/java" />
		</java>
	</target>

	<!--
      // Creates JAR file.
      -->
	<target name="jar" depends="compile, build-info" description="Creates project jar file.">
		<delete file="${jar.file}" />
		<recursive-jar destfile="${jar.file}">
			<fileset dir="${classes}">
				<include name="**/*.class" />
				<!-- Exclude 'service.properties' and 'log.xml' file. -->
				<exclude name="service.properties" />
				<exclude name="log.xml" />
				<include name="**/*.properties" />
				<include name="${build.info.filename}" />
			</fileset>
		</recursive-jar>
	</target>

	<!--
      // Creates WAR file.
      -->
	<target name="war" depends="jar, compile-javascript" description="Creates project war file.">
		<mkdir dir="${webapp.dist.web-inf}" />
		<copy todir="${webapp.dist.web-inf}">
			<fileset dir="${application.server.resource}">
				<include name="spring-servlet.xml" />
			</fileset>
			<fileset dir="../server-common/${server-resource}">
				<include name="web-common.xml" />
			</fileset>
		</copy>
		<!-- Create an empty 'gwt.xml' file. -->
		<echo file="${webapp.dist.web-inf}/gwt.xml" message="" />
		<mkdir dir="${server.dist}" />
		<war warfile="${webapp.file}" webxml="${application.server.resource}/web.xml">
			<fileset dir="${webapp.dist}" />
			<classes dir="../openbis/source">
				<include name="**/*.sql" />
			</classes>
			<!-- Add 'applicationContext.xml' and related files. -->
			<classes dir="../server-common/${sources}">
				<include name="**/*.xml" />
			</classes>
			<classes dir="${sources}">
				<include name="**/*.xml" />
				<exclude name="**/*.gwt.xml" />
			</classes>
			<classes dir="${original.server.dist}">
				<include name="etc/log.xml" />
				<include name="etc/passwd" />
			</classes>
			<classes dir="${classes}">
				<include name="${build.info.filename}" />
			</classes>
			<lib dir="${dist}">
				<include name="${jar.file.name}" />
			</lib>
			<lib dir="${lib}/cisd-base">
				<include name="cisd-base.jar" />
			</lib>
			<lib dir="${lib}/commons-lang">
				<include name="commons-lang.jar" />
			</lib>
			<lib dir="${lib}/commons-logging">
				<include name="*.jar" />
			</lib>
			<lib dir="${lib}/commons-io">
				<include name="commons-io.jar" />
			</lib>
			<lib dir="${lib}/jline">
				<include name="jline.jar" />
			</lib>
			<lib dir="${lib}/commons-codec">
				<include name="commons-codec.jar" />
			</lib>
			<lib dir="${lib}/commons-httpclient">
				<include name="commons-httpclient.jar" />
			</lib>
			<lib dir="${lib}/log4j">
				<include name="log4j.jar" />
			</lib>
			<lib dir="${lib}/spring">
				<include name="spring.jar" />
			</lib>
			<lib dir="${lib}/spring/webmvc">
				<include name="spring-webmvc.jar" />
			</lib>
			<lib dir="${lib}/activation">
				<include name="activation.jar" />
			</lib>
			<lib dir="${lib}/mail">
				<include name="mail.jar" />
			</lib>
			<lib dir="${gwt.lib}">
				<include name="gwt-servlet.jar" />
			</lib>
			<lib dir="${lib}/commons-fileupload">
				<include name="*.jar" />
			</lib>
			<!-- Database -->
			<lib dir="${lib}/postgresql">
				<include name="postgresql.jar" />
			</lib>
			<lib dir="${lib}/commons-dbcp">
				<include name="commons-dbcp.jar" />
			</lib>
			<lib dir="${lib}/commons-pool">
				<include name="commons-pool.jar" />
			</lib>
			<!-- Hibernate -->
			<lib dir="${lib}/antlr">
				<include name="antlr.jar" />
			</lib>
			<lib dir="${lib}/commons-collections">
				<include name="commons-collections.jar" />
			</lib>
			<lib dir="${lib}/dom4j">
				<include name="dom4j.jar" />
			</lib>
			<lib dir="${lib}/hibernate">
				<include name="hibernate3.jar" />
			</lib>
			<lib dir="${lib}/hibernate/jta">
				<include name="jta.jar" />
			</lib>
			<lib dir="${lib}/ehcache">
				<include name="ehcache.jar" />
			</lib>
			<lib dir="${lib}/cglib">
				<include name="asm.jar" />
				<include name="asm-attrs.jar" />
				<include name="cglib.jar" />
			</lib>
			<lib dir="${lib}/hibernate-annotations">
				<include name="*.jar" />
			</lib>
			<lib dir="${lib}/hibernate-validator">
				<include name="*.jar" />
			</lib>
			<lib dir="${lib}/javassist">
				<include name="*.jar" />
			</lib>
			<lib dir="${lib}/slf4j">
				<include name="*.jar" />
				<exclude name="src.jar" />
			</lib>
			<lib dir="${lib}/slf4j/log4j12">
				<include name="*.jar" />
				<exclude name="src.jar" />
			</lib>
			<!-- Beanlib -->
			<lib dir="${lib}/beanlib">
				<include name="beanlib.jar" />
			</lib>
			<lib dir="${lib}/beanlib-hibernate">
				<include name="beanlib-hibernate.jar" />
			</lib>
			<!-- Hibernate Search -->
			<lib dir="${lib}/hibernate-search">
				<include name="*.jar" />
			</lib>
			<lib dir="${lib}/lucene">
				<include name="*.jar" />
			</lib>
			<lib dir="${lib}/lucene-highlighter">
				<include name="lucene-highlighter.jar" />
			</lib>
			<lib dir="${lib}/cisd-args4j">
				<include name="cisd-args4j.jar" />
			</lib>
		</war>
		<!-- Does some cleaning. -->
		<delete file="${jar.file}" failonerror="true" />
		<delete dir="${webapp.dist}" failonerror="true" />
	</target>

	<!--
	// Duplicate developer database and creates dump file and index files
	-->
	<target name="dump-and-index" 
	        description="Dumps developer database and creates a Lucene index files">
		<java classpath="${eclipse.cp}" failonerror="true" fork="true" dir="." maxmemory="512m"
		      classname="ch.systemsx.cisd.openbis.generic.server.dataaccess.db.IndexCreationUtil">
			<sysproperty key="log4j.configuration" file="etc/log.xml"/>
			<arg value="-d"/>
			<arg value="dev_indexed"/>
			<arg value="${targets}/dev_indexed.sql"/>
			<arg value="dev"/>
			<arg value="${targets}/dev_indexed-index"/>
		</java>
	</target>

	<!--
        // Replace developer database and index
        -->
	<target name="replace-database-and-index" 
                description="Replaces developer database and index">
		<java classpath="${eclipse.cp}" failonerror="true" fork="true" dir="."
                      classname="ch.systemsx.cisd.openbis.generic.server.dataaccess.db.DatabaseAndIndexReplacer">
			<sysproperty key="log4j.configuration" file="etc/log.xml"/>
			<arg value="dev"/>
			<arg value="${targets}/indices"/>
			<arg value="dev_indexed"/>
			<arg value="${targets}/dev_indexed-index"/>
		</java>
	</target>
</project>