<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:plugins="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-2.5.xsd">

    <import resource="hibernateContext.xml" />

    <import resource="dbConfigurationContext.xml" />

    <bean id="log-interceptor" class="ch.systemsx.cisd.common.spring.LogInterceptor" />

    <bean id="data-source" factory-bean="db-configuration-context" factory-method="getDataSource" />

    <bean id="transaction-manager"
        class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="hibernate-session-factory" />
    </bean>

    <bean id="sql-script-provider" class="ch.systemsx.cisd.dbmigration.DBMigrationEngine"
        factory-method="createOrMigrateDatabaseAndGetScriptProvider">
        <constructor-arg ref="db-configuration-context" />
        <constructor-arg>
            <bean
                class="ch.systemsx.cisd.openbis.generic.server.dataaccess.db.DatabaseVersionHolder"
                factory-method="getDatabaseVersion" />
        </constructor-arg>
    </bean>

    <bean id="dao-factory"
        class="ch.systemsx.cisd.openbis.generic.server.dataaccess.db.DAOFactory">
        <constructor-arg ref="db-configuration-context" />
        <constructor-arg ref="hibernate-session-factory" />
    </bean>

    <bean id="authentication-service"
        class="ch.systemsx.cisd.openbis.generic.server.AuthenticationServiceHolder">
        <constructor-arg ref="${authentication-service}" />
    </bean>

    <bean id="session-manager" class="ch.systemsx.cisd.authentication.DefaultSessionManager">
        <constructor-arg>
            <bean class="ch.systemsx.cisd.openbis.generic.server.SessionFactory" />
        </constructor-arg>
        <constructor-arg>
            <bean class="ch.systemsx.cisd.openbis.generic.server.LogMessagePrefixGenerator" />
        </constructor-arg>
        <constructor-arg ref="authentication-service" />
        <constructor-arg>
            <bean class="ch.systemsx.cisd.common.servlet.RequestContextProviderAdapter">
                <constructor-arg ref="request-context-provider" />
            </bean>
        </constructor-arg>
        <!-- The time after which an inactive session is expired by the service (in minutes). -->
        <constructor-arg value="${session-timeout}" />
    </bean>

    <bean id="common-business-object-factory"
        class="ch.systemsx.cisd.openbis.generic.server.CommonBusinessObjectFactory">
        <constructor-arg ref="dao-factory" />
    </bean>

    <!-- 
        // Common
    -->
    
    <bean id="common-server" class="ch.systemsx.cisd.openbis.generic.server.CommonServer">
        <constructor-arg ref="authentication-service" />
        <constructor-arg ref="session-manager" />
        <constructor-arg ref="dao-factory" />
        <constructor-arg ref="common-business-object-factory" />
    </bean>

    <bean id="common-service" class="ch.systemsx.cisd.openbis.generic.client.web.server.CommonClientService">
        <constructor-arg ref="common-server" />
        <constructor-arg ref="request-context-provider" />
    </bean>
    
    <bean id="etl-service" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="proxyInterfaces">
            <list>
                <value>ch.systemsx.cisd.openbis.generic.shared.ILIMSService</value>
            </list>
        </property>
        <property name="target">
            <bean class="ch.systemsx.cisd.openbis.generic.server.ETLService">
                <constructor-arg ref="session-manager" />
                <constructor-arg ref="dao-factory" />
                <constructor-arg ref="common-business-object-factory" />
            </bean>
        </property>
        <property name="interceptorNames">
            <list>
                <value>hibernate-transformer</value>
            </list>
        </property>
    </bean>


    <!-- 
        // Hibernate transformer
    -->

    <bean id="hibernate-transformer" class="ch.systemsx.cisd.openbis.generic.server.util.HibernateTransformer" />
    
    <!-- 
        // Transaction
    -->

    <!-- 
        // This discovers on-the-fly all <code>org.springframework.aop.Advisor</code> implementations.
    -->
    <bean id="bean-post-processor"
        class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />

    <bean class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">
        <property name="transactionInterceptor" ref="transaction-interceptor" />
    </bean>

    <bean id="transaction-interceptor"
        class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transaction-manager" />
        <property name="transactionAttributeSource">
            <bean
                class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource" />
        </property>
    </bean>

    <!-- 
        // Authorization
    -->

    <bean class="ch.systemsx.cisd.openbis.generic.server.authorization.AuthorizationAdvisor">
        <constructor-arg ref="${authorization-component-factory}" />
    </bean>

    <bean id="no-authorization"
        class="ch.systemsx.cisd.openbis.generic.server.authorization.NoAuthorization" />

    <bean id="active-authorization"
        class="ch.systemsx.cisd.openbis.generic.server.authorization.ActiveAuthorization">
        <constructor-arg ref="dao-factory" />
    </bean>

    <!--
        // Plugins
    -->

    <plugins:annotation-config />

    <plugins:component-scan base-package="ch.systemsx.cisd.openbis.plugin">
        <plugins:exclude-filter type="annotation"
            expression="org.springframework.stereotype.Controller" />
    </plugins:component-scan>

    <bean class="ch.systemsx.cisd.openbis.plugin.SampleServerPluginRegistry" factory-method="getInstance" /> 
</beans>