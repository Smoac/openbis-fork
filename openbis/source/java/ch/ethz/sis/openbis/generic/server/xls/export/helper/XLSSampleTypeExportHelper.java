package ch.ethz.sis.openbis.generic.server.xls.export.helper;

import java.util.Collections;
import java.util.Map;

import org.apache.poi.ss.usermodel.Workbook;

import ch.ethz.sis.openbis.generic.asapi.v3.IApplicationServerApi;
import ch.ethz.sis.openbis.generic.asapi.v3.dto.entitytype.EntityKind;
import ch.ethz.sis.openbis.generic.asapi.v3.dto.entitytype.id.EntityTypePermId;
import ch.ethz.sis.openbis.generic.asapi.v3.dto.entitytype.id.IEntityTypeId;
import ch.ethz.sis.openbis.generic.asapi.v3.dto.plugin.Plugin;
import ch.ethz.sis.openbis.generic.asapi.v3.dto.property.PropertyAssignment;
import ch.ethz.sis.openbis.generic.asapi.v3.dto.property.PropertyType;
import ch.ethz.sis.openbis.generic.asapi.v3.dto.property.fetchoptions.PropertyAssignmentFetchOptions;
import ch.ethz.sis.openbis.generic.asapi.v3.dto.sample.SampleType;
import ch.ethz.sis.openbis.generic.asapi.v3.dto.sample.fetchoptions.SampleTypeFetchOptions;
import ch.ethz.sis.openbis.generic.asapi.v3.dto.vocabulary.Vocabulary;

public class XLSSampleTypeExportHelper extends AbstractXLSExportHelper
{

    @Override
    public int add(final IApplicationServerApi api, final String sessionToken, final Workbook wb,
            final String permId, int rowNumber)
    {
        final SampleTypeFetchOptions fetchOptions = new SampleTypeFetchOptions();
        fetchOptions.withValidationPlugin().withScript();
        final PropertyAssignmentFetchOptions propertyAssignmentFetchOptions = fetchOptions.withPropertyAssignments();
        propertyAssignmentFetchOptions.withPropertyType().withVocabulary();
        propertyAssignmentFetchOptions.withPlugin().withScript();
        final Map<IEntityTypeId, SampleType> sampleTypes = api.getSampleTypes(sessionToken,
                Collections.singletonList(new EntityTypePermId(permId, EntityKind.SAMPLE)), fetchOptions);

        assert sampleTypes.size() <= 1;

        if (sampleTypes.size() > 0)
        {
            final SampleType sampleType = sampleTypes.values().iterator().next();

            addRow(wb, rowNumber++, true, "SAMPLE_TYPE");
            addRow(wb, rowNumber++, true, "Version", "Code", "Auto generate codes", "Validation script",
                    "Generated Code Prefix");

            // TODO: what to put to validation script?
            final Plugin validationPlugin = sampleType.getValidationPlugin();
            final String script = validationPlugin != null
                    ? (validationPlugin.getScript() != null ? validationPlugin.getScript() : "") : "";

            addRow(wb, rowNumber++, false, "1", sampleType.getCode(),
                    String.valueOf(sampleType.isAutoGeneratedCode()).toUpperCase(),
                    script != null ? script : "",
                    sampleType.getGeneratedCodePrefix());

            rowNumber = addEntityTypePropertyAssignments(wb, rowNumber, sampleType.getPropertyAssignments());

            return rowNumber + 1;
        } else
        {
            return rowNumber;
        }
    }

}
