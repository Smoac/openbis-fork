/*
 * Copyright 2014 ETH Zuerich, SIS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ch.systemsx.cisd.openbis.dss.generic.server.api.v2.sequencedatabases;

import java.io.File;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.log4j.Logger;

import ch.systemsx.cisd.common.fasta.FastaUtilities;
import ch.systemsx.cisd.common.fasta.SequenceType;
import ch.systemsx.cisd.common.filesystem.FileUtilities;
import ch.systemsx.cisd.common.logging.LogCategory;
import ch.systemsx.cisd.common.logging.LogFactory;
import ch.systemsx.cisd.etlserver.plugins.BlastDatabaseCreationMaintenanceTask;
import ch.systemsx.cisd.openbis.dss.generic.shared.api.internal.v2.ISearchDomainService;
import ch.systemsx.cisd.openbis.dss.generic.shared.utils.BlastUtils;
import ch.systemsx.cisd.openbis.generic.shared.api.v1.dto.AlignmentMatch;
import ch.systemsx.cisd.openbis.generic.shared.api.v1.dto.BlastScore;
import ch.systemsx.cisd.openbis.generic.shared.api.v1.dto.DataSetFileBlastSearchResultLocation;
import ch.systemsx.cisd.openbis.generic.shared.api.v1.dto.EntityKind;
import ch.systemsx.cisd.openbis.generic.shared.api.v1.dto.EntityPropertyBlastSearchResultLocation;
import ch.systemsx.cisd.openbis.generic.shared.api.v1.dto.SearchDomainSearchResult;

/**
 * Implementation of {@link ISearchDomainService} based on <a href="http://blast.ncbi.nlm.nih.gov/Blast.cgi">BLAST</a>. The following configuration
 * parameters are understood:
 * <ul>
 * <li><tt>blast-tools-directory</tt>: Absolute path to the directory with blastn and blastp command line tools.<br/>
 * <li><tt>blast-databases-folder</tt>: Folder with the BLAST databases as generated by {@link BlastDatabaseCreationMaintenanceTask}.
 * </ul>
 * By analyzing the specified sequence snippet either command line tool 'blastn' (nucleoid sequence) or 'blastp' (amoniacid sequence) is invoked.
 * <p>
 * The following optional parameters are understood:
 * <p>
 * blastn: task, evalue, word_size, ungapped
 * <p>
 * blastp: task, evalue, word_size
 * <p>
 * Note:
 * <ul>
 * <li>For flag-like options the option value has to be an empty string.
 * <li>The default value for 'task' is 'blastn'/'blastp'.
 * <li>Name space of optional parameters: In order to differenciate between blastn and blastp parameters the prefix 'blastn.' and 'blasp.' can be
 * used. In addition the name of the sequence database (as sepcified by the configuration parameter 'label') can be used to distinguish properties for
 * this instance from other instances.
 * <p>
 * Examples of understood optional properties assuming the name of the database reads 'My BLAST db':
 * <p>
 * blastn example:
 * 
 * <pre>
 * task
 * ungapped
 * blastn.word_size
 * My Blast db.evalue
 * My Blast db.blastn.task
 * </pre>
 * <p>
 * blastp example:
 * 
 * <pre>
 * task
 * blastp.task
 * My Blast db.evalue
 * My Blast db.blastp.word_size
 * </pre>
 * 
 * </ul>
 * 
 * @author Franz-Josef Elmer
 */
public class BlastDatabase extends AbstractSearchDomainService
{
    public static final Logger operationLog =
            LogFactory.getLogger(LogCategory.OPERATION, BlastDatabase.class);

    private static final String QUERY_FILE_NAME_TEMPLATE = "query-{0,date,yyyyMMDDHHmmssSSS}-{1}.fasta";

    private static final Pattern STITLE_PATTERN = Pattern.compile("(.*) \\[Data set: (.*), File: (.*)\\]$");

    private static final Pattern ENTITY_PROPERTY_TITLE_PATTERN = Pattern
            .compile("^(MATERIAL|EXPERIMENT|SAMPLE|DATA_SET)\\+(.+)\\+([A-Z0-9_\\-.]+)\\+(\\d+)$");

    private final boolean available;

    private final File queriesFolder;

    private final BlastUtils blaster;

    private AtomicInteger counter = new AtomicInteger();

    public BlastDatabase(Properties properties, File storeRoot)
    {
        super(properties, storeRoot);

        blaster = new BlastUtils(properties, storeRoot);
        available = blaster.available();
        File databaseFolder = blaster.getBlastDatabaseFolder(properties, storeRoot);
        queriesFolder = new File(databaseFolder, "queries-folder");
        queriesFolder.mkdirs();
    }

    @Override
    public boolean isAvailable()
    {
        return available;
    }

    @Override
    public List<SearchDomainSearchResult> search(String sequenceSnippet, Map<String, String> optionalParametersOrNull)
    {
        Map<String, String> parameters = new HashMap<String, String>();
        if (optionalParametersOrNull != null)
        {
            parameters.putAll(optionalParametersOrNull);
        }
        List<SearchDomainSearchResult> result = new ArrayList<SearchDomainSearchResult>();
        SequenceType sequenceType = FastaUtilities.determineSequenceType(sequenceSnippet);
        String queryFileName = new MessageFormat(QUERY_FILE_NAME_TEMPLATE).format(
                new Object[] { new Date(), counter.getAndIncrement() });
        File queryFile = new File(queriesFolder, queryFileName);
        try
        {
            FileUtilities.writeToFile(queryFile, ">query\n" + sequenceSnippet + "\n");
            List<String> output = blaster.processAndDeliverOutput(sequenceType, queryFile, name, parameters);
            for (String line : output)
            {
                Row row = new Row(line);
                SearchDomainSearchResult sequenceSearchResult = new SearchDomainSearchResult();
                sequenceSearchResult.setScore(createBlastScore(row));
                AlignmentMatch alignmentMatch = createAlignmentMatch(row);
                Matcher matcher = STITLE_PATTERN.matcher(row.title);
                if (matcher.matches())
                {
                    sequenceSearchResult.setResultLocation(
                            createDataSetFileBlastSearchResultLocation(matcher, alignmentMatch));
                    result.add(sequenceSearchResult);
                } else
                {
                    matcher = ENTITY_PROPERTY_TITLE_PATTERN.matcher(row.title);
                    if (matcher.matches())
                    {
                        sequenceSearchResult.setResultLocation(
                                createEntityPropertyBlastSearchResultLocation(matcher, alignmentMatch));
                        result.add(sequenceSearchResult);
                    }
                }
            }
        } finally
        {
            FileUtilities.delete(queryFile);
        }
        return result;
    }

    private EntityPropertyBlastSearchResultLocation createEntityPropertyBlastSearchResultLocation(Matcher matcher, AlignmentMatch alignmentMatch)
    {
        EntityPropertyBlastSearchResultLocation resultLocation = new EntityPropertyBlastSearchResultLocation();
        resultLocation.setEntityKind(EntityKind.valueOf(matcher.group(1)));
        resultLocation.setPermId(matcher.group(2));
        resultLocation.setPropertyType(matcher.group(3));
        resultLocation.setAlignmentMatch(alignmentMatch);
        return resultLocation;
    }

    private DataSetFileBlastSearchResultLocation createDataSetFileBlastSearchResultLocation(Matcher matcher, AlignmentMatch alignmentMatch)
    {
        DataSetFileBlastSearchResultLocation resultLocation = new DataSetFileBlastSearchResultLocation();
        resultLocation.setIdentifier(matcher.group(1));
        resultLocation.setPermId(matcher.group(2));
        resultLocation.setEntityKind(EntityKind.DATA_SET);
        resultLocation.setPathInDataSet(matcher.group(3));
        resultLocation.setAlignmentMatch(alignmentMatch);
        return resultLocation;
    }

    private AlignmentMatch createAlignmentMatch(Row row)
    {
        AlignmentMatch alignmentMatch = new AlignmentMatch();
        alignmentMatch.setSequenceStart(row.sstart);
        alignmentMatch.setSequenceEnd(row.send);
        alignmentMatch.setQueryStart(row.qstart);
        alignmentMatch.setQueryEnd(row.qend);
        alignmentMatch.setNumberOfMismatches(row.numberOfMismatchs);
        alignmentMatch.setTotalNumberOfGaps(row.totalNumberOfGaps);
        return alignmentMatch;
    }

    private BlastScore createBlastScore(Row row)
    {
        BlastScore blastScore = new BlastScore();
        blastScore.setScore(row.score);
        blastScore.setBitScore(row.bitscore);
        blastScore.setEvalue(row.evalue);
        return blastScore;
    }

    private static final class Row
    {
        private String title;

        private double bitscore;

        private double score;

        private double evalue;

        private int sstart;

        private int send;

        private int qstart;

        private int qend;

        private int len;

        private int numberOfMismatchs;

        private int totalNumberOfGaps;

        Row(String line)
        {
            String[] cells = line.split("\t");
            title = cells[len++];
            bitscore = asDouble(cells);
            score = asDouble(cells);
            evalue = asDouble(cells);
            sstart = asInt(cells);
            send = asInt(cells);
            qstart = asInt(cells);
            qend = asInt(cells);
            numberOfMismatchs = asInt(cells);
            totalNumberOfGaps = asInt(cells);
        }

        private int asInt(String[] cells)
        {
            try
            {
                return Integer.parseInt(cells[len++]);
            } catch (RuntimeException ex)
            {
                return -1;
            }
        }

        private double asDouble(String[] cells)
        {
            try
            {
                return Double.parseDouble(cells[len++]);
            } catch (RuntimeException ex)
            {
                return 0;
            }
        }
    }

}
