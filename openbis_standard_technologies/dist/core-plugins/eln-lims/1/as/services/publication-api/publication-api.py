import traceback

from ch.ethz.sis.openbis.generic.asapi.v3.dto.dataset import DataSetKind
from ch.ethz.sis.openbis.generic.asapi.v3.dto.dataset.create import DataSetCreation
from ch.ethz.sis.openbis.generic.asapi.v3.dto.dataset.fetchoptions import DataSetFetchOptions
from ch.ethz.sis.openbis.generic.asapi.v3.dto.dataset.id import DataSetPermId
from ch.ethz.sis.openbis.generic.asapi.v3.dto.datastore.fetchoptions import DataStoreFetchOptions
from ch.ethz.sis.openbis.generic.asapi.v3.dto.datastore.id import DataStorePermId
from ch.ethz.sis.openbis.generic.asapi.v3.dto.datastore.search import DataStoreSearchCriteria
from ch.ethz.sis.openbis.generic.asapi.v3.dto.entitytype import EntityKind
from ch.ethz.sis.openbis.generic.asapi.v3.dto.entitytype.id import EntityTypePermId
from ch.ethz.sis.openbis.generic.asapi.v3.dto.experiment.id import ExperimentIdentifier
from ch.ethz.sis.openbis.generic.asapi.v3.dto.sample.create import SampleCreation
from ch.ethz.sis.openbis.generic.asapi.v3.dto.space.id import SpacePermId
from ch.systemsx.cisd.common.logging import LogCategory
from ch.systemsx.cisd.openbis.generic.client.web.client.exception import UserFailureException
from java.util import ArrayList
from org.apache.log4j import Logger

operationLog = Logger.getLogger(str(LogCategory.OPERATION) + '.publication-api.py')


def process(context, parameters):
    method = parameters.get('method')

    try:
        if method == 'insertPublication':
            result = insertPublication(context, parameters)
        else:
            raise UserFailureException('Unknown method: "%s"' % str(method if method is not None else 'None'))
    except Exception as e:
        operationLog.error('Exception at: ' + traceback.format_exc())
        operationLog.error('Exception: ' + str(e))
        result = {
            'status': 'FAILED',
            'error': str(e)
        }
    return result


def insertPublication(context, parameters):
    transaction = context.applicationService
    sessionToken = transaction.loginAsSystem()

    v3 = context.applicationService

    name = parameters.get('name')
    if name is None:
        raise UserFailureException('name parameter missing')

    sampleId = createPublicationSample(parameters, sessionToken, v3).get(0)
    createDataSet(parameters, sessionToken, v3, sampleId)

    return {
        'status': 'OK',
    }


def createDataSet(parameters, sessionToken, v3, sampleId):
    openBISRelatedIdentifiers = parameters.get('openBISRelatedIdentifiers').split(',')
    identifiers = ArrayList(len(openBISRelatedIdentifiers))
    for identifier in openBISRelatedIdentifiers:
        identifiers.add(DataSetPermId(identifier))

    dataSetIds = v3.getDataSets(sessionToken, identifiers, DataSetFetchOptions()).keys()
    operationLog.debug('Found %d data sets.' % len(dataSetIds))

    dataStoreCode = getDefaultDataStoreCode(v3, sessionToken)

    dataSetCreation = DataSetCreation()
    dataSetCreation.setAutoGeneratedCode(True)
    dataSetCreation.setTypeId(EntityTypePermId('PUBLICATION_DATA', EntityKind.DATA_SET))
    dataSetCreation.setSampleId(sampleId)
    dataSetCreation.setDataSetKind(DataSetKind.CONTAINER)
    dataSetCreation.setComponentIds(dataSetIds)
    dataSetCreation.setDataStoreId(DataStorePermId(dataStoreCode))
    v3.createDataSets(sessionToken, [dataSetCreation])


def getDefaultDataStoreCode(v3, sessionToken):
    searchResult = v3.searchDataStores(sessionToken, DataStoreSearchCriteria(), DataStoreFetchOptions())
    return searchResult.objects.get(0).code


def createPublicationSample(parameters, sessionToken, v3):
    publicationOrganization = parameters.get('publicationOrganization')
    publicationType = parameters.get('publicationType')  # The only valid value for now is "Public Repository"
    publicationDescription = parameters.get('publicationDescription')  # Can be empty
    publicationURL = parameters.get('publicationURL')
    publicationIdentifier = parameters.get('publicationIdentifier')

    sampleCreation = SampleCreation()
    sampleCreation.setTypeId(EntityTypePermId('PUBLICATION'))
    sampleCreation.setExperimentId(ExperimentIdentifier('/PUBLICATIONS/PUBLIC_REPOSITORIES/PUBLICATIONS_COLLECTION'))
    sampleCreation.setSpaceId(SpacePermId('PUBLICATIONS'))
    sampleCreation.setProperty('$NAME', 'TEST NAME')
    sampleCreation.setProperty('$PUBLICATION.ORGANIZATION', publicationOrganization)
    sampleCreation.setProperty('$PUBLICATION.TYPE', publicationType)
    sampleCreation.setProperty('$PUBLICATION.IDENTIFIER', publicationIdentifier)
    sampleCreation.setProperty('$PUBLICATION.URL', publicationURL)
    sampleCreation.setProperty('$PUBLICATION.DESCRIPTION', publicationDescription)
    return v3.createSamples(sessionToken, [sampleCreation])
