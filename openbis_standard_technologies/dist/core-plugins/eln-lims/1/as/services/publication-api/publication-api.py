import traceback

from ch.ethz.sis.openbis.generic.asapi.v3.dto.dataset import DataSetKind
from ch.ethz.sis.openbis.generic.asapi.v3.dto.dataset.create import DataSetCreation
from ch.ethz.sis.openbis.generic.asapi.v3.dto.dataset.fetchoptions import DataSetFetchOptions
from ch.ethz.sis.openbis.generic.asapi.v3.dto.dataset.id import DataSetPermId
from ch.ethz.sis.openbis.generic.asapi.v3.dto.datastore.fetchoptions import DataStoreFetchOptions
from ch.ethz.sis.openbis.generic.asapi.v3.dto.datastore.id import DataStorePermId
from ch.ethz.sis.openbis.generic.asapi.v3.dto.datastore.search import DataStoreSearchCriteria
from ch.ethz.sis.openbis.generic.asapi.v3.dto.entitytype import EntityKind
from ch.ethz.sis.openbis.generic.asapi.v3.dto.entitytype.id import EntityTypePermId
from ch.ethz.sis.openbis.generic.asapi.v3.dto.experiment.id import ExperimentIdentifier
from ch.ethz.sis.openbis.generic.asapi.v3.dto.sample.create import SampleCreation
from ch.ethz.sis.openbis.generic.asapi.v3.dto.space.id import SpacePermId
from ch.systemsx.cisd.common.logging import LogCategory
from ch.systemsx.cisd.openbis.generic.client.web.client.exception import UserFailureException
from java.lang import String
from java.util import ArrayList
from java.util import HashMap
from java.util import LinkedHashSet
from org.apache.log4j import Logger

operationLog = Logger.getLogger(str(LogCategory.OPERATION) + '.publication-api.py')


def process(context, parameters):
    method = parameters.get('method')

    try:
        if method == 'insertPublication':
            result = insertPublication(context, parameters)
        else:
            raise UserFailureException('Unknown method: "%s"' % str(method if method is not None else 'None'))
    except Exception as e:
        operationLog.error('Exception at: ' + traceback.format_exc())
        operationLog.error('Exception: ' + str(e))
        result = HashMap()
        result.put('status','FAILED')
        result.put('error',str(e))
        return result
    return result


def insertPublication(context, parameters):
    v3 = context.applicationService
    sessionToken = None
    result = HashMap()
    try:
        sessionToken = v3.loginAsSystem()
        sampleIds = createPublicationSamples(parameters, sessionToken, v3)
        createDataSets(parameters, sessionToken, v3, sampleIds)
        result.put('status','OK')
    finally:
        v3.logout(sessionToken)
    return result


def createDataSets(parameters, sessionToken, v3, sampleIds):
    openBISRelatedIdentifiersString = parameters.get('openBISRelatedIdentifiers')
    dataStoreCode = getDefaultDataStoreCode(v3, sessionToken)
    containerDatasetsCreations = []
    if openBISRelatedIdentifiersString is not None:
        openBISRelatedIdentifiers = openBISRelatedIdentifiersString.split(',')
        identifiers = ArrayList(len(openBISRelatedIdentifiers))
        for identifier in openBISRelatedIdentifiers:
            if (not identifier.startswith('GROUP:')):
                identifiers.add(DataSetPermId(identifier))
        dataSetIds = v3.getDataSets(sessionToken, identifiers, DataSetFetchOptions()).keys()
        if len(dataSetIds) > 0:
            for sampleId in sampleIds:
                dataSetCreation = DataSetCreation()
                dataSetCreation.setAutoGeneratedCode(True)
                dataSetCreation.setTypeId(EntityTypePermId('PUBLICATION_DATA', EntityKind.DATA_SET))
                dataSetCreation.setSampleId(sampleId)
                dataSetCreation.setDataSetKind(DataSetKind.CONTAINER)
                dataSetCreation.setDataStoreId(DataStorePermId(dataStoreCode))
                dataSetCreation.setComponentIds(dataSetIds)
                containerDatasetsCreations.append(dataSetCreation)
    v3.createDataSets(sessionToken, containerDatasetsCreations)


def getDefaultDataStoreCode(v3, sessionToken):
    searchResult = v3.searchDataStores(sessionToken, DataStoreSearchCriteria(), DataStoreFetchOptions())
    return searchResult.objects.get(0).code


def getGroupsForRelatedIdentifiers(parameters):
    groups = []
    openBISRelatedIdentifiersString = parameters.get('openBISRelatedIdentifiers')
    allIdentifiers = openBISRelatedIdentifiersString.split(',')
    for identifier in allIdentifiers:
        if identifier.startswith('GROUP:'):
            groups.append(identifier[6:])
    return groups


def createPublicationSamples(parameters, sessionToken, v3):
    publicationOrganization = parameters.get('publicationOrganization')
    if publicationOrganization is None:
        raise ValueError('publicationOrganization parameter is None.')

    name = parameters.get('name')
    if name is None:
        raise ValueError('name parameter is None.')

    publicationType = parameters.get('publicationType')  # The only valid value for now is "Public Repository"
    if publicationType is None:
        raise ValueError('publicationType parameter is None.')

    publicationDescription = parameters.get('publicationDescription')  # Can be empty
    if publicationDescription is None:
        publicationDescription = ''

    publicationURL = parameters.get('publicationURL')
    if publicationURL is None:
        raise ValueError('publicationURL parameter is None.')

    publicationIdentifier = parameters.get('publicationIdentifier')
    if publicationIdentifier is None:
        raise ValueError('publicationIdentifier parameter is None.')

    openBISRelatedIdentifiers = parameters.get('openBISRelatedIdentifiers')
    if openBISRelatedIdentifiers is None:
        raise ValueError('openBISRelatedIdentifiers parameter is None.')

    groupCodes = getGroupsForRelatedIdentifiers(parameters)

    sampleCreations = []
    for groupCode in groupCodes:
        sampleCreation = SampleCreation()
        sampleCreation.setTypeId(EntityTypePermId('PUBLICATION'))
        if groupCode == 'GENERAL':
            groupPrefix = ''
        else:
            groupPrefix = groupCode + '_'
        sampleCreation.setExperimentId(ExperimentIdentifier('/' + groupPrefix + 'PUBLICATIONS/' + groupPrefix
                + 'PUBLIC_REPOSITORIES/' + groupPrefix + 'PUBLICATIONS_COLLECTION'))
        sampleCreation.setSpaceId(SpacePermId(groupPrefix + 'PUBLICATIONS'))
        sampleCreation.setProperty('$NAME', name)
        sampleCreation.setProperty('$PUBLICATION.ORGANIZATION', publicationOrganization)
        sampleCreation.setProperty('$PUBLICATION.TYPE', publicationType)
        sampleCreation.setProperty('$PUBLICATION.IDENTIFIER', publicationIdentifier)
        sampleCreation.setProperty('$PUBLICATION.URL', publicationURL)
        sampleCreation.setProperty('$PUBLICATION.DESCRIPTION', publicationDescription)
        # Adding identifiers with removed repetitions
        sampleCreation.setProperty('$PUBLICATION.OPENBIS_RELATED_IDENTIFIERS',
                                   String.join(', ', LinkedHashSet(openBISRelatedIdentifiers.split(','))))
        sampleCreations.append(sampleCreation)

    operationLog.info('Creating publication samples, sampleCreations: %s' % str(sampleCreations))
    return v3.createSamples(sessionToken, sampleCreations)
