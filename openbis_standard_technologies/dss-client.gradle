configurations.create('dssClientLibs')
configurations.create('dssClientPartialLibs')

dependencies {

	dssClientLibs 'cglib:cglib-nodep:+',
					'cisd:cisd-args4j:+',
					'cisd:cisd-base:+',
					'apache:poi-ooxml:+',
					'springframework:spring:+',
					'apache:commons-logging:+',
					'python:jython:+',
					'apache:commons-httpclient:+',
					'marathon:marathon-spring-util:+',
					'apache:log4j:+',
					'dom4j:dom4j:+'

	dssClientPartialLibs 'google:gwt-user:2.4'
}

task dssClient(type: Jar) {
	baseName 'dss_client'
	
	from (project(':common').compileJava.outputs.getFiles().getAsFileTree().plus(
		  project(':openbis-common').compileJava.outputs.getFiles().getAsFileTree().plus(
		  project(':openbis_api').compileJava.outputs.getFiles().getAsFileTree().plus(
		  project(':openbis').compileJava.outputs.getFiles().getAsFileTree().plus(
		  project(':datastore_server').compileJava.outputs.getFiles().getAsFileTree())))).matching {
		include 'ch/systemsx/cisd/common/**/*.class'	
      	include 'ch/systemsx/cisd/openbis/common/**/*.class'
      	include 'ch/systemsx/cisd/openbis/generic/shared/**/*.class'
      	include 'ch/systemsx/cisd/openbis/plugin/query/shared/**/*.class'
        include 'ch/systemsx/cisd/openbis/dss/client/**/*.class'
      	include 'ch/systemsx/cisd/openbis/dss/generic/shared/api/**/*.class'
      	include 'ch/systemsx/cisd/openbis/dss/generic/shared/utils/**/*.class'
      	include 'ch/systemsx/cisd/openbis/dss/BuildAndEnvironmentInfo.class'
	})
	
	from zipTree(configurations.dssClientPartialLibs.files.iterator().next()).matching {
			include '**/com/google/gwt/user/client/rpc/IsSerializable.class'
			include '**/com/google/gwt/user/client/rpc/SerializableException.class'
	}
	
    manifest {
        def manifestClasspath = configurations.dssClientLibs.collect { it.getName() }.join(',') 
		attributes("Main-Class": "ch.systemsx.cisd.openbis.dss.client.api.cli.DssClient",
                   "Version": versionNumber,
                   "Build-Number": "${versionNumber} (r${revisionNumber},${cleanFlag})",
                   "Class-Path": manifestClasspath )
    }
}	

task dssClientZip(type: Zip, dependsOn: dssClient) {
	baseName 'dss_client'

	from (configurations.dssClientLibs) {
		into 'dss_client/lib'
	}
	
	from (dssClient.archivePath) {
		into 'dss_client/lib'
	}
	
	from(project(':datastore_server').file('dist/dss_client.sh')) {
		into 'dss_client'
	}
}
