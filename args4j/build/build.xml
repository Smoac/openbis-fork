<project name="args4j" basedir=".." default="dist">
	<import file="../../build_resources/ant/build-common.xml" />
	<project-classpath name="ecp" classes="${classes}" />

	<property name="mainfolder" value="${ant.project.name}" />
	<property name="distfolder" value="cisd-${mainfolder}" />
	<property name="jar.file.name" value="cisd-${ant.project.name}" />
	<property name="jar.file" value="${dist}/${jar.file.name}.jar" />
	<property name="dist.file" value="${dist}/cisd-${mainfolder}" />
	<property name="src.zip.file.name" value="${jar.file.name}-src.zip" />
	<property name="src.zip.file" value="${dist}/${src.zip.file.name}" />
	<property name="javadoc.zip.file" value="${dist}/cisd-${mainfolder}-javadoc.zip" />
	<property name="original.dist" value="../${ant.project.name}/dist" />

	<target name="ci" depends="build-common.ci" />

	<!--
	// Add '*.properties' files to 'build-common.compile' target.
	-->
	<target name="compile"
	        depends="build-common.compile"
	        description="Overrides the parent 'compile' target by including properties files.">
		<copy todir="${classes}">
			<fileset dir="${sources}">
				<include name="**/*.properties" />
			</fileset>
		</copy>
	</target>

	<!-- 
    // Cleans distribution directory.
  	-->
	<target name="clean" description="Cleans target directory.">
		<delete dir="${dist}" failonerror="true" />
		<delete dir="${targets}/ant" failonerror="true" />
		<mkdir dir="${dist}" />
		<mkdir dir="${targets}/ant" />
	</target>

	<!--
    // Creates 'cisd-args4j.jar'. Note that this will not contain the sources.
  	-->
	<target name="jar" depends="compile" description="Creates project jar file.">
		<delete file="${jar.file}" />
		<build-info revision="revision.number" version="version.number" clean="clean.flag" />
		<echo file="${build.info.file}">${version.number}:${revision.number}:${clean.flag}</echo>
		<recursive-jar destfile="${jar.file}">
			<fileset dir="${classes}">
				<include name="**/*.class" />
				<include name="${build.info.filename}" />
			</fileset>
			<zipfileset src="${lib}/cisd-base/cisd-base.jar">
				<include name="ch/systemsx/cisd/base/utilities/BuildAndEnvironmentInfo.class" />
			</zipfileset>
			<manifest>
				<attribute name="Main-Class"
				           value="ch.systemsx.cisd.base.utilities.BuildAndEnvironmentInfo" />
				<attribute name="Version" value="${version.number}" />
				<attribute name="Build-Number"
				           value="${version.number} (r${revision.number},${clean.flag})" />
			</manifest>
		</recursive-jar>
	</target>

	<!--
    // Creates 'cisd-args4j-src.zip'. Note that this will only contain the sources.
  	-->
	<target name="src-zip" description="Creates project source zip file.">
		<delete file="${src.zip.file}" />
		<build-info revision="revision.number" version="version.number" clean="clean.flag" />
		<mkdir dir="${classes}" />
		<echo file="${build.info.file}">${version.number}:${revision.number}:${clean.flag}</echo>
		<jar destfile="${src.zip.file}">
			<fileset dir="${classes}">
				<include name="${build.info.filename}" />
			</fileset>
			<fileset dir="${sources}">
				<include name="**/*" />
			</fileset>
			<manifest>
				<attribute name="Version" value="${version.number}" />
				<attribute name="Build-Number"
				           value="${version.number} (r${revision.number},${clean.flag})" />
			</manifest>
		</jar>
	</target>

	<target name="doc">
		<delete dir="targets/doc" />
		<javadoc sourcepath="source/java"
		         packagenames="ch.systemsx.cisd.args4j.*"
		         classpath="../libraries/cisd-base/cisd-base.jar:../libraries/commons-lang/commons-lang.jar:../libraries/commons-io/commons-io.jar:../libraries/restrictionchecker/restrictions.jar"
		         destdir="targets/doc"
		         access="public" />
	</target>

	<target name="dist"
	        depends="clean, src-zip, jar, doc"
	        description="Creates the project jar file and the source jar file">
		<zip destfile="${javadoc.zip.file}" basedir="${targets}" includes="doc/**" />
		<delete dir="${dist}/${mainfolder}" />
		<delete dir="${dist}/${distfolder}" />
		<move file="${jar.file}" todir="${dist}/${distfolder}/lib" />
		<move file="${src.zip.file}" todir="${dist}/${distfolder}/src" />
		<move file="${javadoc.zip.file}" todir="${dist}/${distfolder}/doc" />
		<copy todir="${dist}/${distfolder}">
			<fileset dir="${original.dist}" />
		</copy>
		<zip destfile="${dist.file}-${version.number}-r${revision.number}.zip"
		     basedir="${dist}"
		     includes="${distfolder}/**" />
		<delete dir="${dist}/${distfolder}" />
	</target>

</project>