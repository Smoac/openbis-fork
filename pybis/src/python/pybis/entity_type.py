from tabulate import tabulate
from texttable import Texttable
from pybis.utils import check_datatype, split_identifier, format_timestamp, is_identifier, is_permid, nvl
from pandas import DataFrame
from .openbis_object import OpenBisObject


class EntityType():
    """ holds are properties, that are assigned to an entity, eg. sample or experiment
    """

    def __str__(self):
        """String representation of this entity type
        """
        return self.data['code']

    def _attrs(self):
        return ['code', 'description', 'autoGeneratedCode', 'subcodeUnique',
            'generatedCodePrefix', 'listable', 'showContainer', 'showParents',
            'showParentMetadata', 'validationPlugin',
        ]

    def __dir__(self):
        return self._attrs() + [
            'get_props()'
        ]

    def __getattr__(self, name):
        if name in self._attrs():
            if name in self.data:
                return self.data[name]
            else:
                return ''

    def __eq__(self, other):
        return str(self) == str(other)

    def __ne__(self, other):
        return str(self) != str(other)

    def get_props(self, including_vocabulary=False):
        attrs = ['code', 'label', 'description', 'dataType', 'mandatory', 'showInEditView', 'ordinal']
        if including_vocabulary:
            attrs.append('vocabulary')
        pas = [ {**pa['propertyType'], **pa} for pa in self.data['propertyAssignments'] ]
        return DataFrame(pas, columns=attrs)

    get_propertyAssignments = get_props

    def add_props(self, props):
        pass


    def del_props(self, props):
        pass

    def codes(self):
        codes = []
        for pa in self.data['propertyAssignments']:
            codes.append(pa['propertyType']['code'].lower())
        return codes


class SampleType(
    OpenBisObject, EntityType,
    entity='sampleType',
    single_item_method_name='get_sample_type'
):

    def add_semantic_annotation(self, **kwargs):
        semantic_annotation = SemanticAnnotation(
            openbis_obj=self.openbis, isNew=True, 
            entityType=self.code, **kwargs
        )
        semantic_annotation.save()
        return semantic_annotation

    def get_semantic_annotations(self):
        return self.openbis.search_semantic_annotations(entityType=self.code)


class DataSetType(
    OpenBisObject, EntityType,
    entity='dataSetType',
    single_item_method_name='get_dataset_type'
):
    pass


class MaterialType(
    OpenBisObject, EntityType,
    entity='materialType',
    single_item_method_name='get_material_type'
):
    pass


class ExperimentType(
    OpenBisObject, EntityType,
    entity='experimentType',
    single_item_method_name='get_experiment_type'
):
    pass
