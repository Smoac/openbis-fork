from tabulate import tabulate
from texttable import Texttable
from pandas import DataFrame
from .openbis_object import OpenBisObject
from .things import Things
from .utils import check_datatype, split_identifier, format_timestamp, is_identifier, is_permid, nvl, extract_permid, extract_code

class EntityType:
    """ EntityTypes define a variety of an entity, eg. sample, dataSet, experiment
    This is the parent class of the SampleType, DataSetType, ExperimentType and
    MaterialType classes.
    """

    def __init__(self, openbis_obj, data=None, **kwargs):

        if data is not None and 'propertyAssignments' in data: 
            pas = [ 
                {**pa['propertyType'], **pa} 
                for pa in data['propertyAssignments'] 
            ]
            self.__dict__['_propertyAssignments'] = pas

        super().__init__(openbis_obj, data=data, **kwargs)

    def __str__(self):
        """String representation of this entity type
        """
        return self.data['code']

    def _attrs(self):
        return [
            'code', 'description', 'autoGeneratedCode', 'subcodeUnique',
            'generatedCodePrefix', 'listable', 'showContainer', 'showParents',
            'showParentMetadata', 'validationPlugin',
        ]

    def __dir__(self):
        return self._attrs() + [
            'get_property_assignments()',
            'assign_property()',
            'revoke_property()',
            'move_to_top()',
            'move_after_property()',
        ]

    def __getattr__(self, name):
        if name in self._attrs():
            if name in self.data:
                return self.data[name]
            else:
                return ''

    def __eq__(self, other):
        return str(self) == str(other)

    def __ne__(self, other):
        return str(self) != str(other)

    def get_property_assignments(self):
        attrs = [
            'code', 'label', 'description', 'dataType',
            'showInEditView', 'section', 'ordinal',
            'entityType', 'propertyType',
            'mandatory', 'showRawValuesInForms',
            'semanticAnnotationsInherited',
            'registrator', 'registrationDate', 'plugin'
        ]

        pas = self.__dict__['_propertyAssignments']
        df = DataFrame(pas, columns=attrs)
        df['propertyType'] = df['propertyType'].map(extract_code)
        df['registrationDate'] = df['registrationDate'].map(format_timestamp)

        return Things(
            openbis_obj = self.openbis,
            entity = 'propertyType',
            single_item_method = self.openbis.get_property_type,
            df = df,
            start_with = 1,
            count = len(pas),
            totalCount = len(pas),
        )

    def assign_property(self, 
        prop, 
        section=None, ordinal=None,
        mandatory=False, initialValueForExistingEntities=None,
        showInEditView=True, showRawValueInForms=True

    ):
        """The section groups certain properties.
        The ordinal is defining the rank in the list where the property appears.
        The mandatory defines whether a property must be filled in. If you make a
        property mandatory later, you have to define an initialValueForExistingEntities too.

        """
        if 'propertyAssignments' not in self.__dict__:
            self.__dict__['propertyAssignments'] = {}




    def revoke_property(self, 
        prop, 
        forceRemovingAssignments=False
    ):
        if 'propertyAssignments' not in self.__dict__:
            self.__dict__['propertyAssignments'] = {}

    def codes(self):
        codes = []
        for pa in self.data['propertyAssignments']:
            codes.append(pa['propertyType']['code'].lower())
        return codes


class SampleType(
    OpenBisObject, EntityType,
    entity='sampleType',
    single_item_method_name='get_sample_type'
):

    def __dir__(self):
        return [
            'add_semantic_annotation()',
            'get_semantic_annotations()'
        ] + EntityType.__dir__(self) + OpenBisObject.__dir__(self)


    def add_semantic_annotation(self, **kwargs):
        semantic_annotation = SemanticAnnotation(
            openbis_obj=self.openbis, isNew=True, 
            entityType=self.code, **kwargs
        )
        semantic_annotation.save()
        return semantic_annotation

    def get_semantic_annotations(self):
        return self.openbis.search_semantic_annotations(entityType=self.code)


class DataSetType(
    OpenBisObject, EntityType,
    entity='dataSetType',
    single_item_method_name='get_dataset_type'
):
    def __dir__(self):
        return [
        ] + EntityType.__dir__(self) + OpenBisObject.__dir__(self)


class MaterialType(
    OpenBisObject, EntityType,
    entity='materialType',
    single_item_method_name='get_material_type'
):
    def __dir__(self):
        return [
        ] + EntityType.__dir__(self) + OpenBisObject.__dir__(self)


class ExperimentType(
    OpenBisObject, EntityType,
    entity='experimentType',
    single_item_method_name='get_experiment_type'
):
    def __dir__(self):
        return [
        ] + EntityType.__dir__(self) + OpenBisObject.__dir__(self)
